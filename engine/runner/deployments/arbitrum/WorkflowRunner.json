{
  "address": "0x433007Ba207063FEA449760b43Bdd69c483f3254",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "frontDoorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogNewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userAmount",
          "type": "uint256"
        }
      ],
      "name": "RemainingAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount[]",
          "name": "startingAssets",
          "type": "tuple[]"
        }
      ],
      "name": "WorkflowContinuation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "workflowRunnerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "sourceIsCaller",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "amountIsPercent",
                      "type": "bool"
                    },
                    {
                      "components": [
                        {
                          "internalType": "enum AssetType",
                          "name": "assetType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "assetAddress",
                          "type": "address"
                        }
                      ],
                      "internalType": "struct Asset",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct WorkflowStepInputAsset[]",
                  "name": "inputAssets",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                },
                {
                  "internalType": "int16",
                  "name": "nextStepIndex",
                  "type": "int16"
                }
              ],
              "internalType": "struct WorkflowStep[]",
              "name": "steps",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct BeforeAfter[]",
              "name": "beforeAll",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct BeforeAfter[]",
              "name": "afterAll",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Workflow",
          "name": "workflow",
          "type": "tuple"
        }
      ],
      "name": "WorkflowExecution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "stepIndex",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "stepTypeId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "stepAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "sourceIsCaller",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "amountIsPercent",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct WorkflowStepInputAsset[]",
              "name": "inputAssets",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "argData",
              "type": "bytes"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            }
          ],
          "indexed": false,
          "internalType": "struct WorkflowStep",
          "name": "step",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stepAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmountsToCaller",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "indexed": false,
          "internalType": "struct WorkflowStepResult",
          "name": "result",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "feesTaken",
          "type": "uint256[]"
        }
      ],
      "name": "WorkflowStepExecution",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "workflowRunnerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "sourceIsCaller",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "amountIsPercent",
                      "type": "bool"
                    },
                    {
                      "components": [
                        {
                          "internalType": "enum AssetType",
                          "name": "assetType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "assetAddress",
                          "type": "address"
                        }
                      ],
                      "internalType": "struct Asset",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct WorkflowStepInputAsset[]",
                  "name": "inputAssets",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                },
                {
                  "internalType": "int16",
                  "name": "nextStepIndex",
                  "type": "int16"
                }
              ],
              "internalType": "struct WorkflowStep[]",
              "name": "steps",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct BeforeAfter[]",
              "name": "beforeAll",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct BeforeAfter[]",
              "name": "afterAll",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Workflow",
          "name": "workflow",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "startingAssets",
          "type": "tuple[]"
        }
      ],
      "name": "continueWorkflow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eternalStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "workflowRunnerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "sourceIsCaller",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "amountIsPercent",
                      "type": "bool"
                    },
                    {
                      "components": [
                        {
                          "internalType": "enum AssetType",
                          "name": "assetType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "assetAddress",
                          "type": "address"
                        }
                      ],
                      "internalType": "struct Asset",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct WorkflowStepInputAsset[]",
                  "name": "inputAssets",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                },
                {
                  "internalType": "int16",
                  "name": "nextStepIndex",
                  "type": "int16"
                }
              ],
              "internalType": "struct WorkflowStep[]",
              "name": "steps",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct BeforeAfter[]",
              "name": "beforeAll",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct BeforeAfter[]",
              "name": "afterAll",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Workflow",
          "name": "workflow",
          "type": "tuple"
        }
      ],
      "name": "executeWorkflow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        }
      ],
      "name": "getStepAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUserProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upstreamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2721d4362cb1a091583d8d3bba7e67afdfdbdae07bdbb3b9f2a468eafc989c1",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x433007Ba207063FEA449760b43Bdd69c483f3254",
    "transactionIndex": 1,
    "gasUsed": "22261451",
    "logsBloom": "0x
    "blockHash": "0xce97b1632a3f30123eba0ecb8ad09c4701c965a416bd129cc0b8c6b920a8615c",
    "transactionHash": "0xb2721d4362cb1a091583d8d3bba7e67afdfdbdae07bdbb3b9f2a468eafc989c1",
    "logs": [],
    "blockNumber": 118820539,
    "cumulativeGasUsed": "22261451",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5DE1dF35467c24C024E598ae6a2FB98240e62EC7"
  ],
  "numDeployments": 11,
  "solcInputHash": "11dd9d47cb88433a6594ebb4be07927a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"frontDoorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"}],\"name\":\"RemainingAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount[]\",\"name\":\"startingAssets\",\"type\":\"tuple[]\"}],\"name\":\"WorkflowContinuation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"workflowRunnerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"internalType\":\"struct BeforeAfter[]\",\"name\":\"beforeAll\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"internalType\":\"struct BeforeAfter[]\",\"name\":\"afterAll\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Workflow\",\"name\":\"workflow\",\"type\":\"tuple\"}],\"name\":\"WorkflowExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stepIndex\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"indexed\":false,\"internalType\":\"struct WorkflowStep\",\"name\":\"step\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmountsToCaller\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"indexed\":false,\"internalType\":\"struct WorkflowStepResult\",\"name\":\"result\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"feesTaken\",\"type\":\"uint256[]\"}],\"name\":\"WorkflowStepExecution\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"workflowRunnerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"internalType\":\"struct BeforeAfter[]\",\"name\":\"beforeAll\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"internalType\":\"struct BeforeAfter[]\",\"name\":\"afterAll\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Workflow\",\"name\":\"workflow\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"startingAssets\",\"type\":\"tuple[]\"}],\"name\":\"continueWorkflow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eternalStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"workflowRunnerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"internalType\":\"struct BeforeAfter[]\",\"name\":\"beforeAll\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"internalType\":\"struct BeforeAfter[]\",\"name\":\"afterAll\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Workflow\",\"name\":\"workflow\",\"type\":\"tuple\"}],\"name\":\"executeWorkflow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"}],\"name\":\"getStepAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUserProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upstreamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RemainingAsset((uint8,address),uint256,uint256,uint256)\":{\"params\":{\"asset\":\"The asset.\",\"feeAmount\":\"The portion of the total amount that FMP will keep as a fee.\",\"totalAmount\":\"The total amount of the asset.\",\"userAmount\":\"The portion of the total amount that is sent to the user.\"}},\"WorkflowContinuation(uint256,address,((uint8,address),uint256)[])\":{\"params\":{\"nonce\":\"The nonce provided by the caller on the source chain, used to correlate the source chain workflow segment with this segment.\",\"startingAssets\":\"The asset that was transferred from the source chain to this chain\"}},\"WorkflowExecution(address,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]))\":{\"params\":{\"userAddress\":\"The user for which this workflow is executing.\",\"workflow\":\"The workflow.\"}},\"WorkflowStepExecution(uint16,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16),uint16,address,((uint8,address),uint256)[],(((uint8,address),uint256)[],((uint8,address),uint256)[],((uint8,address),uint256)[],int16,int24),uint256[])\":{\"params\":{\"inputAssetAmounts\":\"The input assets, with the absolute amount of each asset.\",\"result\":\"The result returned form the step invocation.\",\"step\":\"The step configuration.\",\"stepAddress\":\"The address of the step used for this invocation.\",\"stepIndex\":\"The index of the step in the Workflow.steps array.\",\"stepTypeId\":\"The logical id of the step (also repeated in the step param but duplicated here for convenience).\"}}},\"kind\":\"dev\",\"methods\":{\"executeWorkflow((address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]))\":{\"params\":{\"workflow\":\"The workflow to execute.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RemainingAsset((uint8,address),uint256,uint256,uint256)\":{\"notice\":\"This event is emitted after the workflow has completed, once for each asset ramining with a non-zero amount.\"},\"WorkflowContinuation(uint256,address,((uint8,address),uint256)[])\":{\"notice\":\"This event is emitted when this is a continuation of a workflow from another chain\"},\"WorkflowExecution(address,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]))\":{\"notice\":\"This event is emitted when a workflow execution begins.\"},\"WorkflowStepExecution(uint16,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16),uint16,address,((uint8,address),uint256)[],(((uint8,address),uint256)[],((uint8,address),uint256)[],((uint8,address),uint256)[],int16,int24),uint256[])\":{\"notice\":\"This event is emitted when immediately after invoking a step in the workflow.\"}},\"kind\":\"user\",\"methods\":{\"continueWorkflow(address,uint256,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]),((uint8,address),uint256)[])\":{\"notice\":\"Continue a workflow that started on a different chain.This is not callable by 3rd parties, only approved bridge integrations call this method.\"},\"executeWorkflow((address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]))\":{\"notice\":\"Initiate the execution of a workflow.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WorkflowRunner.sol\":\"WorkflowRunner\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowRunner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './model/AssetAmount.sol';\\nimport './model/Workflow.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/// @notice An interface defining the entry point to the engine for executing workflows.\\ninterface IWorkflowRunner {\\n  /// @notice Initiate the execution of a workflow.\\n  /// @param workflow The workflow to execute.\\n  function executeWorkflow(Workflow calldata workflow) external payable;\\n\\n  /// @notice Continue a workflow that started on a different chain.\\n  /// @notice This is not callable by 3rd parties, only approved bridge integrations call this method.\\n  function continueWorkflow(\\n    address userAddress,\\n    uint256 nonce,\\n    Workflow memory workflow,\\n    AssetAmount[] memory startingAssets\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xef6461c7c07007e97af766fc8d2e338c457d13faf0f88d495ffcd39d232d6749\",\"license\":\"MIT\"},\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/IWorkflowStepAfterAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/// @title The interface between WorkflowRunner and each Step implementation when the step needs\\n/// to do something after the steps in the workflow are done executing.\\n/// @author Marty Saxton\\n/// @notice This interface is optional.\\ninterface IWorkflowStepAfterAll {\\n  /// @notice called by WorkflowRunner to execute some logic after the workflow ends.\\n  /// @param argData Step specific arguments in ABI encoding\\n  function afterAll(bytes calldata argData) external payable;\\n}\\n\",\"keccak256\":\"0xe8b7845f49fe869df24670caba015bd0ec45ec625d1e62c169e2cfc8ff9384d8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/IWorkflowStepBeforeAll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/// @title The interface between WorkflowRunner and each Step implementation when the step needs\\n/// to do something before the steps in the workflow execute.\\n/// @author Marty Saxton\\n/// @notice This interface is optional.\\ninterface IWorkflowStepBeforeAll {\\n  /// @notice called by WorkflowRunner to execute some logic before the workflow starts.\\n  /// @param argData Step specific arguments in ABI encoding\\n  function beforeAll(bytes calldata argData) external payable;\\n}\\n\",\"keccak256\":\"0x8699df7c4d959adf97d5157f2acf7daa89d37bf8805eacfe415b6001c5ff81c5\",\"license\":\"MIT\"},\"@freemarket/core/contracts/LibPercent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary LibPercent {\\n    /// Percents have 3 decimals of precision, so:\\n    /// 100% is represented as 100000 (100.000%)\\n    /// 1% is represented as 1000 (1.000%)\\n    /// 1 basis point (1/100th of a percent or 0.010% ) is 10\\n    /// the smallest possible percentage is 1/10th of a basis point, or 1 'decibip'\\n    /// @param value the value to take a percentage of\\n    /// @param percent the percentage in decibips\\n    function percentageOf(uint256 value, uint256 percent) internal pure returns (uint256) {\\n        require(0 <= percent && percent <= 100000, \\\"percent must be between 0 and 100000\\\");\\n        uint256 x = value * percent;\\n        return x / 100000;\\n    }\\n}\\n\",\"keccak256\":\"0x7ea6920edf326cd70ed863322b2343db8f76118886dbf5214340ccbee6f6c5b9\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Workflow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './WorkflowStep.sol';\\n\\nstruct BeforeAfter {\\n  uint16 stepTypeId;\\n  address stepAddress;\\n  bytes argData;\\n}\\n\\n// The main workflow data structure.\\nstruct Workflow {\\n  // The address of the WorkflowRunner contract, allowing the caller to specify an older version of the runner.\\n  // If this is the zero address, the most current version of the runner will be used.\\n  // If a non-zero address is specified, it must be a whitelisted address of a previous WorkflowRunner contract.\\n  address workflowRunnerAddress;\\n  // The nodes in the directed graph of steps.\\n  // The start step is defined to be at index 0.\\n  // The 'edges' in the graph are defined within each WorkflowStep,\\n  // but can be overriden in the return value of a step.\\n  WorkflowStep[] steps;\\n  BeforeAfter[] beforeAll;\\n  BeforeAfter[] afterAll;\\n}\\n\",\"keccak256\":\"0xbf92bbf9f956e11eaa5f682ce1c1a376caebdda540a405089d7db7101e32be06\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './WorkflowStepInputAsset.sol';\\n\\n// Parameters for a workflow step\\nstruct WorkflowStep {\\n  // The logical identifer of the step (e.g., 10 represents WrapEtherStep).\\n  uint16 stepTypeId;\\n  // The contract address of a specific version of the action.\\n  // Individual step contracts may be upgraded over time, and this allows\\n  // workflows 'freeze' the version of contract for this step\\n  // A value of address(0) means use the latest and greatest version  of\\n  // this step based only on stepTypeId.\\n  address stepAddress;\\n  // The input assets to this step.\\n  WorkflowStepInputAsset[] inputAssets;\\n  // Additional step-specific parameters for this step, typically serialized in standard abi encoding.\\n  bytes argData;\\n  // The index of the next step in the directed graph of steps. (see the Workflow.steps array)\\n  int16 nextStepIndex;\\n}\\n\",\"keccak256\":\"0x96868dae52d20bfea5af58beb749ad8cbd30a679849313680b214cf470f32a13\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepInputAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\n// an input asset to a WorkflowStep\\nstruct WorkflowStepInputAsset {\\n  // if true, the source of the asset is the caller of the workflow, otherwise it is the output of some previous step\\n  bool sourceIsCaller;\\n  // if true 'amount' is treated as a percent, with 4 decimals of precision (1000000 represents 100%)\\n  bool amountIsPercent;\\n  // the input asset\\n  Asset asset;\\n  // the amount of the input asset\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x2a478c09e1deb0268eba6ba5f3721d2e2a4b666b9f0735cfa0735dc9ebe70c4b\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmountsToCaller;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in absolute currency units)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0x0cc72223efa79934b173495c5452dfc6095d2f95cdd4d93c3d0c25cda0893b62\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/AssetComparisons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/WorkflowStep.sol';\\nimport './LibAssetBalances.sol';\\n\\nimport './Comparison.sol';\\n\\nusing LibAssetBalances for LibAssetBalances.AssetBalances;\\n\\n\\nstruct AssetComparisonParams {\\n  Asset asset;\\n  Comparison comparison;\\n  uint256 amount;\\n  int16 ifYes;\\n}\\n\\nenum AssetComparisonType {\\n  Balance,\\n  Credit,\\n  Debit\\n}\\n\\nlibrary AssetComparison {\\n  function getNextStepIndex(\\n    WorkflowStep memory currentStep,\\n    LibAssetBalances.AssetBalances memory assetBalances,\\n    AssetComparisonType assetComparisonType\\n  ) internal view returns (int16) {\\n    AssetComparisonParams memory args = abi.decode(currentStep.argData, (AssetComparisonParams));\\n    Comparison comparision = args.comparison;\\n    LibAssetBalances.AssetEntry memory assetEntry = LibAssetBalances.getAssetEntry(assetBalances, args.asset);\\n\\n    uint256 amount;\\n    if (assetComparisonType == AssetComparisonType.Balance) {\\n      amount = assetEntry.balance;\\n    } else  if (assetComparisonType == AssetComparisonType.Credit) {\\n      amount = assetEntry.previousCredit;\\n    } else {\\n      amount = assetEntry.previousDebit;\\n    }\\n\\n    uint256 argsAmount = args.amount;\\n    bool result;\\n    assembly {\\n      switch comparision\\n      case 0 {\\n        result := eq(amount, argsAmount)\\n      }\\n      case 1 {\\n        result := not(eq(amount, argsAmount))\\n      }\\n      case 2 {\\n        result := lt(amount, argsAmount)\\n      }\\n      case 3 {\\n        result := or(eq(amount, argsAmount), lt(amount, argsAmount))\\n      }\\n      case 4 {\\n        result := gt(amount, argsAmount)\\n      }\\n      case 5 {\\n        result := or(eq(amount, argsAmount), gt(amount, argsAmount))\\n      }\\n    }\\n    if (result) {\\n\\n\\n      return args.ifYes;\\n    }\\n\\n\\n    return currentStep.nextStepIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x3c49258d4caae2a6ac3efd66b44773d791271b5527ad8111577133256f949db9\",\"license\":\"MIT\"},\"contracts/ChainBranch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/WorkflowStep.sol';\\n\\n\\nstruct ChainBranchParams {\\n  uint256 chainId;\\n  int16 ifYes;\\n}\\n\\nlibrary ChainBranch {\\n  function getNextStepIndex(WorkflowStep memory currentStep) internal view returns (int16) {\\n    ChainBranchParams memory args = abi.decode(currentStep.argData, (ChainBranchParams));\\n    if (args.chainId == block.chainid) {\\n\\n\\n      return args.ifYes;\\n    }\\n\\n\\n    return currentStep.nextStepIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x2e46858ac965f66da4f3b33611a57a708adb88ae8fb22afef532e054957509c6\",\"license\":\"MIT\"},\"contracts/Comparison.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum Comparison {\\n  Equal,\\n  NotEqual,\\n  LessThan,\\n  LessThanOrEqual,\\n  GreaterThan,\\n  GreaterThanOrEqual\\n}\\n\",\"keccak256\":\"0xcd9f57a56a76fb72fa23ec65cfcb5dec9b7010afe3eb019f79b62465a352db8f\",\"license\":\"MIT\"},\"contracts/EternalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\n\\nimport './Ownable.sol';\\n\\ncontract EternalStorage is Ownable {\\n  address internal writer;\\n\\n  modifier onlyWriter() {\\n    require(msg.sender == writer);\\n    _;\\n  }\\n\\n  constructor(address owner, address initialWriter) Ownable(owner) {\\n    writer = initialWriter;\\n  }\\n\\n  event StorageWriterChanged(address oldWriter, address newWriter);\\n\\n  function getWriter() public view returns (address) {\\n    return writer;\\n  }\\n\\n  function setWriter(address newWriter) public onlyOwner {\\n    emit StorageWriterChanged(writer, newWriter);\\n    writer = newWriter;\\n  }\\n\\n  mapping(bytes32 => uint256) uIntStorage;\\n  mapping(bytes32 => string) stringStorage;\\n  mapping(bytes32 => address) addressStorage;\\n  mapping(bytes32 => bytes) bytesStorage;\\n  mapping(bytes32 => bool) boolStorage;\\n  mapping(bytes32 => int256) intStorage;\\n\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n  using EnumerableMap for EnumerableMap.AddressToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n  using EnumerableMap for EnumerableMap.UintToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) enumerableMapUintToAddressMapStorage;\\n  mapping(bytes32 => EnumerableMap.AddressToUintMap) enumerableMapAddressToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToBytes32Map) enumerableMapBytes32ToBytes32MapStorage;\\n  mapping(bytes32 => EnumerableMap.UintToUintMap) enumerableMapUintToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToUintMap) enumerableMapBytes32ToUintMapStorage;\\n\\n  // *** Getter Methods ***\\n  function getUint(bytes32 _key) external view returns (uint256) {\\n    return uIntStorage[_key];\\n  }\\n\\n  function getString(bytes32 _key) external view returns (string memory) {\\n    return stringStorage[_key];\\n  }\\n\\n  function getAddress(bytes32 _key) external view returns (address) {\\n    return addressStorage[_key];\\n  }\\n\\n  function getBytes(bytes32 _key) external view returns (bytes memory) {\\n    return bytesStorage[_key];\\n  }\\n\\n  function getBool(bytes32 _key) external view returns (bool) {\\n    return boolStorage[_key];\\n  }\\n\\n  function getInt(bytes32 _key) external view returns (int256) {\\n    return intStorage[_key];\\n  }\\n\\n  // *** Setter Methods ***\\n  function setUint(bytes32 _key, uint256 _value) external onlyWriter {\\n    uIntStorage[_key] = _value;\\n  }\\n\\n  function setString(bytes32 _key, string memory _value) external onlyWriter {\\n    stringStorage[_key] = _value;\\n  }\\n\\n  function setAddress(bytes32 _key, address _value) external {\\n    addressStorage[_key] = _value;\\n  }\\n\\n  function setBytes(bytes32 _key, bytes memory _value) external onlyWriter {\\n    bytesStorage[_key] = _value;\\n  }\\n\\n  function setBool(bytes32 _key, bool _value) external onlyWriter {\\n    boolStorage[_key] = _value;\\n  }\\n\\n  function setInt(bytes32 _key, int256 _value) external onlyWriter {\\n    intStorage[_key] = _value;\\n  }\\n\\n  // *** Delete Methods ***\\n  function deleteUint(bytes32 _key) external onlyWriter {\\n    delete uIntStorage[_key];\\n  }\\n\\n  function deleteString(bytes32 _key) external onlyWriter {\\n    delete stringStorage[_key];\\n  }\\n\\n  function deleteAddress(bytes32 _key) external onlyWriter {\\n    delete addressStorage[_key];\\n  }\\n\\n  function deleteBytes(bytes32 _key) external onlyWriter {\\n    delete bytesStorage[_key];\\n  }\\n\\n  function deleteBool(bytes32 _key) external onlyWriter {\\n    delete boolStorage[_key];\\n  }\\n\\n  function deleteInt(bytes32 _key) external onlyWriter {\\n    delete intStorage[_key];\\n  }\\n\\n  // enumerable get\\n\\n  function getEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  // enumerable tryGet\\n\\n  function tryGetEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bool, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (bool, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (bool, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  // enumerable set\\n\\n  function setEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2, address _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapAddressToUint(bytes32 _key1, address _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2, bytes32 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapUintToUint(bytes32 _key1, uint256 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  // enumerable remove\\n\\n  function removeEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToAddressMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapAddressToUint(bytes32 _key1, address _key2) external onlyWriter {\\n    enumerableMapAddressToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToBytes32MapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  // enumerable contains\\n\\n  function containsEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  // enumerable length\\n\\n  function lengthEnumerableMapUintToAddress(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToAddressMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapAddressToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToBytes32(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapUintToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].length();\\n  }\\n\\n  // enumerable at\\n\\n  function atEnumerableMapUintToAddress(bytes32 _key1, uint256 _index) external view returns (uint256, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapAddressToUint(bytes32 _key1, uint256 _index) external view returns (address, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToBytes32(bytes32 _key1, uint256 _index) external view returns (bytes32, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapUintToUint(bytes32 _key1, uint256 _index) external view returns (uint256, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToUint(bytes32 _key1, uint256 _index) external view returns (bytes32, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].at(_index);\\n  }\\n}\\n\",\"keccak256\":\"0x17a2dde162f6ed01a95b2c64c4b5b345e7d0e8fcf4f51d1a861c199cd91fcbef\",\"license\":\"MIT\"},\"contracts/FreeMarketBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './Ownable.sol';\\n\\ncontract FreeMarketBase is Ownable {\\n  // TODO create getters\\n  address public eternalStorageAddress;\\n  address public upstreamAddress;\\n  bool public isUserProxy;\\n\\n  constructor(\\n    address owner,\\n    address eternalStorage,\\n    address upstream,\\n    bool userProxy\\n  ) Ownable(owner) {\\n    eternalStorageAddress = eternalStorage;\\n    upstreamAddress = upstream;\\n    isUserProxy = userProxy;\\n  }\\n}\\n\",\"keccak256\":\"0xeeac9b86b1e934d1a84316e3f006abb32375088cef75fe0a56e74e2e1e38b87e\",\"license\":\"MIT\"},\"contracts/FrontDoor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './EternalStorage.sol';\\nimport './Proxy.sol';\\nimport './LibStorageWriter.sol';\\n\\ncontract FrontDoor is Proxy {\\n  constructor() Proxy(msg.sender, address(new EternalStorage(msg.sender, address(0))), address(0x0), false) {\\n    bytes32 key = keccak256(abi.encodePacked('frontDoor'));\\n    StorageWriter.setAddress(eternalStorageAddress, key, address(this));\\n  }\\n\\n  event UpstreamChanged(address oldUpstream, address newUpstream);\\n  event UpstreamRemoved(address oldUpstream);\\n\\n  function setUpstream(address newUpstream) public onlyOwner {\\n    address oldUpstream = upstreamAddress;\\n    upstreamAddress = newUpstream;\\n    emit UpstreamChanged(oldUpstream, newUpstream);\\n  }\\n}\\n\",\"keccak256\":\"0x62fda07ff75e261b1fbac980b48508481f205c99214206cabdbde790e76f40c8\",\"license\":\"MIT\"},\"contracts/IHasUpstream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IHasUpstream {\\n  function getUpstream() external view returns (address);\\n}\\n\",\"keccak256\":\"0xef83d78a64e9c3cbd2b9238523af2a9a03abc8c42890e57a1ffeefddd7999be3\",\"license\":\"MIT\"},\"contracts/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/Asset.sol\\\";\\n\\nlibrary LibAsset {\\n    function encodeAsset(Asset memory asset) internal pure returns (uint256) {\\n        return encodeAsset(asset.assetType, asset.assetAddress);\\n    }\\n\\n    function encodeAsset(AssetType assetType, address assetAddress) internal pure returns (uint256) {\\n        uint160 a1 = uint160(assetAddress);\\n        uint256 a2 = uint256(a1);\\n        uint256 a3 = a2 << 16;\\n        uint256 t1 = uint256(assetType);\\n        uint256 a4 = a3 | t1;\\n        return a4;\\n        // return (uint256(uint160(assetAddress)) << 16) & uint256(assetType);\\n    }\\n\\n    function decodeAsset(uint256 assetInt) internal pure returns (Asset memory) {\\n        AssetType assetType = AssetType(uint16(assetInt));\\n        address addr = address(uint160(assetInt >> 16));\\n        return Asset(assetType, addr);\\n    }\\n}\\n\",\"keccak256\":\"0x1d6e47bd0553b08d7d3f8a47e59cb3a0d62840bb94cdbbc90e35d413805b1cef\",\"license\":\"MIT\"},\"contracts/LibAssetBalances.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport './LibAsset.sol';\\n\\nusing Strings for uint256;\\n\\nlibrary LibAssetBalances {\\n  uint8 constant MAX_ENTRIES = 10;\\n\\n  struct AssetEntry {\\n    uint256 asset;\\n    uint256 balance;\\n    uint256 previousCredit;\\n    uint256 previousDebit;\\n  }\\n\\n  struct AssetBalances {\\n    AssetEntry[MAX_ENTRIES] entries;\\n    uint8 end;\\n  }\\n\\n  function getAssetBalance(AssetBalances memory entrySet, Asset memory asset) internal pure returns (uint256) {\\n    return getAssetEntry(entrySet, asset).balance;\\n  }\\n\\n  function getPreviousCredit(AssetBalances memory entrySet, Asset memory asset) internal pure returns (uint256) {\\n    return getAssetEntry(entrySet, asset).previousCredit;\\n  }\\n\\n  function getPreviousDebit(AssetBalances memory entrySet, Asset memory asset) internal pure returns (uint256) {\\n    return getAssetEntry(entrySet, asset).previousDebit;\\n  }\\n\\n  function getAssetEntry(AssetBalances memory entrySet, Asset memory asset) internal pure returns (AssetEntry memory) {\\n    AssetEntry[MAX_ENTRIES] memory entries = entrySet.entries;\\n    uint256 assetAsInt = LibAsset.encodeAsset(asset);\\n    for (uint16 i = 0; i < entrySet.end; ++i) {\\n      if (entries[i].asset == assetAsInt) {\\n        return entries[i];\\n      }\\n    }\\n    return AssetEntry(0, 0, 0, 0);\\n  }\\n\\n  function credit(AssetBalances memory entrySet, uint256 assetAsInt, uint256 amount) internal pure {\\n    if (amount > 0) {\\n      uint256 index = getAssetIndex(entrySet, assetAsInt);\\n      (bool success, uint256 newBalance) = SafeMath.tryAdd(entrySet.entries[index].balance, amount);\\n      if (!success) {\\n        revertArithmetic('credit', assetAsInt, entrySet.entries[index].balance, amount);\\n      }\\n      // updateBalance(entrySet, index, newBalance);\\n      entrySet.entries[index].balance = newBalance;\\n      entrySet.entries[index].previousCredit = amount;\\n    }\\n  }\\n\\n  function debit(AssetBalances memory entrySet, uint256 assetAsInt, uint256 amount) internal pure {\\n    if (amount > 0) {\\n      uint256 index = getAssetIndex(entrySet, assetAsInt);\\n      (bool success, uint256 newBalance) = SafeMath.trySub(entrySet.entries[index].balance, amount);\\n      if (!success) {\\n        revertArithmetic('debit', assetAsInt, entrySet.entries[index].balance, amount);\\n      }\\n      // updateBalance(entrySet, index, newBalance);\\n      entrySet.entries[index].balance = newBalance;\\n      entrySet.entries[index].previousDebit = amount;\\n    }\\n  }\\n\\n  function credit(AssetBalances memory entrySet, Asset memory asset, uint256 amount) internal pure {\\n    credit(entrySet, LibAsset.encodeAsset(asset), amount);\\n  }\\n\\n  function debit(AssetBalances memory entrySet, Asset memory asset, uint256 amount) internal pure {\\n    debit(entrySet, LibAsset.encodeAsset(asset), amount);\\n  }\\n\\n  function revertArithmetic(string memory op, uint256 assetAsInt, uint256 a, uint256 b) internal pure {\\n    Asset memory asset = LibAsset.decodeAsset(assetAsInt);\\n    revert(\\n      string.concat(\\n        op,\\n        ' assetType=',\\n        uint256(asset.assetType).toString(),\\n        ' assetAddress=',\\n        uint256(uint160(asset.assetAddress)).toHexString(),\\n        ' values ',\\n        a.toString(),\\n        ', ',\\n        b.toString()\\n      )\\n    );\\n  }\\n\\n  function updateBalance(AssetBalances memory entrySet, uint256 index, uint256 newBalance) internal pure returns (uint256) {\\n    if (newBalance == 0) {\\n      removeAt(entrySet, index);\\n    } else {\\n      entrySet.entries[index].balance = newBalance;\\n    }\\n    return newBalance;\\n  }\\n\\n  function removeAt(AssetBalances memory entrySet, uint256 index) internal pure {\\n    entrySet.entries[index] = entrySet.entries[entrySet.end - 1];\\n    --entrySet.end;\\n  }\\n\\n  function getAssetIndex(AssetBalances memory entrySet, Asset memory asset) internal pure returns (uint256) {\\n    uint256 assetAsInt = LibAsset.encodeAsset(asset);\\n    return getAssetIndex(entrySet, assetAsInt);\\n  }\\n\\n  function getAssetIndex(AssetBalances memory entrySet, uint256 assetAsInt) internal pure returns (uint256) {\\n    for (uint256 i = 0; i < entrySet.end; ++i) {\\n      if (entrySet.entries[i].asset == assetAsInt) {\\n        return i;\\n      }\\n    }\\n    require(entrySet.end < MAX_ENTRIES, 'too many token balances');\\n    entrySet.entries[entrySet.end] = AssetEntry(assetAsInt, 0, 0, 0);\\n    return entrySet.end++;\\n  }\\n\\n  function getAssetCount(AssetBalances memory entrySet) internal pure returns (uint8) {\\n    return entrySet.end;\\n  }\\n\\n  function getAssetAt(AssetBalances memory entrySet, uint8 index) internal pure returns (AssetAmount memory) {\\n    require(index < entrySet.end, 'index out of bounds while accessing asset balances');\\n    Asset memory a = LibAsset.decodeAsset(entrySet.entries[index].asset);\\n    return AssetAmount(a, entrySet.entries[index].balance);\\n  }\\n}\\n\",\"keccak256\":\"0x9ef0c21af9eae2a0b3070f3c357656f97920ec2262e669a7652b39254f486f00\",\"license\":\"MIT\"},\"contracts/LibConfigReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './EternalStorage.sol';\\n\\nlibrary LibConfigReader {\\n  string constant STEP_FEES_KEY = 'stepFees';\\n  string constant DEFAULT_FEE_KEY = 'defaultFees';\\n  uint256 constant FEE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n  // latestStepAddresses maps stepTypeId to latest and greatest version of that step\\n  bytes32 constant latestStepAddresses = 0xc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd; // keccak256('latestActionAddresses')\\n  bytes32 constant runnerAddresses = 0x32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f5; // keccak256('runnerAddresses')\\n  bytes32 constant allStepAddresses = 0x18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e99139555; // keccak256('allStepAddresses')\\n  bytes32 public constant subscribers = keccak256('subscribers');\\n\\n  function getStepAddressInternal(address eternalStorageAddress, uint16 stepTypeId) internal view returns (address) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.getEnumerableMapUintToAddress(latestStepAddresses, stepTypeId);\\n  }\\n\\n  function getStepWhitelistKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked('stepWhiteList', stepTypeId));\\n  }\\n\\n  function getStepBlacklistKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked('stepBlackList', stepTypeId));\\n  }\\n\\n  function isStepAddressWhitelisted(address eternalStorageAddress, uint16 stepTypeId, address stepAddress) internal view returns (bool) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.containsEnumerableMapAddressToUint(getStepWhitelistKey(stepTypeId), stepAddress);\\n  }\\n\\n  function isStepAddressWhitelisted(address eternalStorageAddress, address stepAddress) internal view returns (bool) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.containsEnumerableMapAddressToUint(allStepAddresses, stepAddress);\\n  }\\n\\n  function getStepFeeKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(STEP_FEES_KEY, stepTypeId));\\n  }\\n\\n  function getDefaultFeeKey() internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(DEFAULT_FEE_KEY));\\n  }\\n\\n  function encodeFee(uint256 _fee, bool isPercent) internal pure returns (uint256) {\\n    uint256 fee = _fee;\\n    if (isPercent) {\\n      fee |= FEE_MASK;\\n    }\\n    return fee;\\n  }\\n\\n  function decodeFee(uint256 feeEncoded) internal pure returns (uint256, bool) {\\n    bool isPercent = (feeEncoded & FEE_MASK) > 0;\\n    uint256 fee = feeEncoded & ~FEE_MASK;\\n    return (fee, isPercent);\\n  }\\n\\n  function getDefaultFee(address eternalStorageAddress) internal view returns (uint256, bool) {\\n    uint256 encodedFee = EternalStorage(eternalStorageAddress).getUint(getDefaultFeeKey());\\n    return decodeFee(encodedFee);\\n  }\\n\\n  function getStepFee(address eternalStorageAddress, uint16 stepTypeId) internal view returns (uint256, bool) {\\n    uint256 encodedFee = EternalStorage(eternalStorageAddress).getUint(getStepFeeKey(stepTypeId));\\n    return decodeFee(encodedFee);\\n  }\\n\\n  function isSubscriber(address eternalStorageAddress, address callerAddress) internal view returns (bool) {\\n    return EternalStorage(eternalStorageAddress).containsEnumerableMapAddressToUint(subscribers, callerAddress);\\n  }\\n}\\n\",\"keccak256\":\"0xa97688e4d200083626ba0699ebffa1ff334d8178a27e44cf79790787a5bd91d3\",\"license\":\"MIT\"},\"contracts/LibStorageWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary StorageWriter {\\n    // *** Setter Methods ***\\n    function setUint(address storageAddr, bytes32 key, uint256 value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setUint(bytes32,uint256)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setString(address storageAddr, bytes32 key, string memory value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setAddress(address storageAddr, bytes32 key, address value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setAddress(bytes32,address)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setBytes(address storageAddr, bytes32 key, bytes memory value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setBytes(bytes32,bytes memory)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setBool(address storageAddr, bytes32 key, bool value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setBool(bytes32,bool)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setInt(address storageAddr, bytes32 key, int256 value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setInt(bytes32,int256)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    // *** Delete Methods ***\\n    function deleteUint(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"deleteUint(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteString(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteAddress(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteBytes(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteBool(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteInt(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function setStepAddress(address storageAddr, uint16 stepTypeId, address stepAddress) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setStepAddress(uint16,address)\\\", stepTypeId, stepAddress));\\n        require(success, string(returnData));\\n    }\\n}\\n\",\"keccak256\":\"0xccede755458ec2a36261519cf06894f0bf1db0128212f59fb18e82ba02f696a7\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ncontract Ownable {\\n  address payable public owner;\\n\\n  constructor(address initialOwner) {\\n    owner = payable(initialOwner);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  event LogNewOwner(address sender, address newOwner);\\n\\n  function setOwner(address payable newOwner) external onlyOwner {\\n    require(newOwner != address(0));\\n    owner = newOwner;\\n    emit LogNewOwner(msg.sender, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0xa798ec89af451652edfa77d05689d3330f503ed4bf9e01d6620d6b2c6a617544\",\"license\":\"MIT\"},\"contracts/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './IHasUpstream.sol';\\nimport './FreeMarketBase.sol';\\nimport './EternalStorage.sol';\\n\\n\\ncontract Proxy is FreeMarketBase, IHasUpstream {\\n  bytes32 constant runnerAddresses = 0x32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f5; // keccak256('runnerAddresses')\\n\\n  constructor(\\n    address owner,\\n    address storageAddress,\\n    address upstream,\\n    bool userProxy\\n  ) FreeMarketBase(owner, storageAddress, upstream, userProxy) {}\\n\\n  function getUpstream() external view virtual returns (address) {\\n    return upstreamAddress;\\n  }\\n\\n  function resolveUpstream() internal view returns (address addr) {\\n    address upstreamFromArgs = getAddressFromCalldata();\\n\\n    if (upstreamFromArgs != address(0)) {\\n\\n      EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n      require(eternalStorage.containsEnumerableMapAddressToUint(runnerAddresses, upstreamFromArgs), 'provided upstream not whitelisted');\\n      return upstreamFromArgs;\\n    } else {\\n\\n    }\\n    return upstreamAddress;\\n  }\\n\\n  function getAddressFromCalldata() internal pure returns (address addr) {\\n    assembly {\\n      let offset := add(4, calldataload(4))\\n      addr := calldataload(offset)\\n    }\\n  }\\n\\n  /// @dev this forwards all calls generically to upstream, only the owner can invoke this\\n  fallback() external payable {\\n\\n    address upstream = resolveUpstream();\\n\\n    _delegate(upstream);\\n  }\\n\\n  /// @dev this allows this contract to receive ETH\\n  receive() external payable {\\n    // noop\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   */\\n  function _delegate(address upstr) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), upstr, 0, calldatasize(), 0, 0)\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n      // let ptr := mload(0x40)\\n      // calldatacopy(ptr, 0, calldatasize())\\n      // let result := delegatecall(gas(), implementation, ptr, calldatasize(), 0, 0)\\n      // let size := returndatasize()\\n      // returndatacopy(ptr, 0, size)\\n      // switch result\\n      // case 0 {\\n      //   revert(ptr, size)\\n      // }\\n      // default {\\n      //   return(ptr, size)\\n      // }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x474762384d8c814a214e08ec2f0ada71584f588bd0f1052f0bcb90767b9d6d23\",\"license\":\"MIT\"},\"contracts/WorkflowRunner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '@freemarket/core/contracts/model/Workflow.sol';\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\nimport '@freemarket/core/contracts/IWorkflowStepBeforeAll.sol';\\nimport '@freemarket/core/contracts/IWorkflowStepAfterAll.sol';\\nimport '@freemarket/core/contracts/LibPercent.sol';\\nimport '@freemarket/core/contracts/IWorkflowRunner.sol';\\nimport './FrontDoor.sol';\\nimport './LibAssetBalances.sol';\\nimport './ChainBranch.sol';\\nimport './AssetComparisons.sol';\\nimport './LibConfigReader.sol';\\n\\n\\nuint16 constant STEP_TYPE_ID_CHAIN_BRANCH = 1;\\nuint16 constant STEP_TYPE_ID_ASSET_AMOUNT_BRANCH = 2;\\nuint16 constant STEP_TYPE_ID_PREV_OUTPUT_BRANCH = 3;\\n\\ncontract WorkflowRunner is FreeMarketBase, ReentrancyGuard, IWorkflowRunner {\\n  constructor(\\n    address payable frontDoorAddress\\n  )\\n    FreeMarketBase(\\n      msg.sender, // owner\\n      FrontDoor(frontDoorAddress).eternalStorageAddress(), // eternal storage address\\n      address(0), // upstream (this doesn't have one)\\n      false // isUserProxy\\n    )\\n  {}\\n\\n  /// @notice This event is emitted when a workflow execution begins.\\n  /// @param userAddress The user for which this workflow is executing.\\n  /// @param workflow The workflow.\\n  event WorkflowExecution(address userAddress, Workflow workflow);\\n\\n  /// @notice This event is emitted when immediately after invoking a step in the workflow.\\n  /// @param stepIndex The index of the step in the Workflow.steps array.\\n  /// @param step The step configuration.\\n  /// @param stepTypeId The logical id of the step (also repeated in the step param but duplicated here for convenience).\\n  /// @param stepAddress The address of the step used for this invocation.\\n  /// @param inputAssetAmounts The input assets, with the absolute amount of each asset.\\n  /// @param result The result returned form the step invocation.\\n  event WorkflowStepExecution(\\n    uint16 stepIndex,\\n    WorkflowStep step,\\n    uint16 stepTypeId,\\n    address stepAddress,\\n    AssetAmount[] inputAssetAmounts,\\n    WorkflowStepResult result,\\n    uint256[] feesTaken\\n  );\\n\\n  /// @notice This event is emitted after the workflow has completed, once for each asset ramining with a non-zero amount.\\n  /// @param asset The asset.\\n  /// @param totalAmount The total amount of the asset.\\n  /// @param feeAmount The portion of the total amount that FMP will keep as a fee.\\n  /// @param userAmount The portion of the total amount that is sent to the user.\\n  event RemainingAsset(Asset asset, uint256 totalAmount, uint256 feeAmount, uint256 userAmount);\\n\\n  /// @notice This event is emitted when this is a continuation of a workflow from another chain\\n  /// @param nonce The nonce provided by the caller on the source chain, used to correlate the source chain workflow segment with this segment.\\n  /// @param startingAssets The asset that was transferred from the source chain to this chain\\n  event WorkflowContinuation(uint256 nonce, address userAddress, AssetAmount[] startingAssets);\\n\\n  using LibAssetBalances for LibAssetBalances.AssetBalances;\\n\\n  function getStepAddress(uint16 stepTypeId) external view returns (address) {\\n    return LibConfigReader.getStepAddressInternal(eternalStorageAddress, stepTypeId);\\n  }\\n\\n  function executeWorkflow(Workflow calldata workflow) external payable nonReentrant {\\n    AssetAmount[] memory startingAssets = new AssetAmount[](1);\\n    startingAssets[0] = AssetAmount(Asset(AssetType.Native, address(0)), 0);\\n    executeWorkflow(msg.sender, workflow, startingAssets);\\n  }\\n\\n  function executeWorkflow(address userAddress, Workflow memory workflow, AssetAmount[] memory startingAssets) internal {\\n    emit WorkflowExecution(userAddress, workflow);\\n    // workflow starts on the step with index 0\\n    uint16 currentStepIndex = 0;\\n    // keep track of asset balances\\n    LibAssetBalances.AssetBalances memory assetBalances;\\n    // credit ETH if sent with this call\\n    if (msg.value != 0) {\\n      // TODO add event\\n      assetBalances.credit(0, msg.value);\\n    }\\n\\n    // credit any starting assets (if this is a continutation workflow with assets sent by a bridge)\\n    for (uint256 i = 0; i < startingAssets.length; i++) {\\n      AssetAmount memory startingAsset = startingAssets[i];\\n      if (startingAsset.amount > 0) {\\n        assetBalances.credit(startingAsset.asset, startingAsset.amount);\\n      }\\n    }\\n\\n    executeBeforeAlls(workflow);\\n\\n    bool isSubscriber = LibConfigReader.isSubscriber(eternalStorageAddress, msg.sender);\\n    bool feeAlreadyTaken = isSubscriber;\\n\\n    // execute steps\\n    if (workflow.steps.length > 0) {\\n      while (true) {\\n        // prepare to invoke the step\\n        WorkflowStep memory currentStep = workflow.steps[currentStepIndex];\\n\\n        // handle core branch step types here\\n        if (currentStep.stepTypeId >= STEP_TYPE_ID_CHAIN_BRANCH && currentStep.stepTypeId <= STEP_TYPE_ID_PREV_OUTPUT_BRANCH) {\\n          int16 nextStepIndex;\\n          if (currentStep.stepTypeId == STEP_TYPE_ID_CHAIN_BRANCH) {\\n            nextStepIndex = ChainBranch.getNextStepIndex(currentStep);\\n          } else if (currentStep.stepTypeId == STEP_TYPE_ID_ASSET_AMOUNT_BRANCH) {\\n            nextStepIndex = AssetComparison.getNextStepIndex(currentStep, assetBalances, AssetComparisonType.Balance);\\n          } else {\\n            // step type must be STEP_TYPE_ID_PREV_OUTPUT_BRANCH\\n            nextStepIndex = AssetComparison.getNextStepIndex(currentStep, assetBalances, AssetComparisonType.Credit);\\n          }\\n          if (nextStepIndex == -1) {\\n            break;\\n          }\\n          currentStepIndex = uint16(nextStepIndex);\\n          continue;\\n        }\\n\\n        address stepAddress = resolveStepAddress(currentStep.stepAddress, currentStep.stepTypeId);\\n        AssetAmount[] memory inputAssetAmounts = resolveAmounts(userAddress, assetBalances, currentStep.inputAssets);\\n\\n        // invoke the step\\n        WorkflowStepResult memory stepResult = invokeStep(stepAddress, inputAssetAmounts, currentStep.argData);\\n\\n        // debit input assets\\n        for (uint256 i = 0; i < stepResult.inputAssetAmounts.length; ++i) {\\n          assetBalances.debit(stepResult.inputAssetAmounts[i].asset, stepResult.inputAssetAmounts[i].amount);\\n        }\\n\\n        // determine if fee is relative or absolute, and fee amount\\n        bool feeIsPercent;\\n        uint256 stepFee = 0;\\n        if (stepResult.fee != -1) {\\n          // fee is in decibips\\n          stepFee = uint24(stepResult.fee);\\n          // just treat it as an absolute 0 if it's 0% to avoid extra computation later\\n          feeIsPercent = stepFee > 0;\\n        } else {\\n          // fee is absolute\\n          (stepFee, feeIsPercent) = LibConfigReader.getStepFee(eternalStorageAddress, currentStep.stepTypeId);\\n        }\\n\\n        uint256[] memory feesTaken = new uint256[](stepResult.outputAssetAmounts.length);\\n        // credit output assets\\n        for (uint256 i = 0; i < stepResult.outputAssetAmounts.length; ++i) {\\n          // calculate exact fee\\n          uint256 feeAmount;\\n          if (isSubscriber) {\\n            feeAmount = 0;\\n          } else if (feeIsPercent) {\\n            feeAmount = LibPercent.percentageOf(stepResult.outputAssetAmounts[i].amount, stepFee);\\n          } else {\\n            feeAmount = stepFee;\\n          }\\n          feeAlreadyTaken = feeAlreadyTaken || feeAmount > 0;\\n          uint256 callerAmount = stepResult.outputAssetAmounts[i].amount - feeAmount;\\n          assetBalances.credit(stepResult.outputAssetAmounts[i].asset, callerAmount);\\n          feesTaken[i] = feeAmount;\\n        }\\n        emit WorkflowStepExecution(\\n          currentStepIndex,\\n          currentStep,\\n          currentStep.stepTypeId,\\n          stepAddress,\\n          inputAssetAmounts,\\n          stepResult,\\n          feesTaken\\n        );\\n\\n        if (currentStep.nextStepIndex == -1) {\\n          break;\\n        }\\n        currentStepIndex = uint16(currentStep.nextStepIndex);\\n      }\\n    }\\n\\n    executeAfterAlls(workflow);\\n\\n    refundUser(userAddress, assetBalances, feeAlreadyTaken);\\n  }\\n\\n  function executeBeforeAlls(Workflow memory workflow) internal {\\n    for (uint256 i = 0; i < workflow.beforeAll.length; ++i) {\\n      executeBeforeAfter(IWorkflowStepBeforeAll.beforeAll.selector, workflow.beforeAll[i]);\\n    }\\n  }\\n\\n  function executeAfterAlls(Workflow memory workflow) internal {\\n    for (uint256 i = 0; i < workflow.afterAll.length; ++i) {\\n      executeBeforeAfter(IWorkflowStepAfterAll.afterAll.selector, workflow.afterAll[i]);\\n    }\\n  }\\n\\n  function executeBeforeAfter(bytes4 selector, BeforeAfter memory beforeAfter) internal {\\n    address stepAddress = resolveStepAddress(beforeAfter.stepAddress, beforeAfter.stepTypeId);\\n    (bool success, bytes memory returnData) = stepAddress.delegatecall(abi.encodeWithSelector(selector, beforeAfter.argData));\\n    require(success, string(returnData));\\n  }\\n\\n  function refundUser(address userAddress, LibAssetBalances.AssetBalances memory assetBalances, bool feeAlreadyTaken) internal {\\n    uint256 fee;\\n    bool feeIsPercent;\\n\\n    if (feeAlreadyTaken) {\\n      // fees taken during one or more steps\\n      fee = 0;\\n      feeIsPercent = false;\\n    } else {\\n      (fee, feeIsPercent) = LibConfigReader.getDefaultFee(eternalStorageAddress);\\n      // treat 0% as absolute 0\\n      feeIsPercent = feeIsPercent && fee > 0;\\n    }\\n\\n\\n    for (uint8 i = 0; i < assetBalances.getAssetCount(); ++i) {\\n\\n      AssetAmount memory ab = assetBalances.getAssetAt(i);\\n      Asset memory asset = ab.asset;\\n      uint256 feeAmount;\\n      if (feeIsPercent) {\\n        feeAmount = LibPercent.percentageOf(ab.amount, fee);\\n\\n      } else {\\n        feeAmount = fee;\\n\\n      }\\n      uint256 userAmount = ab.amount < feeAmount ? ab.amount : ab.amount - feeAmount;\\n      emit RemainingAsset(asset, ab.amount, feeAmount, userAmount);\\n      if (asset.assetType == AssetType.Native) {\\n        require(address(this).balance >= ab.amount, 'computed native balance is greater than actual balance');\\n        payable(userAddress).transfer(userAmount);\\n      } else if (asset.assetType == AssetType.ERC20) {\\n        IERC20 token = IERC20(asset.assetAddress);\\n        SafeERC20.safeTransfer(token, userAddress, userAmount);\\n      } else {\\n        revert('unknown asset type in assetBalances');\\n      }\\n    }\\n  }\\n\\n  function invokeStep(\\n    address stepAddress,\\n    AssetAmount[] memory inputAssetAmounts,\\n    bytes memory data\\n  ) internal returns (WorkflowStepResult memory) {\\n    (bool success, bytes memory returnData) = stepAddress.delegatecall(\\n      abi.encodeWithSelector(IWorkflowStep.execute.selector, inputAssetAmounts, data)\\n    );\\n    require(success, string(returnData));\\n    return abi.decode(returnData, (WorkflowStepResult));\\n  }\\n\\n  function resolveStepAddress(address frozenStepAddress, uint16 stepTypeId) internal view returns (address) {\\n    // address zero indicates that the step implementation is not frozen\\n    if (frozenStepAddress == address(0)) {\\n      return LibConfigReader.getStepAddressInternal(eternalStorageAddress, stepTypeId);\\n    }\\n    // ensure given address is in the whitelist for given stepTypeId\\n    bool isWhitelisted = LibConfigReader.isStepAddressWhitelisted(eternalStorageAddress, stepTypeId, frozenStepAddress);\\n    require(isWhitelisted, 'step address not in white list');\\n    return frozenStepAddress;\\n  }\\n\\n  function resolveAmounts(\\n    address userAddress,\\n    LibAssetBalances.AssetBalances memory assetBalances,\\n    WorkflowStepInputAsset[] memory inputAssets\\n  ) internal returns (AssetAmount[] memory) {\\n    AssetAmount[] memory rv = new AssetAmount[](inputAssets.length);\\n    for (uint256 i = 0; i < inputAssets.length; ++i) {\\n      WorkflowStepInputAsset memory stepInputAsset = inputAssets[i];\\n      rv[i].asset = stepInputAsset.asset;\\n      if (stepInputAsset.sourceIsCaller) {\\n        transferFromCaller(userAddress, stepInputAsset, assetBalances);\\n      }\\n      uint256 currentWorkflowAssetBalance = assetBalances.getAssetBalance(stepInputAsset.asset);\\n      if (stepInputAsset.amountIsPercent) {\\n        rv[i].amount = LibPercent.percentageOf(currentWorkflowAssetBalance, stepInputAsset.amount);\\n        // rv[i].amount = 1;\\n      } else {\\n        require(currentWorkflowAssetBalance >= stepInputAsset.amount, 'absolute amount exceeds workflow asset balance');\\n        rv[i].amount = stepInputAsset.amount;\\n      }\\n    }\\n    return rv;\\n  }\\n\\n  function transferFromCaller(\\n    address userAddress,\\n    WorkflowStepInputAsset memory inputAssetAmount,\\n    LibAssetBalances.AssetBalances memory assetBalances\\n  ) internal {\\n    require(inputAssetAmount.amountIsPercent == false, 'cannot use percentage for amount of asset from caller');\\n    if (inputAssetAmount.asset.assetType == AssetType.Native) {\\n      // it's not possible to 'trasfer from caller' for native assets\\n      // assetBalances should have been initialized with the correct amount\\n    } else if (inputAssetAmount.asset.assetType == AssetType.ERC20) {\\n      IERC20 token = IERC20(inputAssetAmount.asset.assetAddress);\\n      uint256 allowance = token.allowance(userAddress, address(this));\\n      require(allowance >= inputAssetAmount.amount, 'insufficient allowance for erc20');\\n      SafeERC20.safeTransferFrom(token, userAddress, address(this), inputAssetAmount.amount);\\n      assetBalances.credit(inputAssetAmount.asset, inputAssetAmount.amount);\\n    } else {\\n      revert('unknown asset type in inputAssetAmounts');\\n    }\\n  }\\n\\n  function continueWorkflow(\\n    address userAddress,\\n    uint256 nonce,\\n    Workflow memory workflow,\\n    AssetAmount[] memory startingAssets\\n  ) external payable {\\n    // only step contracts are allowed to call this\\n    require(LibConfigReader.isStepAddressWhitelisted(eternalStorageAddress, msg.sender), 'caller is not a valid step');\\n    emit WorkflowContinuation(nonce, userAddress, startingAssets);\\n    for (uint256 i = 0; i < startingAssets.length; ++i) {\\n      if (startingAssets[i].asset.assetType == AssetType.Native) {\\n        // the calling step should have sent the correct amount of native\\n        require(msg.value >= startingAssets[i].amount, 'msg.value is less than starting asset amount');\\n      } else if (startingAssets[i].asset.assetType == AssetType.ERC20) {\\n        // the calling step should have approved the correct amount of the erc20\\n        IERC20 token = IERC20(startingAssets[i].asset.assetAddress);\\n        uint256 allowance = token.allowance(msg.sender, address(this));\\n        require(allowance >= startingAssets[i].amount, 'insufficient allowance for erc20');\\n        SafeERC20.safeTransferFrom(token, msg.sender, address(this), startingAssets[i].amount);\\n      } else {\\n        revert('unknown asset type in startingAssets');\\n      }\\n    }\\n    executeWorkflow(userAddress, workflow, startingAssets);\\n  }\\n}\\n\",\"keccak256\":\"0x34103e9ea80d0c5cbf12c54cb226bb342a10ead44642823b40a0bacb591473d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c806349bc3bda1161004e57806349bc3bda1461011b5780638da5cb5b14610137578063f903397714610162578063ff05c2a81461019f5761007b565b806313af4035146100805780631c7b2649146100a957806332b56aaf146100c5578063384782fe146100f0575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190613032565b6101ca565b005b6100c360048036038101906100be9190613968565b6102d7565b005b3480156100d157600080fd5b506100da610623565b6040516100e79190613a16565b60405180910390f35b3480156100fc57600080fd5b50610105610649565b6040516101129190613a16565b60405180910390f35b61013560048036038101906101309190613a55565b61066f565b005b34801561014357600080fd5b5061014c610763565b6040516101599190613aad565b60405180910390f35b34801561016e57600080fd5b5061018960048036038101906101849190613ac8565b610787565b6040516101969190613a16565b60405180910390f35b3480156101ab57600080fd5b506101b46107bc565b6040516101c19190613b04565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361025b57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd933826040516102cc929190613b7e565b60405180910390a150565b610303600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336107cf565b610342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033990613c04565b60405180910390fd5b7f5395b5ba48dc644bb58ac1718afd89140de72f86e36ea5c491a7a5d19fd7bc2983858360405161037593929190613dd5565b60405180910390a160005b8151811015610611576000600281111561039d5761039c613c5f565b5b8282815181106103b0576103af613e13565b5b6020026020010151600001516000015160028111156103d2576103d1613c5f565b5b0361043d578181815181106103ea576103e9613e13565b5b602002602001015160200151341015610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90613eb4565b60405180910390fd5b610600565b6001600281111561045157610450613c5f565b5b82828151811061046457610463613e13565b5b60200260200101516000015160000151600281111561048657610485613c5f565b5b036105c45760008282815181106104a05761049f613e13565b5b60200260200101516000015160200151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016104ef929190613ed4565b602060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105309190613f12565b905083838151811061054557610544613e13565b5b602002602001015160200151811015610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90613f8b565b60405180910390fd5b6105bd8233308787815181106105ac576105ab613e13565b5b60200260200101516020015161087d565b50506105ff565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f69061401d565b60405180910390fd5b5b8061060a9061406c565b9050610380565b5061061d848383610906565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610677610e5f565b6000600167ffffffffffffffff811115610694576106936130e9565b5b6040519080825280602002602001820160405280156106cd57816020015b6106ba612eb0565b8152602001906001900390816106b25790505b50905060405180604001604052806040518060400160405280600060028111156106fa576106f9613c5f565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815250815260200160008152508160008151811061073857610737613e13565b5b60200260200101819052506107573383610751906140b4565b83610906565b50610760610eae565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006107b5600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610eb8565b9050919050565b600260149054906101000a900460ff1681565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663931281367f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b856040518363ffffffff1660e01b81526004016108339291906140e0565b602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610874919061411e565b91505092915050565b610900846323b872dd60e01b85858560405160240161089e9392919061414b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f66565b50505050565b7f7d0ad34b602eae9f7989c0d4098383fc3f6a4f75fdb79860c0f58b2c08c4e64d83836040516109379291906145f4565b60405180910390a16000610949612ed0565b60003414610968576109676000348361102d9092919063ffffffff16565b5b60005b83518110156109d257600084828151811061098957610988613e13565b5b602002602001015190506000816020015111156109be576109bd816000015182602001518561112d9092919063ffffffff16565b5b5080806109ca9061406c565b91505061096b565b506109dc84611145565b6000610a0a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633611199565b9050600081905060008660200151511115610e42575b600115610e4157600086602001518561ffff1681518110610a4457610a43613e13565b5b60200260200101519050600161ffff16816000015161ffff1610158015610a785750600361ffff16816000015161ffff1611155b15610b15576000600161ffff16826000015161ffff1603610aa357610a9c8261123f565b9050610ada565b600261ffff16826000015161ffff1603610aca57610ac382866000611282565b9050610ad9565b610ad682866001611282565b90505b5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160010b03610b0b575050610e41565b8095505050610a20565b6000610b29826020015183600001516113e4565b90506000610b3c8a8785604001516114c8565b90506000610b4f83838660600151611675565b905060005b816000015151811015610bcb57610bba82600001518281518110610b7b57610b7a613e13565b5b60200260200101516000015183600001518381518110610b9e57610b9d613e13565b5b6020026020010151602001518a6117c49092919063ffffffff16565b80610bc49061406c565b9050610b54565b50600080600090507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836080015160020b14610c1857826080015162ffffff169050600081119150610c51565b610c48600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600001516117dc565b80935081925050505b600083602001515167ffffffffffffffff811115610c7257610c716130e9565b5b604051908082528060200260200182016040528015610ca05781602001602082028036833780820191505090505b50905060005b846020015151811015610dac5760008a15610cc45760009050610d02565b8415610cfd57610cf686602001518381518110610ce457610ce3613e13565b5b6020026020010151602001518561187a565b9050610d01565b8390505b5b8980610d0e5750600081115b995060008187602001518481518110610d2a57610d29613e13565b5b602002602001015160200151610d409190614624565b9050610d7987602001518481518110610d5c57610d5b613e13565b5b602002602001015160000151828f61112d9092919063ffffffff16565b81848481518110610d8d57610d8c613e13565b5b602002602001018181525050505080610da59061406c565b9050610ca6565b507f612127ca0f87d045e672ff8b536bb955c143468c74f3bd05127b716e676df0198b88896000015189898987604051610dec97969594939291906148a2565b60405180910390a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff876080015160010b03610e2e5750505050505050610e41565b86608001519a5050505050505050610a20565b5b610e4b866118f7565b610e5687848361194b565b50505050505050565b600260035403610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b90614979565b60405180910390fd5b6002600381905550565b6001600381905550565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b856040518363ffffffff1660e01b8152600401610f1c9291906149ca565b602060405180830381865afa158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5d9190614a08565b91505092915050565b6000610fc8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611bcf9092919063ffffffff16565b90506000815111156110285780806020019051810190610fe8919061411e565b611027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101e90614aa7565b60405180910390fd5b5b505050565b60008111156111285760006110428484611be7565b9050600080611070866000015184600a811061106157611060613e13565b5b60200201516020015185611cfd565b91509150816110da576110d96040518060400160405280600681526020017f637265646974000000000000000000000000000000000000000000000000000081525086886000015186600a81106110ca576110c9613e13565b5b60200201516020015187611d2c565b5b80866000015184600a81106110f2576110f1613e13565b5b6020020151602001818152505083866000015184600a811061111757611116613e13565b5b602002015160400181815250505050505b505050565b6111408361113a84611ded565b8361102d565b505050565b60005b8160400151518110156111955761118463b4110e0a60e01b8360400151838151811061117757611176613e13565b5b6020026020010151611e08565b8061118e9061406c565b9050611148565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff1663931281367f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d846040518363ffffffff1660e01b81526004016111f69291906140e0565b602060405180830381865afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611237919061411e565b905092915050565b600080826060015180602001905181019061125a9190614b2c565b90504681600001510361127457806020015191505061127d565b82608001519150505b919050565b600080846060015180602001905181019061129d9190614c5b565b905060008160200151905060006112b8868460000151611f48565b905060008060028111156112cf576112ce613c5f565b5b8660028111156112e2576112e1613c5f565b5b036112f35781602001519050611334565b6001600281111561130757611306613c5f565b5b86600281111561131a57611319613c5f565b5b0361132b5781604001519050611333565b816060015190505b5b60008460400151905060008460008114611375576001811461137f576002811461138a576003811461139457600481146113a257600581146113ac576113b6565b82841491506113b6565b8284141991506113b6565b82841091506113b6565b8284108385141791506113b6565b82841191506113b6565b8284118385141791505b5080156113cf57856060015196505050505050506113dd565b896080015196505050505050505b9392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361144c57611445600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610eb8565b90506114c2565b600061147b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848661200a565b9050806114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b490614cd4565b60405180910390fd5b839150505b92915050565b60606000825167ffffffffffffffff8111156114e7576114e66130e9565b5b60405190808252806020026020018201604052801561152057816020015b61150d612eb0565b8152602001906001900390816115055790505b50905060005b835181101561166957600084828151811061154457611543613e13565b5b60200260200101519050806040015183838151811061156657611565613e13565b5b60200260200101516000018190525080600001511561158b5761158a87828861209e565b5b60006115a482604001518861229b90919063ffffffff16565b90508160200151156115e6576115be81836060015161187a565b8484815181106115d1576115d0613e13565b5b60200260200101516020018181525050611656565b816060015181101561162d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162490614d66565b60405180910390fd5b816060015184848151811061164557611644613e13565b5b602002602001015160200181815250505b5050806116629061406c565b9050611526565b50809150509392505050565b61167d612ef3565b6000808573ffffffffffffffffffffffffffffffffffffffff16637bb26ca760e01b86866040516024016116b2929190614dd0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161171c9190614e43565b600060405180830381855af49150503d8060008114611757576040519150601f19603f3d011682016040523d82523d6000602084013e61175c565b606091505b50915091508181906117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179b9190614e9e565b60405180910390fd5b50808060200190518101906117b991906150b3565b925050509392505050565b6117d7836117d184611ded565b836122b3565b505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5611806866123b3565b6040518263ffffffff1660e01b815260040161182291906150fc565b602060405180830381865afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118639190613f12565b905061186e8161241a565b92509250509250929050565b6000816000111580156118905750620186a08211155b6118cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c690615189565b60405180910390fd5b600082846118dd91906151a9565b9050620186a0816118ee919061521a565b91505092915050565b60005b8160600151518110156119475761193663d538a14460e01b8360600151838151811061192957611928613e13565b5b6020026020010151611e08565b806119409061406c565b90506118fa565b5050565b60008082156119615760009150600090506119a4565b61198c600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661247b565b80925081935050508080156119a15750600082115b90505b60005b6119b085612516565b60ff168160ff161015611bc75760006119d2828761252490919063ffffffff16565b9050600081600001519050600084156119fa576119f383602001518761187a565b90506119fe565b8590505b600081846020015110611a2057818460200151611a1b9190614624565b611a26565b83602001515b90507fb57bad0019da5831064de8f296d1458a6ca8403646dd9c362e9ddbb588cb52c08385602001518484604051611a61949392919061527a565b60405180910390a160006002811115611a7d57611a7c613c5f565b5b83600001516002811115611a9457611a93613c5f565b5b03611b2c578360200151471015611ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad790615331565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611b26573d6000803e3d6000fd5b50611bb2565b60016002811115611b4057611b3f613c5f565b5b83600001516002811115611b5757611b56613c5f565b5b03611b7657600083602001519050611b70818c846125e7565b50611bb1565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba8906153c3565b60405180910390fd5b5b5050505080611bc0906153f0565b90506119a7565b505050505050565b6060611bde848460008561266d565b90509392505050565b600080600090505b836020015160ff16811015611c3e5782846000015182600a8110611c1657611c15613e13565b5b60200201516000015103611c2d5780915050611cf7565b80611c379061406c565b9050611bef565b50600a60ff16836020015160ff1610611c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8390615465565b60405180910390fd5b6040518060800160405280838152602001600081526020016000815260200160008152508360000151846020015160ff16600a8110611cce57611ccd613e13565b5b6020020181905250826020018051809190611ce8906153f0565b60ff1660ff1681525060ff1690505b92915050565b6000806000838501905084811015611d1c576000809250925050611d25565b60018192509250505b9250929050565b6000611d378461273a565b905084611d5982600001516002811115611d5457611d53613c5f565b5b6127ac565b611d7c836020015173ffffffffffffffffffffffffffffffffffffffff1661287a565b611d85866127ac565b611d8e866127ac565b604051602001611da2959493929190615559565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de49190614e9e565b60405180910390fd5b6000611e0182600001518360200151612898565b9050919050565b6000611e1c826020015183600001516113e4565b90506000808273ffffffffffffffffffffffffffffffffffffffff16858560400151604051602401611e4e91906155e0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611eb89190614e43565b600060405180830381855af49150503d8060008114611ef3576040519150601f19603f3d011682016040523d82523d6000602084013e611ef8565b606091505b5091509150818190611f40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f379190614e9e565b60405180910390fd5b505050505050565b611f50612f28565b6000836000015190506000611f6484611ded565b905060005b856020015160ff168161ffff161015611fd95781838261ffff16600a8110611f9457611f93613e13565b5b60200201516000015103611fc857828161ffff16600a8110611fb957611fb8613e13565b5b60200201519350505050612004565b80611fd290615602565b9050611f69565b5060405180608001604052806000815260200160008152602001600081526020016000815250925050505b92915050565b6000808490508073ffffffffffffffffffffffffffffffffffffffff166393128136612035866128ee565b856040518363ffffffff1660e01b81526004016120539291906140e0565b602060405180830381865afa158015612070573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612094919061411e565b9150509392505050565b6000151582602001511515146120e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e09061569e565b60405180910390fd5b600060028111156120fd576120fc613c5f565b5b826040015160000151600281111561211857612117613c5f565b5b0315612296576001600281111561213257612131613c5f565b5b826040015160000151600281111561214d5761214c613c5f565b5b0361225a576000826040015160200151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86306040518363ffffffff1660e01b815260040161219c929190613ed4565b602060405180830381865afa1580156121b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121dd9190613f12565b90508360600151811015612226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221d90613f8b565b60405180910390fd5b612236828630876060015161087d565b612253846040015185606001518561112d9092919063ffffffff16565b5050612295565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228c90615730565b60405180910390fd5b5b505050565b60006122a78383611f48565b60200151905092915050565b60008111156123ae5760006122c88484611be7565b90506000806122f6866000015184600a81106122e7576122e6613e13565b5b6020020151602001518561291e565b91509150816123605761235f6040518060400160405280600581526020017f646562697400000000000000000000000000000000000000000000000000000081525086886000015186600a81106123505761234f613e13565b5b60200201516020015187611d2c565b5b80866000015184600a811061237857612377613e13565b5b6020020151602001818152505083866000015184600a811061239d5761239c613e13565b5b602002015160600181815250505050505b505050565b60006040518060400160405280600881526020017f7374657046656573000000000000000000000000000000000000000000000000815250826040516020016123fd929190615786565b604051602081830303815290604052805190602001209050919050565b6000806000807f8000000000000000000000000000000000000000000000000000000000000000851611905060007f800000000000000000000000000000000000000000000000000000000000000019851690508082935093505050915091565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56124a4612946565b6040518263ffffffff1660e01b81526004016124c091906150fc565b602060405180830381865afa1580156124dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125019190613f12565b905061250c8161241a565b9250925050915091565b600081602001519050919050565b61252c612eb0565b826020015160ff168260ff1610612578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256f90615820565b60405180910390fd5b60006125a584600001518460ff16600a811061259757612596613e13565b5b60200201516000015161273a565b9050604051806040016040528082815260200185600001518560ff16600a81106125d2576125d1613e13565b5b60200201516020015181525091505092915050565b6126688363a9059cbb60e01b8484604051602401612606929190615840565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f66565b505050565b6060824710156126b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a9906158db565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516126db9190614e43565b60006040518083038185875af1925050503d8060008114612718576040519150601f19603f3d011682016040523d82523d6000602084013e61271d565b606091505b509150915061272e878383876129a9565b92505050949350505050565b612742612f50565b60008261ffff16600281111561275b5761275a613c5f565b5b90506000601084901c9050604051806040016040528083600281111561278457612783613c5f565b5b81526020018273ffffffffffffffffffffffffffffffffffffffff1681525092505050919050565b6060600060016127bb84612a1e565b01905060008167ffffffffffffffff8111156127da576127d96130e9565b5b6040519080825280601f01601f19166020018201604052801561280c5781602001600182028036833780820191505090505b509050600082602001820190505b60011561286f578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612863576128626151eb565b5b0494506000850361281a575b819350505050919050565b606061289182600161288b85612b71565b01612c01565b9050919050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1690506000601082901b905060008660028111156128d7576128d6613c5f565b5b905060008183179050809550505050505092915050565b6000816040516020016129019190615947565b604051602081830303815290604052805190602001209050919050565b60008083831115612935576000809150915061293f565b6001838503915091505b9250929050565b60006040518060400160405280600b81526020017f64656661756c744665657300000000000000000000000000000000000000000081525060405160200161298e919061596d565b60405160208183030381529060405280519060200120905090565b60608315612a0b576000835103612a03576129c385612e3d565b612a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f9906159d0565b60405180910390fd5b5b829050612a16565b612a158383612e60565b5b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a7c577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a7257612a716151eb565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612ab9576d04ee2d6d415b85acef81000000008381612aaf57612aae6151eb565b5b0492506020810190505b662386f26fc100008310612ae857662386f26fc100008381612ade57612add6151eb565b5b0492506010810190505b6305f5e1008310612b11576305f5e1008381612b0757612b066151eb565b5b0492506008810190505b6127108310612b36576127108381612b2c57612b2b6151eb565b5b0492506004810190505b60648310612b595760648381612b4f57612b4e6151eb565b5b0492506002810190505b600a8310612b68576001810190505b80915050919050565b600080600090506000608084901c1115612b9357608083901c92506010810190505b6000604084901c1115612bae57604083901c92506008810190505b6000602084901c1115612bc957602083901c92506004810190505b6000601084901c1115612be457601083901c92506002810190505b6000600884901c1115612bf8576001810190505b80915050919050565b606060006002836002612c1491906151a9565b612c1e91906159f0565b67ffffffffffffffff811115612c3757612c366130e9565b5b6040519080825280601f01601f191660200182016040528015612c695781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612ca157612ca0613e13565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612d0557612d04613e13565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612d4591906151a9565b612d4f91906159f0565b90505b6001811115612def577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612d9157612d90613e13565b5b1a60f81b828281518110612da857612da7613e13565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612de890615a24565b9050612d52565b5060008414612e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2a90615a99565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612e735781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea79190614e9e565b60405180910390fd5b6040518060400160405280612ec3612f50565b8152602001600081525090565b6040518060400160405280612ee3612f92565b8152602001600060ff1681525090565b6040518060a00160405280606081526020016060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b604051806040016040528060006002811115612f6f57612f6e613c5f565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806101400160405280600a905b612faa612f28565b815260200190600190039081612fa25790505090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fff82612fd4565b9050919050565b61300f81612ff4565b811461301a57600080fd5b50565b60008135905061302c81613006565b92915050565b60006020828403121561304857613047612fca565b5b60006130568482850161301d565b91505092915050565b600061306a82612fd4565b9050919050565b61307a8161305f565b811461308557600080fd5b50565b60008135905061309781613071565b92915050565b6000819050919050565b6130b08161309d565b81146130bb57600080fd5b50565b6000813590506130cd816130a7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613121826130d8565b810181811067ffffffffffffffff821117156131405761313f6130e9565b5b80604052505050565b6000613153612fc0565b905061315f8282613118565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115613189576131886130e9565b5b602082029050602081019050919050565b600080fd5b600061ffff82169050919050565b6131b68161319f565b81146131c157600080fd5b50565b6000813590506131d3816131ad565b92915050565b600067ffffffffffffffff8211156131f4576131f36130e9565b5b602082029050602081019050919050565b60008115159050919050565b61321a81613205565b811461322557600080fd5b50565b60008135905061323781613211565b92915050565b6003811061324a57600080fd5b50565b60008135905061325c8161323d565b92915050565b600060408284031215613278576132776130d3565b5b6132826040613149565b905060006132928482850161324d565b60008301525060206132a684828501613088565b60208301525092915050565b600060a082840312156132c8576132c76130d3565b5b6132d26080613149565b905060006132e284828501613228565b60008301525060206132f684828501613228565b602083015250604061330a84828501613262565b604083015250608061331e848285016130be565b60608301525092915050565b600061333d613338846131d9565b613149565b90508083825260208201905060a084028301858111156133605761335f61319a565b5b835b81811015613389578061337588826132b2565b84526020840193505060a081019050613362565b5050509392505050565b600082601f8301126133a8576133a7613169565b5b81356133b884826020860161332a565b91505092915050565b600080fd5b600067ffffffffffffffff8211156133e1576133e06130e9565b5b6133ea826130d8565b9050602081019050919050565b82818337600083830152505050565b6000613419613414846133c6565b613149565b905082815260208101848484011115613435576134346133c1565b5b6134408482856133f7565b509392505050565b600082601f83011261345d5761345c613169565b5b813561346d848260208601613406565b91505092915050565b60008160010b9050919050565b61348c81613476565b811461349757600080fd5b50565b6000813590506134a981613483565b92915050565b600060a082840312156134c5576134c46130d3565b5b6134cf60a0613149565b905060006134df848285016131c4565b60008301525060206134f384828501613088565b602083015250604082013567ffffffffffffffff81111561351757613516613164565b5b61352384828501613393565b604083015250606082013567ffffffffffffffff81111561354757613546613164565b5b61355384828501613448565b60608301525060806135678482850161349a565b60808301525092915050565b60006135866135818461316e565b613149565b905080838252602082019050602084028301858111156135a9576135a861319a565b5b835b818110156135f057803567ffffffffffffffff8111156135ce576135cd613169565b5b8086016135db89826134af565b855260208501945050506020810190506135ab565b5050509392505050565b600082601f83011261360f5761360e613169565b5b813561361f848260208601613573565b91505092915050565b600067ffffffffffffffff821115613643576136426130e9565b5b602082029050602081019050919050565b60006060828403121561366a576136696130d3565b5b6136746060613149565b90506000613684848285016131c4565b600083015250602061369884828501613088565b602083015250604082013567ffffffffffffffff8111156136bc576136bb613164565b5b6136c884828501613448565b60408301525092915050565b60006136e76136e284613628565b613149565b9050808382526020820190506020840283018581111561370a5761370961319a565b5b835b8181101561375157803567ffffffffffffffff81111561372f5761372e613169565b5b80860161373c8982613654565b8552602085019450505060208101905061370c565b5050509392505050565b600082601f8301126137705761376f613169565b5b81356137808482602086016136d4565b91505092915050565b60006080828403121561379f5761379e6130d3565b5b6137a96080613149565b905060006137b984828501613088565b600083015250602082013567ffffffffffffffff8111156137dd576137dc613164565b5b6137e9848285016135fa565b602083015250604082013567ffffffffffffffff81111561380d5761380c613164565b5b6138198482850161375b565b604083015250606082013567ffffffffffffffff81111561383d5761383c613164565b5b6138498482850161375b565b60608301525092915050565b600067ffffffffffffffff8211156138705761386f6130e9565b5b602082029050602081019050919050565b600060608284031215613897576138966130d3565b5b6138a16040613149565b905060006138b184828501613262565b60008301525060406138c5848285016130be565b60208301525092915050565b60006138e46138df84613855565b613149565b905080838252602082019050606084028301858111156139075761390661319a565b5b835b81811015613930578061391c8882613881565b845260208401935050606081019050613909565b5050509392505050565b600082601f83011261394f5761394e613169565b5b813561395f8482602086016138d1565b91505092915050565b6000806000806080858703121561398257613981612fca565b5b600061399087828801613088565b94505060206139a1878288016130be565b935050604085013567ffffffffffffffff8111156139c2576139c1612fcf565b5b6139ce87828801613789565b925050606085013567ffffffffffffffff8111156139ef576139ee612fcf565b5b6139fb8782880161393a565b91505092959194509250565b613a108161305f565b82525050565b6000602082019050613a2b6000830184613a07565b92915050565b600080fd5b600060808284031215613a4c57613a4b613a31565b5b81905092915050565b600060208284031215613a6b57613a6a612fca565b5b600082013567ffffffffffffffff811115613a8957613a88612fcf565b5b613a9584828501613a36565b91505092915050565b613aa781612ff4565b82525050565b6000602082019050613ac26000830184613a9e565b92915050565b600060208284031215613ade57613add612fca565b5b6000613aec848285016131c4565b91505092915050565b613afe81613205565b82525050565b6000602082019050613b196000830184613af5565b92915050565b6000819050919050565b6000613b44613b3f613b3a84612fd4565b613b1f565b612fd4565b9050919050565b6000613b5682613b29565b9050919050565b6000613b6882613b4b565b9050919050565b613b7881613b5d565b82525050565b6000604082019050613b936000830185613a07565b613ba06020830184613b6f565b9392505050565b600082825260208201905092915050565b7f63616c6c6572206973206e6f7420612076616c69642073746570000000000000600082015250565b6000613bee601a83613ba7565b9150613bf982613bb8565b602082019050919050565b60006020820190508181036000830152613c1d81613be1565b9050919050565b613c2d8161309d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613c9f57613c9e613c5f565b5b50565b6000819050613cb082613c8e565b919050565b6000613cc082613ca2565b9050919050565b613cd081613cb5565b82525050565b613cdf8161305f565b82525050565b604082016000820151613cfb6000850182613cc7565b506020820151613d0e6020850182613cd6565b50505050565b613d1d8161309d565b82525050565b606082016000820151613d396000850182613ce5565b506020820151613d4c6040850182613d14565b50505050565b6000613d5e8383613d23565b60608301905092915050565b6000602082019050919050565b6000613d8282613c33565b613d8c8185613c3e565b9350613d9783613c4f565b8060005b83811015613dc8578151613daf8882613d52565b9750613dba83613d6a565b925050600181019050613d9b565b5085935050505092915050565b6000606082019050613dea6000830186613c24565b613df76020830185613a07565b8181036040830152613e098184613d77565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6d73672e76616c7565206973206c657373207468616e207374617274696e672060008201527f617373657420616d6f756e740000000000000000000000000000000000000000602082015250565b6000613e9e602c83613ba7565b9150613ea982613e42565b604082019050919050565b60006020820190508181036000830152613ecd81613e91565b9050919050565b6000604082019050613ee96000830185613a07565b613ef66020830184613a07565b9392505050565b600081519050613f0c816130a7565b92915050565b600060208284031215613f2857613f27612fca565b5b6000613f3684828501613efd565b91505092915050565b7f696e73756666696369656e7420616c6c6f77616e636520666f72206572633230600082015250565b6000613f75602083613ba7565b9150613f8082613f3f565b602082019050919050565b60006020820190508181036000830152613fa481613f68565b9050919050565b7f756e6b6e6f776e206173736574207479706520696e207374617274696e67417360008201527f7365747300000000000000000000000000000000000000000000000000000000602082015250565b6000614007602483613ba7565b915061401282613fab565b604082019050919050565b6000602082019050818103600083015261403681613ffa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006140778261309d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036140a9576140a861403d565b5b600182019050919050565b60006140c03683613789565b9050919050565b6000819050919050565b6140da816140c7565b82525050565b60006040820190506140f560008301856140d1565b6141026020830184613a07565b9392505050565b60008151905061411881613211565b92915050565b60006020828403121561413457614133612fca565b5b600061414284828501614109565b91505092915050565b60006060820190506141606000830186613a07565b61416d6020830185613a07565b61417a6040830184613c24565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6141b78161319f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6141f281613205565b82525050565b60a08201600082015161420e60008501826141e9565b50602082015161422160208501826141e9565b5060408201516142346040850182613ce5565b5060608201516142476080850182613d14565b50505050565b600061425983836141f8565b60a08301905092915050565b6000602082019050919050565b600061427d826141bd565b61428781856141c8565b9350614292836141d9565b8060005b838110156142c35781516142aa888261424d565b97506142b583614265565b925050600181019050614296565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561430a5780820151818401526020810190506142ef565b60008484015250505050565b6000614321826142d0565b61432b81856142db565b935061433b8185602086016142ec565b614344816130d8565b840191505092915050565b61435881613476565b82525050565b600060a08301600083015161437660008601826141ae565b5060208301516143896020860182613cd6565b50604083015184820360408601526143a18282614272565b915050606083015184820360608601526143bb8282614316565b91505060808301516143d0608086018261434f565b508091505092915050565b60006143e7838361435e565b905092915050565b6000602082019050919050565b600061440782614182565b614411818561418d565b9350836020820285016144238561419e565b8060005b8581101561445f578484038952815161444085826143db565b945061444b836143ef565b925060208a01995050600181019050614427565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006060830160008301516144b560008601826141ae565b5060208301516144c86020860182613cd6565b50604083015184820360408601526144e08282614316565b9150508091505092915050565b60006144f9838361449d565b905092915050565b6000602082019050919050565b600061451982614471565b614523818561447c565b9350836020820285016145358561448d565b8060005b85811015614571578484038952815161455285826144ed565b945061455d83614501565b925060208a01995050600181019050614539565b50829750879550505050505092915050565b600060808301600083015161459b6000860182613cd6565b50602083015184820360208601526145b382826143fc565b915050604083015184820360408601526145cd828261450e565b915050606083015184820360608601526145e7828261450e565b9150508091505092915050565b60006040820190506146096000830185613a07565b818103602083015261461b8184614583565b90509392505050565b600061462f8261309d565b915061463a8361309d565b92508282039050818111156146525761465161403d565b5b92915050565b6146618161319f565b82525050565b600060a08301600083015161467f60008601826141ae565b5060208301516146926020860182613cd6565b50604083015184820360408601526146aa8282614272565b915050606083015184820360608601526146c48282614316565b91505060808301516146d9608086018261434f565b508091505092915050565b600082825260208201905092915050565b600061470082613c33565b61470a81856146e4565b935061471583613c4f565b8060005b8381101561474657815161472d8882613d52565b975061473883613d6a565b925050600181019050614719565b5085935050505092915050565b60008160020b9050919050565b61476981614753565b82525050565b600060a083016000830151848203600086015261478c82826146f5565b915050602083015184820360208601526147a682826146f5565b915050604083015184820360408601526147c082826146f5565b91505060608301516147d5606086018261434f565b5060808301516147e86080860182614760565b508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061482b8383613d14565b60208301905092915050565b6000602082019050919050565b600061484f826147f3565b61485981856147fe565b93506148648361480f565b8060005b8381101561489557815161487c888261481f565b975061488783614837565b925050600181019050614868565b5085935050505092915050565b600060e0820190506148b7600083018a614658565b81810360208301526148c98189614667565b90506148d86040830188614658565b6148e56060830187613a07565b81810360808301526148f78186613d77565b905081810360a083015261490b818561476f565b905081810360c083015261491f8184614844565b905098975050505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614963601f83613ba7565b915061496e8261492d565b602082019050919050565b6000602082019050818103600083015261499281614956565b9050919050565b60006149b46149af6149aa8461319f565b613b1f565b61309d565b9050919050565b6149c481614999565b82525050565b60006040820190506149df60008301856140d1565b6149ec60208301846149bb565b9392505050565b600081519050614a0281613071565b92915050565b600060208284031215614a1e57614a1d612fca565b5b6000614a2c848285016149f3565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614a91602a83613ba7565b9150614a9c82614a35565b604082019050919050565b60006020820190508181036000830152614ac081614a84565b9050919050565b600081519050614ad681613483565b92915050565b600060408284031215614af257614af16130d3565b5b614afc6040613149565b90506000614b0c84828501613efd565b6000830152506020614b2084828501614ac7565b60208301525092915050565b600060408284031215614b4257614b41612fca565b5b6000614b5084828501614adc565b91505092915050565b600081519050614b688161323d565b92915050565b600060408284031215614b8457614b836130d3565b5b614b8e6040613149565b90506000614b9e84828501614b59565b6000830152506020614bb2848285016149f3565b60208301525092915050565b60068110614bcb57600080fd5b50565b600081519050614bdd81614bbe565b92915050565b600060a08284031215614bf957614bf86130d3565b5b614c036080613149565b90506000614c1384828501614b6e565b6000830152506040614c2784828501614bce565b6020830152506060614c3b84828501613efd565b6040830152506080614c4f84828501614ac7565b60608301525092915050565b600060a08284031215614c7157614c70612fca565b5b6000614c7f84828501614be3565b91505092915050565b7f737465702061646472657373206e6f7420696e207768697465206c6973740000600082015250565b6000614cbe601e83613ba7565b9150614cc982614c88565b602082019050919050565b60006020820190508181036000830152614ced81614cb1565b9050919050565b7f6162736f6c75746520616d6f756e74206578636565647320776f726b666c6f7760008201527f2061737365742062616c616e6365000000000000000000000000000000000000602082015250565b6000614d50602e83613ba7565b9150614d5b82614cf4565b604082019050919050565b60006020820190508181036000830152614d7f81614d43565b9050919050565b600082825260208201905092915050565b6000614da2826142d0565b614dac8185614d86565b9350614dbc8185602086016142ec565b614dc5816130d8565b840191505092915050565b60006040820190508181036000830152614dea8185613d77565b90508181036020830152614dfe8184614d97565b90509392505050565b600081905092915050565b6000614e1d826142d0565b614e278185614e07565b9350614e378185602086016142ec565b80840191505092915050565b6000614e4f8284614e12565b915081905092915050565b600081519050919050565b6000614e7082614e5a565b614e7a8185613ba7565b9350614e8a8185602086016142ec565b614e93816130d8565b840191505092915050565b60006020820190508181036000830152614eb88184614e65565b905092915050565b600060608284031215614ed657614ed56130d3565b5b614ee06040613149565b90506000614ef084828501614b6e565b6000830152506040614f0484828501613efd565b60208301525092915050565b6000614f23614f1e84613855565b613149565b90508083825260208201905060608402830185811115614f4657614f4561319a565b5b835b81811015614f6f5780614f5b8882614ec0565b845260208401935050606081019050614f48565b5050509392505050565b600082601f830112614f8e57614f8d613169565b5b8151614f9e848260208601614f10565b91505092915050565b614fb081614753565b8114614fbb57600080fd5b50565b600081519050614fcd81614fa7565b92915050565b600060a08284031215614fe957614fe86130d3565b5b614ff360a0613149565b9050600082015167ffffffffffffffff81111561501357615012613164565b5b61501f84828501614f79565b600083015250602082015167ffffffffffffffff81111561504357615042613164565b5b61504f84828501614f79565b602083015250604082015167ffffffffffffffff81111561507357615072613164565b5b61507f84828501614f79565b604083015250606061509384828501614ac7565b60608301525060806150a784828501614fbe565b60808301525092915050565b6000602082840312156150c9576150c8612fca565b5b600082015167ffffffffffffffff8111156150e7576150e6612fcf565b5b6150f384828501614fd3565b91505092915050565b600060208201905061511160008301846140d1565b92915050565b7f70657263656e74206d757374206265206265747765656e203020616e6420313060008201527f3030303000000000000000000000000000000000000000000000000000000000602082015250565b6000615173602483613ba7565b915061517e82615117565b604082019050919050565b600060208201905081810360008301526151a281615166565b9050919050565b60006151b48261309d565b91506151bf8361309d565b92508282026151cd8161309d565b915082820484148315176151e4576151e361403d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006152258261309d565b91506152308361309d565b9250826152405761523f6151eb565b5b828204905092915050565b6040820160008201516152616000850182613cc7565b5060208201516152746020850182613cd6565b50505050565b600060a08201905061528f600083018761524b565b61529c6040830186613c24565b6152a96060830185613c24565b6152b66080830184613c24565b95945050505050565b7f636f6d7075746564206e61746976652062616c616e636520697320677265617460008201527f6572207468616e2061637475616c2062616c616e636500000000000000000000602082015250565b600061531b603683613ba7565b9150615326826152bf565b604082019050919050565b6000602082019050818103600083015261534a8161530e565b9050919050565b7f756e6b6e6f776e206173736574207479706520696e20617373657442616c616e60008201527f6365730000000000000000000000000000000000000000000000000000000000602082015250565b60006153ad602383613ba7565b91506153b882615351565b604082019050919050565b600060208201905081810360008301526153dc816153a0565b9050919050565b600060ff82169050919050565b60006153fb826153e3565b915060ff820361540e5761540d61403d565b5b600182019050919050565b7f746f6f206d616e7920746f6b656e2062616c616e636573000000000000000000600082015250565b600061544f601783613ba7565b915061545a82615419565b602082019050919050565b6000602082019050818103600083015261547e81615442565b9050919050565b600081905092915050565b600061549b82614e5a565b6154a58185615485565b93506154b58185602086016142ec565b80840191505092915050565b7f206173736574547970653d000000000000000000000000000000000000000000815250565b7f206173736574416464726573733d000000000000000000000000000000000000815250565b7f2076616c75657320000000000000000000000000000000000000000000000000815250565b7f2c20000000000000000000000000000000000000000000000000000000000000815250565b60006155658288615490565b9150615570826154c1565b600b820191506155808287615490565b915061558b826154e7565b600e8201915061559b8286615490565b91506155a68261550d565b6008820191506155b68285615490565b91506155c182615533565b6002820191506155d18284615490565b91508190509695505050505050565b600060208201905081810360008301526155fa8184614d97565b905092915050565b600061560d8261319f565b915061ffff82036156215761562061403d565b5b600182019050919050565b7f63616e6e6f74207573652070657263656e7461676520666f7220616d6f756e7460008201527f206f662061737365742066726f6d2063616c6c65720000000000000000000000602082015250565b6000615688603583613ba7565b91506156938261562c565b604082019050919050565b600060208201905081810360008301526156b78161567b565b9050919050565b7f756e6b6e6f776e206173736574207479706520696e20696e707574417373657460008201527f416d6f756e747300000000000000000000000000000000000000000000000000602082015250565b600061571a602783613ba7565b9150615725826156be565b604082019050919050565b600060208201905081810360008301526157498161570d565b9050919050565b60008160f01b9050919050565b600061576882615750565b9050919050565b61578061577b8261319f565b61575d565b82525050565b60006157928285615490565b915061579e828461576f565b6002820191508190509392505050565b7f696e646578206f7574206f6620626f756e6473207768696c652061636365737360008201527f696e672061737365742062616c616e6365730000000000000000000000000000602082015250565b600061580a603283613ba7565b9150615815826157ae565b604082019050919050565b60006020820190508181036000830152615839816157fd565b9050919050565b60006040820190506158556000830185613a07565b6158626020830184613c24565b9392505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006158c5602683613ba7565b91506158d082615869565b604082019050919050565b600060208201905081810360008301526158f4816158b8565b9050919050565b7f7374657057686974654c69737400000000000000000000000000000000000000600082015250565b6000615931600d83615485565b915061593c826158fb565b600d82019050919050565b600061595282615924565b915061595e828461576f565b60028201915081905092915050565b60006159798284615490565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006159ba601d83613ba7565b91506159c582615984565b602082019050919050565b600060208201905081810360008301526159e9816159ad565b9050919050565b60006159fb8261309d565b9150615a068361309d565b9250828201905080821115615a1e57615a1d61403d565b5b92915050565b6000615a2f8261309d565b915060008203615a4257615a4161403d565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615a83602083613ba7565b9150615a8e82615a4d565b602082019050919050565b60006020820190508181036000830152615ab281615a76565b905091905056fea2646970667358221220f527a2dee0504bc50a9a1a857016d4c9e727bc1303880c31b962925238dae9a764736f6c63430008120033",
  "devdoc": {
    "events": {
      "RemainingAsset((uint8,address),uint256,uint256,uint256)": {
        "params": {
          "asset": "The asset.",
          "feeAmount": "The portion of the total amount that FMP will keep as a fee.",
          "totalAmount": "The total amount of the asset.",
          "userAmount": "The portion of the total amount that is sent to the user."
        }
      },
      "WorkflowContinuation(uint256,address,((uint8,address),uint256)[])": {
        "params": {
          "nonce": "The nonce provided by the caller on the source chain, used to correlate the source chain workflow segment with this segment.",
          "startingAssets": "The asset that was transferred from the source chain to this chain"
        }
      },
      "WorkflowExecution(address,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]))": {
        "params": {
          "userAddress": "The user for which this workflow is executing.",
          "workflow": "The workflow."
        }
      },
      "WorkflowStepExecution(uint16,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16),uint16,address,((uint8,address),uint256)[],(((uint8,address),uint256)[],((uint8,address),uint256)[],((uint8,address),uint256)[],int16,int24),uint256[])": {
        "params": {
          "inputAssetAmounts": "The input assets, with the absolute amount of each asset.",
          "result": "The result returned form the step invocation.",
          "step": "The step configuration.",
          "stepAddress": "The address of the step used for this invocation.",
          "stepIndex": "The index of the step in the Workflow.steps array.",
          "stepTypeId": "The logical id of the step (also repeated in the step param but duplicated here for convenience)."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "executeWorkflow((address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]))": {
        "params": {
          "workflow": "The workflow to execute."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RemainingAsset((uint8,address),uint256,uint256,uint256)": {
        "notice": "This event is emitted after the workflow has completed, once for each asset ramining with a non-zero amount."
      },
      "WorkflowContinuation(uint256,address,((uint8,address),uint256)[])": {
        "notice": "This event is emitted when this is a continuation of a workflow from another chain"
      },
      "WorkflowExecution(address,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]))": {
        "notice": "This event is emitted when a workflow execution begins."
      },
      "WorkflowStepExecution(uint16,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16),uint16,address,((uint8,address),uint256)[],(((uint8,address),uint256)[],((uint8,address),uint256)[],((uint8,address),uint256)[],int16,int24),uint256[])": {
        "notice": "This event is emitted when immediately after invoking a step in the workflow."
      }
    },
    "kind": "user",
    "methods": {
      "continueWorkflow(address,uint256,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]),((uint8,address),uint256)[])": {
        "notice": "Continue a workflow that started on a different chain.This is not callable by 3rd parties, only approved bridge integrations call this method."
      },
      "executeWorkflow((address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[],(uint16,address,bytes)[],(uint16,address,bytes)[]))": {
        "notice": "Initiate the execution of a workflow."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7378,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 5881,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "eternalStorageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5883,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "upstreamAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5885,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "isUserProxy",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 212,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}