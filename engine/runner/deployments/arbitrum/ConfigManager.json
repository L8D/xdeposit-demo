{
  "address": "0x9eb9E92D0F0DA1bd28BbCf69720452005Fd830Df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_frontDoorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogNewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stepAddress",
          "type": "address"
        }
      ],
      "name": "StepAddressSetEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "runnerAddress",
          "type": "address"
        }
      ],
      "name": "addRunnerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eternalStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frontDoorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRunnerAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        }
      ],
      "name": "getStepAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStepCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStepInfoAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "stepTypeId",
              "type": "uint16"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "latest",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "blacklist",
              "type": "address[]"
            }
          ],
          "internalType": "struct StepInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUserProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "runnerAddress",
          "type": "address"
        }
      ],
      "name": "removeRunnerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "stepAddress",
          "type": "address"
        }
      ],
      "name": "removeStepAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "stepAddress",
          "type": "address"
        }
      ],
      "name": "setStepAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upstreamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f43a30065055f74686c6df7189b78b2cc331d6de3104bd9aca2c9bac2837296",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x9eb9E92D0F0DA1bd28BbCf69720452005Fd830Df",
    "transactionIndex": 1,
    "gasUsed": "15516606",
    "logsBloom": "0x
    "blockHash": "0x9cf82bb184402e2654e9bcc9bfec9352294a21c67d4f7feb413d6aa351823e93",
    "transactionHash": "0x8f43a30065055f74686c6df7189b78b2cc331d6de3104bd9aca2c9bac2837296",
    "logs": [],
    "blockNumber": 99091753,
    "cumulativeGasUsed": "15516606",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5DE1dF35467c24C024E598ae6a2FB98240e62EC7"
  ],
  "numDeployments": 4,
  "solcInputHash": "ba5ebc40d29cb4232bc2904dee141aea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_frontDoorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"}],\"name\":\"StepAddressSetEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runnerAddress\",\"type\":\"address\"}],\"name\":\"addRunnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eternalStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frontDoorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRunnerAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"}],\"name\":\"getStepAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStepCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStepInfoAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"latest\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"blacklist\",\"type\":\"address[]\"}],\"internalType\":\"struct StepInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUserProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runnerAddress\",\"type\":\"address\"}],\"name\":\"removeRunnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"}],\"name\":\"removeStepAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"}],\"name\":\"setStepAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upstreamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConfigManager.sol\":\"ConfigManager\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/ConfigManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './EternalStorage.sol';\\nimport './StepInfo.sol';\\nimport './LibConfigReader.sol';\\nimport './FreeMarketBase.sol';\\nimport './FrontDoor.sol';\\n\\ncontract ConfigManager is FreeMarketBase {\\n  address public immutable frontDoorAddress;\\n\\n  constructor(\\n    address payable _frontDoorAddress\\n  )\\n    FreeMarketBase(\\n      msg.sender, // owner\\n      FrontDoor(_frontDoorAddress).eternalStorageAddress(), // eternal storage address\\n      address(0), // upstream (this doesn't have one)\\n      false // isUserProxy\\n    )\\n  {\\n    frontDoorAddress = _frontDoorAddress;\\n  }\\n\\n  function getStepAddress(uint16 stepTypeId) external view returns (address) {\\n    return LibConfigReader.getStepAddressInternal(eternalStorageAddress, stepTypeId);\\n  }\\n\\n  function getStepCount() external view returns (uint256) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.lengthEnumerableMapUintToAddress(LibConfigReader.latestStepAddresses);\\n  }\\n\\n  function getStepInfoAt(uint256 index) public view returns (StepInfo memory) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    (uint256 stepTypeId, address stepAddress) = eternalStorage.atEnumerableMapUintToAddress(LibConfigReader.latestStepAddresses, index);\\n\\n    bytes32 whitelistKey = LibConfigReader.getStepWhitelistKey(uint16(stepTypeId));\\n    uint256 whitelistCount = eternalStorage.lengthEnumerableMapAddressToUint(whitelistKey);\\n    address[] memory whitelist = new address[](whitelistCount);\\n    for (uint256 i = 0; i < whitelistCount; ++i) {\\n      (address whitelistedAddress, ) = eternalStorage.atEnumerableMapAddressToUint(whitelistKey, i);\\n      whitelist[i] = whitelistedAddress;\\n    }\\n\\n    bytes32 blacklistKey = LibConfigReader.getStepBlacklistKey(uint16(stepTypeId));\\n    uint256 blacklistCount = eternalStorage.lengthEnumerableMapAddressToUint(blacklistKey);\\n    address[] memory blacklist = new address[](blacklistCount);\\n    for (uint256 i = 0; i < blacklistCount; ++i) {\\n      (address blacklistedAddress, ) = eternalStorage.atEnumerableMapAddressToUint(blacklistKey, i);\\n      blacklist[i] = blacklistedAddress;\\n    }\\n\\n    return StepInfo(uint16(stepTypeId), 0, stepAddress, whitelist, blacklist);\\n  }\\n\\n  event StepAddressSetEvent(uint16 stepTypeId, address stepAddress);\\n\\n  function setStepAddress(uint16 stepTypeId, address stepAddress) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    eternalStorage.setEnumerableMapUintToAddress(LibConfigReader.latestStepAddresses, stepTypeId, stepAddress);\\n    // using the white list map like a set, we only care about the keys\\n    // this sets it as the current step for the stepTypeId\\n    eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.getStepWhitelistKey(stepTypeId), stepAddress, 0);\\n    // this adds it to the list of all valid steps\\n    eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.allStepAddresses, stepAddress, 0);\\n    // remove it from the black list just in case it was there\\n    eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.getStepBlacklistKey(stepTypeId), stepAddress);\\n    emit StepAddressSetEvent(stepTypeId, stepAddress);\\n  }\\n\\n  function removeStepAddress(uint16 stepTypeId, address stepAddress) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    address latest = eternalStorage.getEnumerableMapUintToAddress(LibConfigReader.latestStepAddresses, stepTypeId);\\n    require(stepAddress != latest, 'cannot remove latest step address');\\n    eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.getStepBlacklistKey(stepTypeId), stepAddress, 0);\\n    eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.getStepWhitelistKey(stepTypeId), stepAddress);\\n    eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.allStepAddresses, stepAddress);\\n    emit StepAddressSetEvent(stepTypeId, stepAddress);\\n  }\\n\\n  function addRunnerAddress(address runnerAddress) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    // using the map like a set, we only care about the keys\\n    eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.runnerAddresses, runnerAddress, 0);\\n  }\\n\\n  function removeRunnerAddress(address runnerAddress) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.runnerAddresses, runnerAddress);\\n  }\\n\\n  function getRunnerAddresses() external view returns (address[] memory) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    uint256 count = eternalStorage.lengthEnumerableMapAddressToUint(LibConfigReader.runnerAddresses);\\n    address[] memory runners = new address[](count);\\n    for (uint256 i = 0; i < count; ++i) {\\n      (address runnerAddress, ) = eternalStorage.atEnumerableMapAddressToUint(LibConfigReader.runnerAddresses, i);\\n      runners[i] = runnerAddress;\\n    }\\n    return runners;\\n  }\\n}\\n\",\"keccak256\":\"0xeba9f0b9fbdbfe4bb38bdc2ebbf6ad76b6a094599b954d6f4f00344d514d628f\",\"license\":\"MIT\"},\"contracts/EternalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\n\\nimport './Ownable.sol';\\n\\ncontract EternalStorage is Ownable {\\n  address internal writer;\\n\\n  modifier onlyWriter() {\\n    require(msg.sender == writer);\\n    _;\\n  }\\n\\n  constructor(address owner, address initialWriter) Ownable(owner) {\\n    writer = initialWriter;\\n  }\\n\\n  event StorageWriterChanged(address oldWriter, address newWriter);\\n\\n  function getWriter() public view returns (address) {\\n    return writer;\\n  }\\n\\n  function setWriter(address newWriter) public onlyOwner {\\n    emit StorageWriterChanged(writer, newWriter);\\n    writer = newWriter;\\n  }\\n\\n  mapping(bytes32 => uint256) uIntStorage;\\n  mapping(bytes32 => string) stringStorage;\\n  mapping(bytes32 => address) addressStorage;\\n  mapping(bytes32 => bytes) bytesStorage;\\n  mapping(bytes32 => bool) boolStorage;\\n  mapping(bytes32 => int256) intStorage;\\n\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n  using EnumerableMap for EnumerableMap.AddressToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n  using EnumerableMap for EnumerableMap.UintToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) enumerableMapUintToAddressMapStorage;\\n  mapping(bytes32 => EnumerableMap.AddressToUintMap) enumerableMapAddressToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToBytes32Map) enumerableMapBytes32ToBytes32MapStorage;\\n  mapping(bytes32 => EnumerableMap.UintToUintMap) enumerableMapUintToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToUintMap) enumerableMapBytes32ToUintMapStorage;\\n\\n  // *** Getter Methods ***\\n  function getUint(bytes32 _key) external view returns (uint256) {\\n    return uIntStorage[_key];\\n  }\\n\\n  function getString(bytes32 _key) external view returns (string memory) {\\n    return stringStorage[_key];\\n  }\\n\\n  function getAddress(bytes32 _key) external view returns (address) {\\n    return addressStorage[_key];\\n  }\\n\\n  function getBytes(bytes32 _key) external view returns (bytes memory) {\\n    return bytesStorage[_key];\\n  }\\n\\n  function getBool(bytes32 _key) external view returns (bool) {\\n    return boolStorage[_key];\\n  }\\n\\n  function getInt(bytes32 _key) external view returns (int256) {\\n    return intStorage[_key];\\n  }\\n\\n  // *** Setter Methods ***\\n  function setUint(bytes32 _key, uint256 _value) external onlyWriter {\\n    uIntStorage[_key] = _value;\\n  }\\n\\n  function setString(bytes32 _key, string memory _value) external onlyWriter {\\n    stringStorage[_key] = _value;\\n  }\\n\\n  function setAddress(bytes32 _key, address _value) external {\\n    addressStorage[_key] = _value;\\n  }\\n\\n  function setBytes(bytes32 _key, bytes memory _value) external onlyWriter {\\n    bytesStorage[_key] = _value;\\n  }\\n\\n  function setBool(bytes32 _key, bool _value) external onlyWriter {\\n    boolStorage[_key] = _value;\\n  }\\n\\n  function setInt(bytes32 _key, int256 _value) external onlyWriter {\\n    intStorage[_key] = _value;\\n  }\\n\\n  // *** Delete Methods ***\\n  function deleteUint(bytes32 _key) external onlyWriter {\\n    delete uIntStorage[_key];\\n  }\\n\\n  function deleteString(bytes32 _key) external onlyWriter {\\n    delete stringStorage[_key];\\n  }\\n\\n  function deleteAddress(bytes32 _key) external onlyWriter {\\n    delete addressStorage[_key];\\n  }\\n\\n  function deleteBytes(bytes32 _key) external onlyWriter {\\n    delete bytesStorage[_key];\\n  }\\n\\n  function deleteBool(bytes32 _key) external onlyWriter {\\n    delete boolStorage[_key];\\n  }\\n\\n  function deleteInt(bytes32 _key) external onlyWriter {\\n    delete intStorage[_key];\\n  }\\n\\n  // enumerable get\\n\\n  function getEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  // enumerable tryGet\\n\\n  function tryGetEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bool, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (bool, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (bool, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  // enumerable set\\n\\n  function setEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2, address _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapAddressToUint(bytes32 _key1, address _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2, bytes32 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapUintToUint(bytes32 _key1, uint256 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  // enumerable remove\\n\\n  function removeEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToAddressMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapAddressToUint(bytes32 _key1, address _key2) external onlyWriter {\\n    enumerableMapAddressToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToBytes32MapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  // enumerable contains\\n\\n  function containsEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  // enumerable length\\n\\n  function lengthEnumerableMapUintToAddress(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToAddressMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapAddressToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToBytes32(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapUintToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].length();\\n  }\\n\\n  // enumerable at\\n\\n  function atEnumerableMapUintToAddress(bytes32 _key1, uint256 _index) external view returns (uint256, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapAddressToUint(bytes32 _key1, uint256 _index) external view returns (address, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToBytes32(bytes32 _key1, uint256 _index) external view returns (bytes32, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapUintToUint(bytes32 _key1, uint256 _index) external view returns (uint256, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToUint(bytes32 _key1, uint256 _index) external view returns (bytes32, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].at(_index);\\n  }\\n}\\n\",\"keccak256\":\"0x17a2dde162f6ed01a95b2c64c4b5b345e7d0e8fcf4f51d1a861c199cd91fcbef\",\"license\":\"MIT\"},\"contracts/FreeMarketBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './Ownable.sol';\\n\\ncontract FreeMarketBase is Ownable {\\n  // TODO create getters\\n  address public eternalStorageAddress;\\n  address public upstreamAddress;\\n  bool public isUserProxy;\\n\\n  constructor(\\n    address owner,\\n    address eternalStorage,\\n    address upstream,\\n    bool userProxy\\n  ) Ownable(owner) {\\n    eternalStorageAddress = eternalStorage;\\n    upstreamAddress = upstream;\\n    isUserProxy = userProxy;\\n  }\\n}\\n\",\"keccak256\":\"0xeeac9b86b1e934d1a84316e3f006abb32375088cef75fe0a56e74e2e1e38b87e\",\"license\":\"MIT\"},\"contracts/FrontDoor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './EternalStorage.sol';\\nimport './Proxy.sol';\\nimport './LibStorageWriter.sol';\\n\\ncontract FrontDoor is Proxy {\\n  constructor() Proxy(msg.sender, address(new EternalStorage(msg.sender, address(0))), address(0x0), false) {\\n    bytes32 key = keccak256(abi.encodePacked('frontDoor'));\\n    StorageWriter.setAddress(eternalStorageAddress, key, address(this));\\n  }\\n\\n  event UpstreamChanged(address oldUpstream, address newUpstream);\\n  event UpstreamRemoved(address oldUpstream);\\n\\n  function setUpstream(address newUpstream) public onlyOwner {\\n    address oldUpstream = upstreamAddress;\\n    upstreamAddress = newUpstream;\\n    emit UpstreamChanged(oldUpstream, newUpstream);\\n  }\\n}\\n\",\"keccak256\":\"0x62fda07ff75e261b1fbac980b48508481f205c99214206cabdbde790e76f40c8\",\"license\":\"MIT\"},\"contracts/IHasUpstream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IHasUpstream {\\n  function getUpstream() external view returns (address);\\n}\\n\",\"keccak256\":\"0xef83d78a64e9c3cbd2b9238523af2a9a03abc8c42890e57a1ffeefddd7999be3\",\"license\":\"MIT\"},\"contracts/LibConfigReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './EternalStorage.sol';\\n\\nlibrary LibConfigReader {\\n  // latestStepAddresses maps stepTypeId to latest and greatest version of that step\\n  bytes32 constant latestStepAddresses = 0xc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd; // keccak256('latestActionAddresses')\\n  bytes32 constant runnerAddresses = 0x32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f5; // keccak256('runnerAddresses')\\n  bytes32 constant allStepAddresses = 0x18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e99139555; // keccak256('allStepAddresses')\\n\\n  function getStepAddressInternal(address eternalStorageAddress, uint16 stepTypeId) internal view returns (address) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.getEnumerableMapUintToAddress(latestStepAddresses, stepTypeId);\\n  }\\n\\n  function getStepWhitelistKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked('stepWhiteList', stepTypeId));\\n  }\\n\\n  function getStepBlacklistKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked('stepBlackList', stepTypeId));\\n  }\\n\\n  function isStepAddressWhitelisted(address eternalStorageAddress, uint16 stepTypeId, address stepAddress) internal view returns (bool) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.containsEnumerableMapAddressToUint(getStepWhitelistKey(stepTypeId), stepAddress);\\n  }\\n\\n  function isStepAddressWhitelisted(address eternalStorageAddress, address stepAddress) internal view returns (bool) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.containsEnumerableMapAddressToUint(allStepAddresses, stepAddress);\\n  }\\n}\\n\",\"keccak256\":\"0x348c94a7483eeee29a89bd67f48f31a349867a2dd8267c9d3abd289b6cc84c52\",\"license\":\"MIT\"},\"contracts/LibStorageWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary StorageWriter {\\n    // *** Setter Methods ***\\n    function setUint(address storageAddr, bytes32 key, uint256 value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setUint(bytes32,uint256)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setString(address storageAddr, bytes32 key, string memory value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setAddress(address storageAddr, bytes32 key, address value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setAddress(bytes32,address)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setBytes(address storageAddr, bytes32 key, bytes memory value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setBytes(bytes32,bytes memory)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setBool(address storageAddr, bytes32 key, bool value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setBool(bytes32,bool)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setInt(address storageAddr, bytes32 key, int256 value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setInt(bytes32,int256)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    // *** Delete Methods ***\\n    function deleteUint(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"deleteUint(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteString(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteAddress(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteBytes(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteBool(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteInt(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function setStepAddress(address storageAddr, uint16 stepTypeId, address stepAddress) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setStepAddress(uint16,address)\\\", stepTypeId, stepAddress));\\n        require(success, string(returnData));\\n    }\\n}\\n\",\"keccak256\":\"0xccede755458ec2a36261519cf06894f0bf1db0128212f59fb18e82ba02f696a7\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ncontract Ownable {\\n  address payable public owner;\\n\\n  constructor(address initialOwner) {\\n    owner = payable(initialOwner);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  event LogNewOwner(address sender, address newOwner);\\n\\n  function setOwner(address payable newOwner) external onlyOwner {\\n    require(newOwner != address(0));\\n    owner = newOwner;\\n    emit LogNewOwner(msg.sender, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0xa798ec89af451652edfa77d05689d3330f503ed4bf9e01d6620d6b2c6a617544\",\"license\":\"MIT\"},\"contracts/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './IHasUpstream.sol';\\nimport './FreeMarketBase.sol';\\nimport './EternalStorage.sol';\\n\\n\\ncontract Proxy is FreeMarketBase, IHasUpstream {\\n  bytes32 constant runnerAddresses = 0x32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f5; // keccak256('runnerAddresses')\\n\\n  constructor(\\n    address owner,\\n    address storageAddress,\\n    address upstream,\\n    bool userProxy\\n  ) FreeMarketBase(owner, storageAddress, upstream, userProxy) {}\\n\\n  function getUpstream() external view virtual returns (address) {\\n    return upstreamAddress;\\n  }\\n\\n  function resolveUpstream() internal view returns (address addr) {\\n    address upstreamFromArgs = getAddressFromCalldata();\\n\\n    if (upstreamFromArgs != address(0)) {\\n\\n      EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n      require(eternalStorage.containsEnumerableMapAddressToUint(runnerAddresses, upstreamFromArgs), 'provided upstream not whitelisted');\\n      return upstreamFromArgs;\\n    } else {\\n\\n    }\\n    return upstreamAddress;\\n  }\\n\\n  function getAddressFromCalldata() internal pure returns (address addr) {\\n    assembly {\\n      let offset := add(4, calldataload(4))\\n      addr := calldataload(offset)\\n    }\\n  }\\n\\n  /// @dev this forwards all calls generically to upstream, only the owner can invoke this\\n  fallback() external payable {\\n\\n    address upstream = resolveUpstream();\\n\\n    _delegate(upstream);\\n  }\\n\\n  /// @dev this allows this contract to receive ETH\\n  receive() external payable {\\n    // noop\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   */\\n  function _delegate(address upstr) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), upstr, 0, calldatasize(), 0, 0)\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n      // let ptr := mload(0x40)\\n      // calldatacopy(ptr, 0, calldatasize())\\n      // let result := delegatecall(gas(), implementation, ptr, calldatasize(), 0, 0)\\n      // let size := returndatasize()\\n      // returndatacopy(ptr, 0, size)\\n      // switch result\\n      // case 0 {\\n      //   revert(ptr, size)\\n      // }\\n      // default {\\n      //   return(ptr, size)\\n      // }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x474762384d8c814a214e08ec2f0ada71584f588bd0f1052f0bcb90767b9d6d23\",\"license\":\"MIT\"},\"contracts/StepInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct StepInfo {\\n  uint16 stepTypeId;\\n  uint24 fee;\\n  address latest;\\n  address[] whitelist;\\n  address[] blacklist;\\n}\\n\",\"keccak256\":\"0xc0cc8ff9fe83d52b55c4405b694f680daeb1efa744cd5dd9f821fc8ed62ddf71\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200248338038062002483833981810160405281019062000037919062000234565b338173ffffffffffffffffffffffffffffffffffffffff1663384782fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000084573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000aa9190620002ab565b60008083806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260146101000a81548160ff021916908315150217905550505050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620002dd565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fc82620001cf565b9050919050565b6200020e81620001ef565b81146200021a57600080fd5b50565b6000815190506200022e8162000203565b92915050565b6000602082840312156200024d576200024c620001ca565b5b60006200025d848285016200021d565b91505092915050565b60006200027382620001cf565b9050919050565b620002858162000266565b81146200029157600080fd5b50565b600081519050620002a5816200027a565b92915050565b600060208284031215620002c457620002c3620001ca565b5b6000620002d48482850162000294565b91505092915050565b60805161218a620002f96000396000610995015261218a6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636fd633511161008c578063910752cd11610066578063910752cd14610227578063c4006c8114610243578063f90339771461025f578063ff05c2a81461028f576100ea565b80636fd63351146101cf5780638a04867b146101ed5780638da5cb5b14610209576100ea565b806332b56aaf116100c857806332b56aaf14610145578063384782fe1461016357806350fd910e14610181578063699a20571461019f576100ea565b8063073728ea146100ef5780630f53b8541461010d57806313af403514610129575b600080fd5b6100f76102ad565b604051610104919061172d565b60405180910390f35b610127600480360381019061012291906117ba565b6104dc565b005b610143600480360381019061013e9190611838565b61083a565b005b61014d610947565b60405161015a9190611874565b60405180910390f35b61016b61096d565b6040516101789190611874565b60405180910390f35b610189610993565b6040516101969190611874565b60405180910390f35b6101b960048036038101906101b491906118c5565b6109b7565b6040516101c69190611a0b565b60405180910390f35b6101d7610e6a565b6040516101e49190611a3c565b60405180910390f35b61020760048036038101906102029190611a57565b610f35565b005b61021161105d565b60405161021e9190611a93565b60405180910390f35b610241600480360381019061023c9190611a57565b611081565b005b61025d600480360381019061025891906117ba565b611194565b005b61027960048036038101906102749190611aae565b611499565b6040516102869190611874565b60405180910390f35b6102976114ce565b6040516102a49190611af6565b60405180910390f35b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b0d10fd7f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b6040518263ffffffff1660e01b81526004016103349190611b2a565b602060405180830381865afa158015610351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103759190611b5a565b905060008167ffffffffffffffff81111561039357610392611b87565b5b6040519080825280602002602001820160405280156103c15781602001602082028036833780820191505090505b50905060005b828110156104d25760008473ffffffffffffffffffffffffffffffffffffffff1663619f6cc67f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b846040518363ffffffff1660e01b815260040161042f929190611bb6565b6040805180830381865afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190611bf4565b5090508083838151811061048657610485611c34565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505050806104cb90611c92565b90506103c7565b5080935050505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461053457600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b866040518363ffffffff1660e01b81526004016105bb929190611d15565b602060405180830381865afa1580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc9190611d3e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361066c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066390611dee565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663ba4014fd610691866114e1565b8560006040518463ffffffff1660e01b81526004016106b293929190611e49565b6020604051808303816000875af11580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190611eac565b508173ffffffffffffffffffffffffffffffffffffffff16638142576361071b86611511565b856040518363ffffffff1660e01b8152600401610739929190611ed9565b600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663814257637f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b856040518363ffffffff1660e01b81526004016107c9929190611ed9565b600060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050507f5c250b46b4ab7901af16e469d68737ca13fe0eac242b19f323f7d3608565be7f848460405161082c929190611f11565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461089257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108cb57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9338260405161093c929190611f8f565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109bf6115ef565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000808273ffffffffffffffffffffffffffffffffffffffff16634fcee0497fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b876040518363ffffffff1660e01b8152600401610a47929190611bb6565b6040805180830381865afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611fb8565b915091506000610a9683611511565b905060008473ffffffffffffffffffffffffffffffffffffffff16639b0d10fd836040518263ffffffff1660e01b8152600401610ad39190611b2a565b602060405180830381865afa158015610af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b149190611b5a565b905060008167ffffffffffffffff811115610b3257610b31611b87565b5b604051908082528060200260200182016040528015610b605781602001602082028036833780820191505090505b50905060005b82811015610c4e5760008773ffffffffffffffffffffffffffffffffffffffff1663619f6cc686846040518363ffffffff1660e01b8152600401610bab929190611bb6565b6040805180830381865afa158015610bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb9190611bf4565b50905080838381518110610c0257610c01611c34565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505080610c4790611c92565b9050610b66565b506000610c5a866114e1565b905060008773ffffffffffffffffffffffffffffffffffffffff16639b0d10fd836040518263ffffffff1660e01b8152600401610c979190611b2a565b602060405180830381865afa158015610cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd89190611b5a565b905060008167ffffffffffffffff811115610cf657610cf5611b87565b5b604051908082528060200260200182016040528015610d245781602001602082028036833780820191505090505b50905060005b82811015610e125760008a73ffffffffffffffffffffffffffffffffffffffff1663619f6cc686846040518363ffffffff1660e01b8152600401610d6f929190611bb6565b6040805180830381865afa158015610d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daf9190611bf4565b50905080838381518110610dc657610dc5611c34565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505080610e0b90611c92565b9050610d2a565b506040518060a001604052808961ffff168152602001600062ffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001858152602001828152509950505050505050505050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663832860727fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b6040518263ffffffff1660e01b8152600401610eee9190611b2a565b602060405180830381865afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190611b5a565b91505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f8d57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b8460006040518463ffffffff1660e01b815260040161101593929190611e49565b6020604051808303816000875af1158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190611eac565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d957600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663814257637f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b846040518363ffffffff1660e01b815260040161115e929190611ed9565b600060405180830381600087803b15801561117857600080fd5b505af115801561118c573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ec57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663107f89ad7fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b85856040518463ffffffff1660e01b815260040161127393929190611ff8565b6020604051808303816000875af1158015611292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b69190611eac565b508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd6112dc85611511565b8460006040518463ffffffff1660e01b81526004016112fd93929190611e49565b6020604051808303816000875af115801561131c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113409190611eac565b508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b8460006040518463ffffffff1660e01b81526004016113a293929190611e49565b6020604051808303816000875af11580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e59190611eac565b508073ffffffffffffffffffffffffffffffffffffffff16638142576361140b856114e1565b846040518363ffffffff1660e01b8152600401611429929190611ed9565b600060405180830381600087803b15801561144357600080fd5b505af1158015611457573d6000803e3d6000fd5b505050507f5c250b46b4ab7901af16e469d68737ca13fe0eac242b19f323f7d3608565be7f838360405161148c929190611f11565b60405180910390a1505050565b60006114c7600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611541565b9050919050565b600260149054906101000a900460ff1681565b6000816040516020016114f491906120bc565b604051602081830303815290604052805190602001209050919050565b600081604051602001611524919061212e565b604051602081830303815290604052805190602001209050919050565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b856040518363ffffffff1660e01b81526004016115a5929190611d15565b602060405180830381865afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190611d3e565b91505092915050565b6040518060a00160405280600061ffff168152602001600062ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061169482611669565b9050919050565b6116a481611689565b82525050565b60006116b6838361169b565b60208301905092915050565b6000602082019050919050565b60006116da8261163d565b6116e48185611648565b93506116ef83611659565b8060005b8381101561172057815161170788826116aa565b9750611712836116c2565b9250506001810190506116f3565b5085935050505092915050565b6000602082019050818103600083015261174781846116cf565b905092915050565b600080fd5b600061ffff82169050919050565b61176b81611754565b811461177657600080fd5b50565b60008135905061178881611762565b92915050565b61179781611689565b81146117a257600080fd5b50565b6000813590506117b48161178e565b92915050565b600080604083850312156117d1576117d061174f565b5b60006117df85828601611779565b92505060206117f0858286016117a5565b9150509250929050565b600061180582611669565b9050919050565b611815816117fa565b811461182057600080fd5b50565b6000813590506118328161180c565b92915050565b60006020828403121561184e5761184d61174f565b5b600061185c84828501611823565b91505092915050565b61186e81611689565b82525050565b60006020820190506118896000830184611865565b92915050565b6000819050919050565b6118a28161188f565b81146118ad57600080fd5b50565b6000813590506118bf81611899565b92915050565b6000602082840312156118db576118da61174f565b5b60006118e9848285016118b0565b91505092915050565b6118fb81611754565b82525050565b600062ffffff82169050919050565b61191981611901565b82525050565b600082825260208201905092915050565b600061193b8261163d565b611945818561191f565b935061195083611659565b8060005b8381101561198157815161196888826116aa565b9750611973836116c2565b925050600181019050611954565b5085935050505092915050565b600060a0830160008301516119a660008601826118f2565b5060208301516119b96020860182611910565b5060408301516119cc604086018261169b565b50606083015184820360608601526119e48282611930565b915050608083015184820360808601526119fe8282611930565b9150508091505092915050565b60006020820190508181036000830152611a25818461198e565b905092915050565b611a368161188f565b82525050565b6000602082019050611a516000830184611a2d565b92915050565b600060208284031215611a6d57611a6c61174f565b5b6000611a7b848285016117a5565b91505092915050565b611a8d816117fa565b82525050565b6000602082019050611aa86000830184611a84565b92915050565b600060208284031215611ac457611ac361174f565b5b6000611ad284828501611779565b91505092915050565b60008115159050919050565b611af081611adb565b82525050565b6000602082019050611b0b6000830184611ae7565b92915050565b6000819050919050565b611b2481611b11565b82525050565b6000602082019050611b3f6000830184611b1b565b92915050565b600081519050611b5481611899565b92915050565b600060208284031215611b7057611b6f61174f565b5b6000611b7e84828501611b45565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000604082019050611bcb6000830185611b1b565b611bd86020830184611a2d565b9392505050565b600081519050611bee8161178e565b92915050565b60008060408385031215611c0b57611c0a61174f565b5b6000611c1985828601611bdf565b9250506020611c2a85828601611b45565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c9d8261188f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ccf57611cce611c63565b5b600182019050919050565b6000819050919050565b6000611cff611cfa611cf584611754565b611cda565b61188f565b9050919050565b611d0f81611ce4565b82525050565b6000604082019050611d2a6000830185611b1b565b611d376020830184611d06565b9392505050565b600060208284031215611d5457611d5361174f565b5b6000611d6284828501611bdf565b91505092915050565b600082825260208201905092915050565b7f63616e6e6f742072656d6f7665206c617465737420737465702061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611dd8602183611d6b565b9150611de382611d7c565b604082019050919050565b60006020820190508181036000830152611e0781611dcb565b9050919050565b6000819050919050565b6000611e33611e2e611e2984611e0e565b611cda565b61188f565b9050919050565b611e4381611e18565b82525050565b6000606082019050611e5e6000830186611b1b565b611e6b6020830185611865565b611e786040830184611e3a565b949350505050565b611e8981611adb565b8114611e9457600080fd5b50565b600081519050611ea681611e80565b92915050565b600060208284031215611ec257611ec161174f565b5b6000611ed084828501611e97565b91505092915050565b6000604082019050611eee6000830185611b1b565b611efb6020830184611865565b9392505050565b611f0b81611754565b82525050565b6000604082019050611f266000830185611f02565b611f336020830184611865565b9392505050565b6000611f55611f50611f4b84611669565b611cda565b611669565b9050919050565b6000611f6782611f3a565b9050919050565b6000611f7982611f5c565b9050919050565b611f8981611f6e565b82525050565b6000604082019050611fa46000830185611865565b611fb16020830184611f80565b9392505050565b60008060408385031215611fcf57611fce61174f565b5b6000611fdd85828601611b45565b9250506020611fee85828601611bdf565b9150509250929050565b600060608201905061200d6000830186611b1b565b61201a6020830185611d06565b6120276040830184611865565b949350505050565b600081905092915050565b7f73746570426c61636b4c69737400000000000000000000000000000000000000600082015250565b6000612070600d8361202f565b915061207b8261203a565b600d82019050919050565b60008160f01b9050919050565b600061209e82612086565b9050919050565b6120b66120b182611754565b612093565b82525050565b60006120c782612063565b91506120d382846120a5565b60028201915081905092915050565b7f7374657057686974654c69737400000000000000000000000000000000000000600082015250565b6000612118600d8361202f565b9150612123826120e2565b600d82019050919050565b60006121398261210b565b915061214582846120a5565b6002820191508190509291505056fea2646970667358221220905357e6c563478c691a85aef9d4dc4509b6ce5ed83be236b64479712522efa264736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636fd633511161008c578063910752cd11610066578063910752cd14610227578063c4006c8114610243578063f90339771461025f578063ff05c2a81461028f576100ea565b80636fd63351146101cf5780638a04867b146101ed5780638da5cb5b14610209576100ea565b806332b56aaf116100c857806332b56aaf14610145578063384782fe1461016357806350fd910e14610181578063699a20571461019f576100ea565b8063073728ea146100ef5780630f53b8541461010d57806313af403514610129575b600080fd5b6100f76102ad565b604051610104919061172d565b60405180910390f35b610127600480360381019061012291906117ba565b6104dc565b005b610143600480360381019061013e9190611838565b61083a565b005b61014d610947565b60405161015a9190611874565b60405180910390f35b61016b61096d565b6040516101789190611874565b60405180910390f35b610189610993565b6040516101969190611874565b60405180910390f35b6101b960048036038101906101b491906118c5565b6109b7565b6040516101c69190611a0b565b60405180910390f35b6101d7610e6a565b6040516101e49190611a3c565b60405180910390f35b61020760048036038101906102029190611a57565b610f35565b005b61021161105d565b60405161021e9190611a93565b60405180910390f35b610241600480360381019061023c9190611a57565b611081565b005b61025d600480360381019061025891906117ba565b611194565b005b61027960048036038101906102749190611aae565b611499565b6040516102869190611874565b60405180910390f35b6102976114ce565b6040516102a49190611af6565b60405180910390f35b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b0d10fd7f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b6040518263ffffffff1660e01b81526004016103349190611b2a565b602060405180830381865afa158015610351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103759190611b5a565b905060008167ffffffffffffffff81111561039357610392611b87565b5b6040519080825280602002602001820160405280156103c15781602001602082028036833780820191505090505b50905060005b828110156104d25760008473ffffffffffffffffffffffffffffffffffffffff1663619f6cc67f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b846040518363ffffffff1660e01b815260040161042f929190611bb6565b6040805180830381865afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190611bf4565b5090508083838151811061048657610485611c34565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505050806104cb90611c92565b90506103c7565b5080935050505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461053457600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b866040518363ffffffff1660e01b81526004016105bb929190611d15565b602060405180830381865afa1580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc9190611d3e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361066c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066390611dee565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663ba4014fd610691866114e1565b8560006040518463ffffffff1660e01b81526004016106b293929190611e49565b6020604051808303816000875af11580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190611eac565b508173ffffffffffffffffffffffffffffffffffffffff16638142576361071b86611511565b856040518363ffffffff1660e01b8152600401610739929190611ed9565b600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663814257637f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b856040518363ffffffff1660e01b81526004016107c9929190611ed9565b600060405180830381600087803b1580156107e357600080fd5b505af11580156107f7573d6000803e3d6000fd5b505050507f5c250b46b4ab7901af16e469d68737ca13fe0eac242b19f323f7d3608565be7f848460405161082c929190611f11565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461089257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108cb57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9338260405161093c929190611f8f565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109bf6115ef565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000808273ffffffffffffffffffffffffffffffffffffffff16634fcee0497fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b876040518363ffffffff1660e01b8152600401610a47929190611bb6565b6040805180830381865afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611fb8565b915091506000610a9683611511565b905060008473ffffffffffffffffffffffffffffffffffffffff16639b0d10fd836040518263ffffffff1660e01b8152600401610ad39190611b2a565b602060405180830381865afa158015610af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b149190611b5a565b905060008167ffffffffffffffff811115610b3257610b31611b87565b5b604051908082528060200260200182016040528015610b605781602001602082028036833780820191505090505b50905060005b82811015610c4e5760008773ffffffffffffffffffffffffffffffffffffffff1663619f6cc686846040518363ffffffff1660e01b8152600401610bab929190611bb6565b6040805180830381865afa158015610bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb9190611bf4565b50905080838381518110610c0257610c01611c34565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505080610c4790611c92565b9050610b66565b506000610c5a866114e1565b905060008773ffffffffffffffffffffffffffffffffffffffff16639b0d10fd836040518263ffffffff1660e01b8152600401610c979190611b2a565b602060405180830381865afa158015610cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd89190611b5a565b905060008167ffffffffffffffff811115610cf657610cf5611b87565b5b604051908082528060200260200182016040528015610d245781602001602082028036833780820191505090505b50905060005b82811015610e125760008a73ffffffffffffffffffffffffffffffffffffffff1663619f6cc686846040518363ffffffff1660e01b8152600401610d6f929190611bb6565b6040805180830381865afa158015610d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daf9190611bf4565b50905080838381518110610dc657610dc5611c34565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505080610e0b90611c92565b9050610d2a565b506040518060a001604052808961ffff168152602001600062ffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001858152602001828152509950505050505050505050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663832860727fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b6040518263ffffffff1660e01b8152600401610eee9190611b2a565b602060405180830381865afa158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190611b5a565b91505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f8d57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b8460006040518463ffffffff1660e01b815260040161101593929190611e49565b6020604051808303816000875af1158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190611eac565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d957600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663814257637f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b846040518363ffffffff1660e01b815260040161115e929190611ed9565b600060405180830381600087803b15801561117857600080fd5b505af115801561118c573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ec57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663107f89ad7fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b85856040518463ffffffff1660e01b815260040161127393929190611ff8565b6020604051808303816000875af1158015611292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b69190611eac565b508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd6112dc85611511565b8460006040518463ffffffff1660e01b81526004016112fd93929190611e49565b6020604051808303816000875af115801561131c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113409190611eac565b508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b8460006040518463ffffffff1660e01b81526004016113a293929190611e49565b6020604051808303816000875af11580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e59190611eac565b508073ffffffffffffffffffffffffffffffffffffffff16638142576361140b856114e1565b846040518363ffffffff1660e01b8152600401611429929190611ed9565b600060405180830381600087803b15801561144357600080fd5b505af1158015611457573d6000803e3d6000fd5b505050507f5c250b46b4ab7901af16e469d68737ca13fe0eac242b19f323f7d3608565be7f838360405161148c929190611f11565b60405180910390a1505050565b60006114c7600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611541565b9050919050565b600260149054906101000a900460ff1681565b6000816040516020016114f491906120bc565b604051602081830303815290604052805190602001209050919050565b600081604051602001611524919061212e565b604051602081830303815290604052805190602001209050919050565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b856040518363ffffffff1660e01b81526004016115a5929190611d15565b602060405180830381865afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190611d3e565b91505092915050565b6040518060a00160405280600061ffff168152602001600062ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061169482611669565b9050919050565b6116a481611689565b82525050565b60006116b6838361169b565b60208301905092915050565b6000602082019050919050565b60006116da8261163d565b6116e48185611648565b93506116ef83611659565b8060005b8381101561172057815161170788826116aa565b9750611712836116c2565b9250506001810190506116f3565b5085935050505092915050565b6000602082019050818103600083015261174781846116cf565b905092915050565b600080fd5b600061ffff82169050919050565b61176b81611754565b811461177657600080fd5b50565b60008135905061178881611762565b92915050565b61179781611689565b81146117a257600080fd5b50565b6000813590506117b48161178e565b92915050565b600080604083850312156117d1576117d061174f565b5b60006117df85828601611779565b92505060206117f0858286016117a5565b9150509250929050565b600061180582611669565b9050919050565b611815816117fa565b811461182057600080fd5b50565b6000813590506118328161180c565b92915050565b60006020828403121561184e5761184d61174f565b5b600061185c84828501611823565b91505092915050565b61186e81611689565b82525050565b60006020820190506118896000830184611865565b92915050565b6000819050919050565b6118a28161188f565b81146118ad57600080fd5b50565b6000813590506118bf81611899565b92915050565b6000602082840312156118db576118da61174f565b5b60006118e9848285016118b0565b91505092915050565b6118fb81611754565b82525050565b600062ffffff82169050919050565b61191981611901565b82525050565b600082825260208201905092915050565b600061193b8261163d565b611945818561191f565b935061195083611659565b8060005b8381101561198157815161196888826116aa565b9750611973836116c2565b925050600181019050611954565b5085935050505092915050565b600060a0830160008301516119a660008601826118f2565b5060208301516119b96020860182611910565b5060408301516119cc604086018261169b565b50606083015184820360608601526119e48282611930565b915050608083015184820360808601526119fe8282611930565b9150508091505092915050565b60006020820190508181036000830152611a25818461198e565b905092915050565b611a368161188f565b82525050565b6000602082019050611a516000830184611a2d565b92915050565b600060208284031215611a6d57611a6c61174f565b5b6000611a7b848285016117a5565b91505092915050565b611a8d816117fa565b82525050565b6000602082019050611aa86000830184611a84565b92915050565b600060208284031215611ac457611ac361174f565b5b6000611ad284828501611779565b91505092915050565b60008115159050919050565b611af081611adb565b82525050565b6000602082019050611b0b6000830184611ae7565b92915050565b6000819050919050565b611b2481611b11565b82525050565b6000602082019050611b3f6000830184611b1b565b92915050565b600081519050611b5481611899565b92915050565b600060208284031215611b7057611b6f61174f565b5b6000611b7e84828501611b45565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000604082019050611bcb6000830185611b1b565b611bd86020830184611a2d565b9392505050565b600081519050611bee8161178e565b92915050565b60008060408385031215611c0b57611c0a61174f565b5b6000611c1985828601611bdf565b9250506020611c2a85828601611b45565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c9d8261188f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ccf57611cce611c63565b5b600182019050919050565b6000819050919050565b6000611cff611cfa611cf584611754565b611cda565b61188f565b9050919050565b611d0f81611ce4565b82525050565b6000604082019050611d2a6000830185611b1b565b611d376020830184611d06565b9392505050565b600060208284031215611d5457611d5361174f565b5b6000611d6284828501611bdf565b91505092915050565b600082825260208201905092915050565b7f63616e6e6f742072656d6f7665206c617465737420737465702061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611dd8602183611d6b565b9150611de382611d7c565b604082019050919050565b60006020820190508181036000830152611e0781611dcb565b9050919050565b6000819050919050565b6000611e33611e2e611e2984611e0e565b611cda565b61188f565b9050919050565b611e4381611e18565b82525050565b6000606082019050611e5e6000830186611b1b565b611e6b6020830185611865565b611e786040830184611e3a565b949350505050565b611e8981611adb565b8114611e9457600080fd5b50565b600081519050611ea681611e80565b92915050565b600060208284031215611ec257611ec161174f565b5b6000611ed084828501611e97565b91505092915050565b6000604082019050611eee6000830185611b1b565b611efb6020830184611865565b9392505050565b611f0b81611754565b82525050565b6000604082019050611f266000830185611f02565b611f336020830184611865565b9392505050565b6000611f55611f50611f4b84611669565b611cda565b611669565b9050919050565b6000611f6782611f3a565b9050919050565b6000611f7982611f5c565b9050919050565b611f8981611f6e565b82525050565b6000604082019050611fa46000830185611865565b611fb16020830184611f80565b9392505050565b60008060408385031215611fcf57611fce61174f565b5b6000611fdd85828601611b45565b9250506020611fee85828601611bdf565b9150509250929050565b600060608201905061200d6000830186611b1b565b61201a6020830185611d06565b6120276040830184611865565b949350505050565b600081905092915050565b7f73746570426c61636b4c69737400000000000000000000000000000000000000600082015250565b6000612070600d8361202f565b915061207b8261203a565b600d82019050919050565b60008160f01b9050919050565b600061209e82612086565b9050919050565b6120b66120b182611754565b612093565b82525050565b60006120c782612063565b91506120d382846120a5565b60028201915081905092915050565b7f7374657057686974654c69737400000000000000000000000000000000000000600082015250565b6000612118600d8361202f565b9150612123826120e2565b600d82019050919050565b60006121398261210b565b915061214582846120a5565b6002820191508190509291505056fea2646970667358221220905357e6c563478c691a85aef9d4dc4509b6ce5ed83be236b64479712522efa264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7577,
        "contract": "contracts/ConfigManager.sol:ConfigManager",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 6255,
        "contract": "contracts/ConfigManager.sol:ConfigManager",
        "label": "eternalStorageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6257,
        "contract": "contracts/ConfigManager.sol:ConfigManager",
        "label": "upstreamAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6259,
        "contract": "contracts/ConfigManager.sol:ConfigManager",
        "label": "isUserProxy",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}