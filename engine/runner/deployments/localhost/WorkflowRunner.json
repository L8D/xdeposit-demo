{
  "address": "0x43cA9bAe8dF108684E5EAaA720C25e1b32B0A075",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "frontDoorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogNewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userAmount",
          "type": "uint256"
        }
      ],
      "name": "RemainingAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount",
          "name": "startingAsset",
          "type": "tuple"
        }
      ],
      "name": "WorkflowContinuation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "workflowRunnerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "sourceIsCaller",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "amountIsPercent",
                      "type": "bool"
                    },
                    {
                      "components": [
                        {
                          "internalType": "enum AssetType",
                          "name": "assetType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "assetAddress",
                          "type": "address"
                        }
                      ],
                      "internalType": "struct Asset",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct WorkflowStepInputAsset[]",
                  "name": "inputAssets",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                },
                {
                  "internalType": "int16",
                  "name": "nextStepIndex",
                  "type": "int16"
                }
              ],
              "internalType": "struct WorkflowStep[]",
              "name": "steps",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Workflow",
          "name": "workflow",
          "type": "tuple"
        }
      ],
      "name": "WorkflowExecution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "stepIndex",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "stepTypeId",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "stepAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "sourceIsCaller",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "amountIsPercent",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct WorkflowStepInputAsset[]",
              "name": "inputAssets",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "argData",
              "type": "bytes"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            }
          ],
          "indexed": false,
          "internalType": "struct WorkflowStep",
          "name": "step",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stepAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "indexed": false,
          "internalType": "struct WorkflowStepResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "name": "WorkflowStepExecution",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "workflowRunnerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "sourceIsCaller",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "amountIsPercent",
                      "type": "bool"
                    },
                    {
                      "components": [
                        {
                          "internalType": "enum AssetType",
                          "name": "assetType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "assetAddress",
                          "type": "address"
                        }
                      ],
                      "internalType": "struct Asset",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct WorkflowStepInputAsset[]",
                  "name": "inputAssets",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                },
                {
                  "internalType": "int16",
                  "name": "nextStepIndex",
                  "type": "int16"
                }
              ],
              "internalType": "struct WorkflowStep[]",
              "name": "steps",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Workflow",
          "name": "workflow",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount",
          "name": "startingAsset",
          "type": "tuple"
        }
      ],
      "name": "continueWorkflow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eternalStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "workflowRunnerAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "stepTypeId",
                  "type": "uint16"
                },
                {
                  "internalType": "address",
                  "name": "stepAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "sourceIsCaller",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "amountIsPercent",
                      "type": "bool"
                    },
                    {
                      "components": [
                        {
                          "internalType": "enum AssetType",
                          "name": "assetType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "address",
                          "name": "assetAddress",
                          "type": "address"
                        }
                      ],
                      "internalType": "struct Asset",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct WorkflowStepInputAsset[]",
                  "name": "inputAssets",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes",
                  "name": "argData",
                  "type": "bytes"
                },
                {
                  "internalType": "int16",
                  "name": "nextStepIndex",
                  "type": "int16"
                }
              ],
              "internalType": "struct WorkflowStep[]",
              "name": "steps",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Workflow",
          "name": "workflow",
          "type": "tuple"
        }
      ],
      "name": "executeWorkflow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        }
      ],
      "name": "getStepAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUserProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upstreamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaabe2bdde25c394ea257eff84a42cdf805fc96fb4e7c22fca6be9d1057fa75db",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x43cA9bAe8dF108684E5EAaA720C25e1b32B0A075",
    "transactionIndex": 0,
    "gasUsed": "4915927",
    "logsBloom": "0x
    "blockHash": "0x7334da3447a7909f67ea5d391a4e4cbd612615667376c32fb03375522625a099",
    "transactionHash": "0xaabe2bdde25c394ea257eff84a42cdf805fc96fb4e7c22fca6be9d1057fa75db",
    "logs": [],
    "blockNumber": 17365298,
    "cumulativeGasUsed": "4915927",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5E5713a0d915701F464DEbb66015adD62B2e6AE9"
  ],
  "numDeployments": 1,
  "solcInputHash": "4710dbe2a1adc9f73e381c3cbf561516",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"frontDoorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"}],\"name\":\"RemainingAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount\",\"name\":\"startingAsset\",\"type\":\"tuple\"}],\"name\":\"WorkflowContinuation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"workflowRunnerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Workflow\",\"name\":\"workflow\",\"type\":\"tuple\"}],\"name\":\"WorkflowExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stepIndex\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"indexed\":false,\"internalType\":\"struct WorkflowStep\",\"name\":\"step\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"indexed\":false,\"internalType\":\"struct WorkflowStepResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"name\":\"WorkflowStepExecution\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"workflowRunnerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Workflow\",\"name\":\"workflow\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount\",\"name\":\"startingAsset\",\"type\":\"tuple\"}],\"name\":\"continueWorkflow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eternalStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"workflowRunnerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Workflow\",\"name\":\"workflow\",\"type\":\"tuple\"}],\"name\":\"executeWorkflow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"}],\"name\":\"getStepAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUserProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upstreamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RemainingAsset((uint8,address),uint256,uint256,uint256)\":{\"params\":{\"asset\":\"The asset.\",\"feeAmount\":\"The portion of the total amount that FMP will keep as a fee.\",\"totalAmount\":\"The total amount of the asset.\",\"userAmount\":\"The portion of the total amount that is sent to the user.\"}},\"WorkflowContinuation(uint256,address,((uint8,address),uint256))\":{\"params\":{\"nonce\":\"The nonce provided by the caller on the source chain, used to correlate the source chain workflow segment with this segment.\",\"startingAsset\":\"The asset that was transferred from the source chain to this chain\"}},\"WorkflowExecution(address,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]))\":{\"params\":{\"userAddress\":\"The user for which this workflow is executing.\",\"workflow\":\"The workflow.\"}},\"WorkflowStepExecution(uint16,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16),uint16,address,((uint8,address),uint256)[],(((uint8,address),uint256)[],((uint8,address),uint256)[],int16,int24))\":{\"params\":{\"inputAssetAmounts\":\"The input assets, with the absolute amount of each asset.\",\"result\":\"The result returned form the step invocation.\",\"step\":\"The step configuration.\",\"stepAddress\":\"The address of the step used for this invocation.\",\"stepIndex\":\"The index of the step in the Workflow.steps array.\",\"stepTypeId\":\"The logical id of the step (also repeated in the step param but duplicated here for convenience).\"}}},\"kind\":\"dev\",\"methods\":{\"executeWorkflow((address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]))\":{\"params\":{\"workflow\":\"The workflow to execute.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RemainingAsset((uint8,address),uint256,uint256,uint256)\":{\"notice\":\"This event is emitted after the workflow has completed, once for each asset ramining with a non-zero amount.\"},\"WorkflowContinuation(uint256,address,((uint8,address),uint256))\":{\"notice\":\"This event is emitted when this is a continuation of a workflow from another chain\"},\"WorkflowExecution(address,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]))\":{\"notice\":\"This event is emitted when a workflow execution begins.\"},\"WorkflowStepExecution(uint16,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16),uint16,address,((uint8,address),uint256)[],(((uint8,address),uint256)[],((uint8,address),uint256)[],int16,int24))\":{\"notice\":\"This event is emitted when immediately after invoking a step in the workflow.\"}},\"kind\":\"user\",\"methods\":{\"continueWorkflow(address,uint256,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]),((uint8,address),uint256))\":{\"notice\":\"Continue a workflow that started on a different chain.This is not callable by 3rd parties, only approved bridge integrations call this method.\"},\"executeWorkflow((address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]))\":{\"notice\":\"Initiate the execution of a workflow.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WorkflowRunner.sol\":\"WorkflowRunner\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowRunner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/Workflow.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @notice An interface defining the entry point to the engine for executing workflows.\\ninterface IWorkflowRunner {\\n    /// @notice Initiate the execution of a workflow.\\n    /// @param workflow The workflow to execute.\\n    function executeWorkflow(Workflow calldata workflow) external payable;\\n\\n    /// @notice Continue a workflow that started on a different chain.\\n    /// @notice This is not callable by 3rd parties, only approved bridge integrations call this method.\\n    function continueWorkflow(\\n        address userAddress,\\n        uint256 nonce,\\n        Workflow memory workflow,\\n        AssetAmount memory startingAsset\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x7f790c04fceebde44e528ef67509d8285ec1da9fa1254fe89ebcc0094662288d\",\"license\":\"MIT\"},\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/LibPercent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary LibPercent {\\n    /// Percents have 3 decimals of precision, so:\\n    /// 100% is represented as 100000 (100.000%)\\n    /// 1% is represented as 1000 (1.000%)\\n    /// 1 basis point (1/100th of a percent or 0.010% ) is 10\\n    /// the smallest possible percentage is 1/10th of a basis point, or 1 'decibip'\\n    /// @param value the value to take a percentage of\\n    /// @param percent the percentage in decibips\\n    function percentageOf(uint256 value, uint256 percent) internal pure returns (uint256) {\\n        require(0 <= percent && percent <= 100000, \\\"percent must be between 0 and 100000\\\");\\n        uint256 x = value * percent;\\n        return x / 100000;\\n    }\\n}\\n\",\"keccak256\":\"0x7ea6920edf326cd70ed863322b2343db8f76118886dbf5214340ccbee6f6c5b9\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Workflow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './WorkflowStep.sol';\\n\\n// The main workflow data structure.\\nstruct Workflow {\\n  // The address of the WorkflowRunner contract, allowing the caller to specify an older version of the runner.\\n  // If this is the zero address, the most current version of the runner will be used.\\n  // If a non-zero address is specified, it must be a whitelisted address of a previous WorkflowRunner contract.\\n  address workflowRunnerAddress;\\n  // The nodes in the directed graph of steps.\\n  // The start step is defined to be at index 0.\\n  // The 'edges' in the graph are defined within each WorkflowStep,\\n  // but can be overriden in the return value of a step.\\n  WorkflowStep[] steps;\\n}\\n\",\"keccak256\":\"0x072a08c653c65ca63534905aabbffe989c8749cefb2ef7d8cd9c12e0d92094af\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./WorkflowStepInputAsset.sol\\\";\\n\\n// Parameters for a workflow step\\nstruct WorkflowStep {\\n    // The logical identifer of the step (e.g., 10 represents WrapEtherStep).\\n    uint16 stepTypeId;\\n    // The contract address of a specific version of the action.\\n    // Individual step contracts may be upgraded over time, and this allows\\n    // workflows 'freeze' the version of contract for this step\\n    // A value of address(0) means use the latest and greatest version  of\\n    // this step based only on stepTypeId.\\n    address stepAddress;\\n    // The input assets to this step.\\n    WorkflowStepInputAsset[] inputAssets;\\n    // Additional step-specific parameters for this step, typically serialized in standard abi encoding.\\n    bytes argData;\\n    // The index of the next step in the directed graph of steps. (see the Workflow.steps array)\\n    int16 nextStepIndex;\\n}\\n\",\"keccak256\":\"0x6441da101e655b2593b54896d8698dad0efe3458e2ec5a28db65f264913d12c0\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepInputAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\n// an input asset to a WorkflowStep\\nstruct WorkflowStepInputAsset {\\n  // if true, the source of the asset is the caller of the workflow, otherwise it is the output of some previous step\\n  bool sourceIsCaller;\\n  // if true 'amount' is treated as a percent, with 4 decimals of precision (1000000 represents 100%)\\n  bool amountIsPercent;\\n  // the input asset\\n  Asset asset;\\n  // the amount of the input asset\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x2a478c09e1deb0268eba6ba5f3721d2e2a4b666b9f0735cfa0735dc9ebe70c4b\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/AssetBalanceBranch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/WorkflowStep.sol';\\nimport './LibAssetBalances.sol';\\nimport 'hardhat/console.sol';\\n\\nusing LibAssetBalances for LibAssetBalances.AssetBalances;\\n\\nenum Comparison {\\n  Equal,\\n  NotEqual,\\n  LessThan,\\n  LessThanOrEqual,\\n  GreaterThan,\\n  GreaterThanOrEqual\\n}\\n\\nstruct AssetBalanceBranchParams {\\n  Asset asset;\\n  Comparison comparison;\\n  uint256 amount;\\n  int16 ifYes;\\n}\\n\\nlibrary AssetBalanceBranch {\\n  function getNextStepIndex(\\n    WorkflowStep memory currentStep,\\n    LibAssetBalances.AssetBalances memory assetBalances\\n  ) internal view returns (int16) {\\n    AssetBalanceBranchParams memory args = abi.decode(currentStep.argData, (AssetBalanceBranchParams));\\n    Comparison comparision = args.comparison;\\n    uint256 amount = assetBalances.getAssetBalance(args.asset);\\n    uint256 argsAmount = args.amount;\\n    bool result;\\n    assembly {\\n      switch comparision\\n      case 0 {\\n        result := eq(amount, argsAmount)\\n      }\\n      case 1 {\\n        result := not(eq(amount, argsAmount))\\n      }\\n      case 2 {\\n        result := lt(amount, argsAmount)\\n      }\\n      case 3 {\\n        result := or(eq(amount, argsAmount), lt(amount, argsAmount))\\n      }\\n      case 4 {\\n        result := gt(amount, argsAmount)\\n      }\\n      case 5 {\\n        result := or(eq(amount, argsAmount), gt(amount, argsAmount))\\n      }\\n    }\\n    if (result) {\\n      console.log('AssetBalanceBranch returing ifYes');\\n      console.logInt(args.ifYes);\\n      return args.ifYes;\\n    }\\n    console.log('AssetBalanceBranch returing nextStepIndex');\\n    console.logInt(currentStep.nextStepIndex);\\n    return currentStep.nextStepIndex;\\n  }\\n}\\n\",\"keccak256\":\"0xe391cc196146c2c0e261f033c9c90e2e88a2d2b3d4ff5263c5791ac0ab501b4d\",\"license\":\"MIT\"},\"contracts/ChainBranch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/WorkflowStep.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct ChainBranchParams {\\n    uint256 chainId;\\n    int16 ifYes;\\n}\\n\\nlibrary ChainBranch {\\n    function getNextStepIndex(WorkflowStep memory currentStep) internal view returns (int16) {\\n        ChainBranchParams memory args = abi.decode(currentStep.argData, (ChainBranchParams));\\n        if (args.chainId == block.chainid) {\\n            console.log(\\\"returing ifYes\\\");\\n            console.logInt(args.ifYes);\\n            return args.ifYes;\\n        }\\n        console.log(\\\"returing nextStepIndex\\\");\\n        console.logInt(currentStep.nextStepIndex);\\n        return currentStep.nextStepIndex;\\n    }\\n}\\n\",\"keccak256\":\"0xe8fa87111802e48d927ff67e56217daef7b7defc573d694a2c39323828c686f4\",\"license\":\"MIT\"},\"contracts/EternalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\n\\nimport './Ownable.sol';\\n\\ncontract EternalStorage is Ownable {\\n  address internal writer;\\n\\n  modifier onlyWriter() {\\n    require(msg.sender == writer);\\n    _;\\n  }\\n\\n  constructor(address owner, address initialWriter) Ownable(owner) {\\n    writer = initialWriter;\\n  }\\n\\n  event StorageWriterChanged(address oldWriter, address newWriter);\\n\\n  function getWriter() public view returns (address) {\\n    return writer;\\n  }\\n\\n  function setWriter(address newWriter) public onlyOwner {\\n    emit StorageWriterChanged(writer, newWriter);\\n    writer = newWriter;\\n  }\\n\\n  mapping(bytes32 => uint256) uIntStorage;\\n  mapping(bytes32 => string) stringStorage;\\n  mapping(bytes32 => address) addressStorage;\\n  mapping(bytes32 => bytes) bytesStorage;\\n  mapping(bytes32 => bool) boolStorage;\\n  mapping(bytes32 => int256) intStorage;\\n\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n  using EnumerableMap for EnumerableMap.AddressToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n  using EnumerableMap for EnumerableMap.UintToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) enumerableMapUintToAddressMapStorage;\\n  mapping(bytes32 => EnumerableMap.AddressToUintMap) enumerableMapAddressToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToBytes32Map) enumerableMapBytes32ToBytes32MapStorage;\\n  mapping(bytes32 => EnumerableMap.UintToUintMap) enumerableMapUintToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToUintMap) enumerableMapBytes32ToUintMapStorage;\\n\\n  // *** Getter Methods ***\\n  function getUint(bytes32 _key) external view returns (uint256) {\\n    return uIntStorage[_key];\\n  }\\n\\n  function getString(bytes32 _key) external view returns (string memory) {\\n    return stringStorage[_key];\\n  }\\n\\n  function getAddress(bytes32 _key) external view returns (address) {\\n    return addressStorage[_key];\\n  }\\n\\n  function getBytes(bytes32 _key) external view returns (bytes memory) {\\n    return bytesStorage[_key];\\n  }\\n\\n  function getBool(bytes32 _key) external view returns (bool) {\\n    return boolStorage[_key];\\n  }\\n\\n  function getInt(bytes32 _key) external view returns (int256) {\\n    return intStorage[_key];\\n  }\\n\\n  // *** Setter Methods ***\\n  function setUint(bytes32 _key, uint256 _value) external onlyWriter {\\n    uIntStorage[_key] = _value;\\n  }\\n\\n  function setString(bytes32 _key, string memory _value) external onlyWriter {\\n    stringStorage[_key] = _value;\\n  }\\n\\n  function setAddress(bytes32 _key, address _value) external {\\n    addressStorage[_key] = _value;\\n  }\\n\\n  function setBytes(bytes32 _key, bytes memory _value) external onlyWriter {\\n    bytesStorage[_key] = _value;\\n  }\\n\\n  function setBool(bytes32 _key, bool _value) external onlyWriter {\\n    boolStorage[_key] = _value;\\n  }\\n\\n  function setInt(bytes32 _key, int256 _value) external onlyWriter {\\n    intStorage[_key] = _value;\\n  }\\n\\n  // *** Delete Methods ***\\n  function deleteUint(bytes32 _key) external onlyWriter {\\n    delete uIntStorage[_key];\\n  }\\n\\n  function deleteString(bytes32 _key) external onlyWriter {\\n    delete stringStorage[_key];\\n  }\\n\\n  function deleteAddress(bytes32 _key) external onlyWriter {\\n    delete addressStorage[_key];\\n  }\\n\\n  function deleteBytes(bytes32 _key) external onlyWriter {\\n    delete bytesStorage[_key];\\n  }\\n\\n  function deleteBool(bytes32 _key) external onlyWriter {\\n    delete boolStorage[_key];\\n  }\\n\\n  function deleteInt(bytes32 _key) external onlyWriter {\\n    delete intStorage[_key];\\n  }\\n\\n  // enumerable get\\n\\n  function getEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  // enumerable tryGet\\n\\n  function tryGetEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bool, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (bool, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (bool, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  // enumerable set\\n\\n  function setEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2, address _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapAddressToUint(bytes32 _key1, address _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2, bytes32 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapUintToUint(bytes32 _key1, uint256 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  // enumerable remove\\n\\n  function removeEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToAddressMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapAddressToUint(bytes32 _key1, address _key2) external onlyWriter {\\n    enumerableMapAddressToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToBytes32MapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  // enumerable contains\\n\\n  function containsEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  // enumerable length\\n\\n  function lengthEnumerableMapUintToAddress(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToAddressMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapAddressToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToBytes32(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapUintToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].length();\\n  }\\n\\n  // enumerable at\\n\\n  function atEnumerableMapUintToAddress(bytes32 _key1, uint256 _index) external view returns (uint256, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapAddressToUint(bytes32 _key1, uint256 _index) external view returns (address, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToBytes32(bytes32 _key1, uint256 _index) external view returns (bytes32, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapUintToUint(bytes32 _key1, uint256 _index) external view returns (uint256, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToUint(bytes32 _key1, uint256 _index) external view returns (bytes32, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].at(_index);\\n  }\\n}\\n\",\"keccak256\":\"0x17a2dde162f6ed01a95b2c64c4b5b345e7d0e8fcf4f51d1a861c199cd91fcbef\",\"license\":\"MIT\"},\"contracts/FreeMarketBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './Ownable.sol';\\n\\ncontract FreeMarketBase is Ownable {\\n  // TODO create getters\\n  address public eternalStorageAddress;\\n  address public upstreamAddress;\\n  bool public isUserProxy;\\n\\n  constructor(\\n    address owner,\\n    address eternalStorage,\\n    address upstream,\\n    bool userProxy\\n  ) Ownable(owner) {\\n    eternalStorageAddress = eternalStorage;\\n    upstreamAddress = upstream;\\n    isUserProxy = userProxy;\\n  }\\n}\\n\",\"keccak256\":\"0xeeac9b86b1e934d1a84316e3f006abb32375088cef75fe0a56e74e2e1e38b87e\",\"license\":\"MIT\"},\"contracts/FrontDoor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './EternalStorage.sol';\\nimport './Proxy.sol';\\nimport './LibStorageWriter.sol';\\n\\ncontract FrontDoor is Proxy {\\n  constructor() Proxy(msg.sender, address(new EternalStorage(msg.sender, address(0))), address(0x0), false) {\\n    bytes32 key = keccak256(abi.encodePacked('frontDoor'));\\n    StorageWriter.setAddress(eternalStorageAddress, key, address(this));\\n  }\\n\\n  event UpstreamChanged(address oldUpstream, address newUpstream);\\n  event UpstreamRemoved(address oldUpstream);\\n\\n  function setUpstream(address newUpstream) public onlyOwner {\\n    address oldUpstream = upstreamAddress;\\n    upstreamAddress = newUpstream;\\n    emit UpstreamChanged(oldUpstream, newUpstream);\\n  }\\n}\\n\",\"keccak256\":\"0x62fda07ff75e261b1fbac980b48508481f205c99214206cabdbde790e76f40c8\",\"license\":\"MIT\"},\"contracts/IHasUpstream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IHasUpstream {\\n  function getUpstream() external view returns (address);\\n}\\n\",\"keccak256\":\"0xef83d78a64e9c3cbd2b9238523af2a9a03abc8c42890e57a1ffeefddd7999be3\",\"license\":\"MIT\"},\"contracts/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/Asset.sol\\\";\\n\\nlibrary LibAsset {\\n    function encodeAsset(Asset memory asset) internal pure returns (uint256) {\\n        return encodeAsset(asset.assetType, asset.assetAddress);\\n    }\\n\\n    function encodeAsset(AssetType assetType, address assetAddress) internal pure returns (uint256) {\\n        uint160 a1 = uint160(assetAddress);\\n        uint256 a2 = uint256(a1);\\n        uint256 a3 = a2 << 16;\\n        uint256 t1 = uint256(assetType);\\n        uint256 a4 = a3 | t1;\\n        return a4;\\n        // return (uint256(uint160(assetAddress)) << 16) & uint256(assetType);\\n    }\\n\\n    function decodeAsset(uint256 assetInt) internal pure returns (Asset memory) {\\n        AssetType assetType = AssetType(uint16(assetInt));\\n        address addr = address(uint160(assetInt >> 16));\\n        return Asset(assetType, addr);\\n    }\\n}\\n\",\"keccak256\":\"0x1d6e47bd0553b08d7d3f8a47e59cb3a0d62840bb94cdbbc90e35d413805b1cef\",\"license\":\"MIT\"},\"contracts/LibAssetBalances.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"./LibAsset.sol\\\";\\n\\nusing Strings for uint256;\\n\\nlibrary LibAssetBalances {\\n    uint8 constant MAX_ENTRIES = 10;\\n\\n    struct AssetBalance {\\n        uint256 asset;\\n        uint256 balance;\\n    }\\n\\n    struct AssetBalances {\\n        AssetBalance[MAX_ENTRIES] entries;\\n        uint8 end;\\n    }\\n\\n    function getAssetBalance(AssetBalances memory entrySet, Asset memory asset) internal pure returns (uint256) {\\n        AssetBalance[MAX_ENTRIES] memory entries = entrySet.entries;\\n        uint256 assetAsInt = LibAsset.encodeAsset(asset);\\n        for (uint16 i = 0; i < entrySet.end; ++i) {\\n            if (entries[i].asset == assetAsInt) {\\n                return entries[i].balance;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function credit(AssetBalances memory entrySet, uint256 assetAsInt, uint256 amount) internal pure {\\n        if (amount > 0) {\\n            uint256 index = getAssetIndex(entrySet, assetAsInt);\\n            (bool success, uint256 newBalance) = SafeMath.tryAdd(entrySet.entries[index].balance, amount);\\n            if (!success) {\\n                revertArithmetic(\\\"credit\\\", assetAsInt, entrySet.entries[index].balance, amount);\\n            }\\n            updateBalance(entrySet, index, newBalance);\\n        }\\n    }\\n\\n    function debit(AssetBalances memory entrySet, uint256 assetAsInt, uint256 amount) internal pure {\\n        if (amount > 0) {\\n            uint256 index = getAssetIndex(entrySet, assetAsInt);\\n            (bool success, uint256 newBalance) = SafeMath.trySub(entrySet.entries[index].balance, amount);\\n            if (!success) {\\n                revertArithmetic(\\\"debit\\\", assetAsInt, entrySet.entries[index].balance, amount);\\n            }\\n            updateBalance(entrySet, index, newBalance);\\n        }\\n    }\\n\\n    function revertArithmetic(string memory op, uint256 assetAsInt, uint256 a, uint256 b) internal pure {\\n        Asset memory asset = LibAsset.decodeAsset(assetAsInt);\\n        revert(\\n            string.concat(\\n                op,\\n                \\\" assetType=\\\",\\n                uint256(asset.assetType).toString(),\\n                \\\" assetAddress=\\\",\\n                uint256(uint160(asset.assetAddress)).toHexString(),\\n                \\\" values \\\",\\n                a.toString(),\\n                \\\", \\\",\\n                b.toString()\\n            )\\n        );\\n    }\\n\\n    function credit(AssetBalances memory entrySet, Asset memory asset, uint256 amount) internal pure {\\n        credit(entrySet, LibAsset.encodeAsset(asset), amount);\\n    }\\n\\n    function debit(AssetBalances memory entrySet, Asset memory asset, uint256 amount) internal pure {\\n        debit(entrySet, LibAsset.encodeAsset(asset), amount);\\n    }\\n\\n    function updateBalance(AssetBalances memory entrySet, uint256 index, uint256 newBalance)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (newBalance == 0) {\\n            removeAt(entrySet, index);\\n        } else {\\n            entrySet.entries[index].balance = newBalance;\\n        }\\n        return newBalance;\\n    }\\n\\n    function removeAt(AssetBalances memory entrySet, uint256 index) internal pure {\\n        entrySet.entries[index] = entrySet.entries[entrySet.end - 1];\\n        --entrySet.end;\\n    }\\n\\n    function getAssetIndex(AssetBalances memory entrySet, Asset memory asset) internal pure returns (uint256) {\\n        uint256 assetAsInt = LibAsset.encodeAsset(asset);\\n        return getAssetIndex(entrySet, assetAsInt);\\n    }\\n\\n    function getAssetIndex(AssetBalances memory entrySet, uint256 assetAsInt) internal pure returns (uint256) {\\n        for (uint256 i = 0; i < entrySet.end; ++i) {\\n            if (entrySet.entries[i].asset == assetAsInt) {\\n                return i;\\n            }\\n        }\\n        require(entrySet.end < MAX_ENTRIES, \\\"too many token balances\\\");\\n        entrySet.entries[entrySet.end] = AssetBalance(assetAsInt, 0);\\n        return entrySet.end++;\\n    }\\n\\n    function getAssetCount(AssetBalances memory entrySet) internal pure returns (uint8) {\\n        return entrySet.end;\\n    }\\n\\n    function getAssetAt(AssetBalances memory entrySet, uint8 index) internal pure returns (AssetAmount memory) {\\n        require(index < entrySet.end, \\\"index out of bounds while accessing asset balances\\\");\\n        Asset memory a = LibAsset.decodeAsset(entrySet.entries[index].asset);\\n        return AssetAmount(a, entrySet.entries[index].balance);\\n    }\\n}\\n\",\"keccak256\":\"0xab7fb973aeaefc09ace2979f641e437875a9bc28a2c4145a8f9bf0b4aebfdcd2\",\"license\":\"MIT\"},\"contracts/LibConfigReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './EternalStorage.sol';\\n\\nlibrary LibConfigReader {\\n  // latestStepAddresses maps stepTypeId to latest and greatest version of that step\\n  bytes32 constant latestStepAddresses = 0xc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd; // keccak256('latestActionAddresses')\\n  bytes32 constant runnerAddresses = 0x32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f5; // keccak256('runnerAddresses')\\n\\n  function getStepAddressInternal(address eternalStorageAddress, uint16 stepTypeId) internal view returns (address) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.getEnumerableMapUintToAddress(latestStepAddresses, stepTypeId);\\n  }\\n\\n  function getStepWhitelistKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked('stepWhiteList', stepTypeId));\\n  }\\n\\n  function getStepBlacklistKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked('stepBlackList', stepTypeId));\\n  }\\n\\n  function isStepAddressWhitelisted(address eternalStorageAddress, uint16 stepTypeId, address stepAddress) internal view returns (bool) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.containsEnumerableMapAddressToUint(getStepWhitelistKey(stepTypeId), stepAddress);\\n  }\\n}\\n\",\"keccak256\":\"0xe12ff87bc6fafc10f9d90a736e3a4a3fd70e59a01dd17faafe2a3aca7f2f178b\",\"license\":\"MIT\"},\"contracts/LibStorageWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary StorageWriter {\\n    // *** Setter Methods ***\\n    function setUint(address storageAddr, bytes32 key, uint256 value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setUint(bytes32,uint256)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setString(address storageAddr, bytes32 key, string memory value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setAddress(address storageAddr, bytes32 key, address value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setAddress(bytes32,address)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setBytes(address storageAddr, bytes32 key, bytes memory value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setBytes(bytes32,bytes memory)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setBool(address storageAddr, bytes32 key, bool value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setBool(bytes32,bool)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setInt(address storageAddr, bytes32 key, int256 value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setInt(bytes32,int256)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    // *** Delete Methods ***\\n    function deleteUint(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"deleteUint(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteString(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteAddress(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteBytes(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteBool(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteInt(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function setStepAddress(address storageAddr, uint16 stepTypeId, address stepAddress) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setStepAddress(uint16,address)\\\", stepTypeId, stepAddress));\\n        require(success, string(returnData));\\n    }\\n}\\n\",\"keccak256\":\"0xccede755458ec2a36261519cf06894f0bf1db0128212f59fb18e82ba02f696a7\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ncontract Ownable {\\n  address payable public owner;\\n\\n  constructor(address initialOwner) {\\n    owner = payable(initialOwner);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  event LogNewOwner(address sender, address newOwner);\\n\\n  function setOwner(address payable newOwner) external onlyOwner {\\n    require(newOwner != address(0));\\n    owner = newOwner;\\n    emit LogNewOwner(msg.sender, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0xa798ec89af451652edfa77d05689d3330f503ed4bf9e01d6620d6b2c6a617544\",\"license\":\"MIT\"},\"contracts/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './IHasUpstream.sol';\\nimport './FreeMarketBase.sol';\\nimport './EternalStorage.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract Proxy is FreeMarketBase, IHasUpstream {\\n  bytes32 constant runnerAddresses = 0x32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f5; // keccak256('runnerAddresses')\\n\\n  constructor(\\n    address owner,\\n    address storageAddress,\\n    address upstream,\\n    bool userProxy\\n  ) FreeMarketBase(owner, storageAddress, upstream, userProxy) {}\\n\\n  function getUpstream() external view virtual returns (address) {\\n    return upstreamAddress;\\n  }\\n\\n  function resolveUpstream() internal view returns (address addr) {\\n    address upstreamFromArgs = getAddressFromCalldata();\\n    // console.log('upstreamFromArgs', upstreamFromArgs);\\n    if (upstreamFromArgs != address(0)) {\\n      // console.log('upstreamFromArgs != address(0)');\\n      EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n      require(eternalStorage.containsEnumerableMapAddressToUint(runnerAddresses, upstreamFromArgs), 'provided upstream not whitelisted');\\n      return upstreamFromArgs;\\n    } else {\\n      // console.log('upstreamFromArgs == address(0)');\\n    }\\n    return upstreamAddress;\\n  }\\n\\n  function getAddressFromCalldata() internal pure returns (address addr) {\\n    assembly {\\n      let offset := add(4, calldataload(4))\\n      addr := calldataload(offset)\\n    }\\n  }\\n\\n  /// @dev this forwards all calls generically to upstream, only the owner can invoke this\\n  fallback() external payable {\\n    console.log('fallback', resolveUpstream());\\n    address upstream = resolveUpstream();\\n    console.log('upstream', upstream);\\n    _delegate(upstream);\\n  }\\n\\n  /// @dev this allows this contract to receive ETH\\n  receive() external payable {\\n    // noop\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   */\\n  function _delegate(address upstr) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), upstr, 0, calldatasize(), 0, 0)\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n      // let ptr := mload(0x40)\\n      // calldatacopy(ptr, 0, calldatasize())\\n      // let result := delegatecall(gas(), implementation, ptr, calldatasize(), 0, 0)\\n      // let size := returndatasize()\\n      // returndatacopy(ptr, 0, size)\\n      // switch result\\n      // case 0 {\\n      //   revert(ptr, size)\\n      // }\\n      // default {\\n      //   return(ptr, size)\\n      // }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7943111c3193c37c1a35f1bb222cf9c44c610b7d7111b18ed49dbeb62b089d81\",\"license\":\"MIT\"},\"contracts/WorkflowRunner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '@freemarket/core/contracts/model/Workflow.sol';\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\nimport '@freemarket/core/contracts/LibPercent.sol';\\nimport '@freemarket/core/contracts/IWorkflowRunner.sol';\\nimport './FrontDoor.sol';\\nimport './LibAssetBalances.sol';\\nimport './LibStorageWriter.sol';\\nimport './EternalStorage.sol';\\nimport './LibAsset.sol';\\nimport './ChainBranch.sol';\\nimport './AssetBalanceBranch.sol';\\nimport 'hardhat/console.sol';\\nimport './LibConfigReader.sol';\\n\\nuint16 constant STEP_TYPE_ID_CHAIN_BRANCH = 1;\\nuint16 constant STEP_TYPE_ID_ASSET_AMOUNT_BRANCH = 2;\\n\\ncontract WorkflowRunner is FreeMarketBase, ReentrancyGuard, IWorkflowRunner {\\n  constructor(\\n    address payable frontDoorAddress\\n  )\\n    FreeMarketBase(\\n      msg.sender, // owner\\n      FrontDoor(frontDoorAddress).eternalStorageAddress(), // eternal storage address\\n      address(0), // upstream (this doesn't have one)\\n      false // isUserProxy\\n    )\\n  {}\\n\\n  /// @notice This event is emitted when a workflow execution begins.\\n  /// @param userAddress The user for which this workflow is executing.\\n  /// @param workflow The workflow.\\n  event WorkflowExecution(address userAddress, Workflow workflow);\\n\\n  /// @notice This event is emitted when immediately after invoking a step in the workflow.\\n  /// @param stepIndex The index of the step in the Workflow.steps array.\\n  /// @param step The step configuration.\\n  /// @param stepTypeId The logical id of the step (also repeated in the step param but duplicated here for convenience).\\n  /// @param stepAddress The address of the step used for this invocation.\\n  /// @param inputAssetAmounts The input assets, with the absolute amount of each asset.\\n  /// @param result The result returned form the step invocation.\\n  event WorkflowStepExecution(\\n    uint16 stepIndex,\\n    WorkflowStep step,\\n    uint16 stepTypeId,\\n    address stepAddress,\\n    AssetAmount[] inputAssetAmounts,\\n    WorkflowStepResult result\\n  );\\n\\n  /// @notice This event is emitted after the workflow has completed, once for each asset ramining with a non-zero amount.\\n  /// @param asset The asset.\\n  /// @param totalAmount The total amount of the asset.\\n  /// @param feeAmount The portion of the total amount that FMP will keep as a fee.\\n  /// @param userAmount The portion of the total amount that is sent to the user.\\n  event RemainingAsset(Asset asset, uint256 totalAmount, uint256 feeAmount, uint256 userAmount);\\n\\n  /// @notice This event is emitted when this is a continuation of a workflow from another chain\\n  /// @param nonce The nonce provided by the caller on the source chain, used to correlate the source chain workflow segment with this segment.\\n  /// @param startingAsset The asset that was transferred from the source chain to this chain\\n  event WorkflowContinuation(uint256 nonce, address userAddress, AssetAmount startingAsset);\\n\\n  using LibAssetBalances for LibAssetBalances.AssetBalances;\\n\\n  function getStepAddress(uint16 stepTypeId) external view returns (address) {\\n    return LibConfigReader.getStepAddressInternal(eternalStorageAddress, stepTypeId);\\n  }\\n\\n  function executeWorkflow(Workflow calldata workflow) external payable nonReentrant {\\n    AssetAmount memory startingAssets = AssetAmount(Asset(AssetType.Native, address(0)), 0);\\n    executeWorkflow(msg.sender, workflow, startingAssets);\\n  }\\n\\n  function executeWorkflow(address userAddress, Workflow memory workflow, AssetAmount memory startingAsset) internal {\\n    emit WorkflowExecution(userAddress, workflow);\\n    // workflow starts on the step with index 0\\n    uint16 currentStepIndex = 0;\\n    // keep track of asset balances\\n    LibAssetBalances.AssetBalances memory assetBalances;\\n    // credit ETH if sent with this call\\n    if (msg.value != 0) {\\n      // TODO add event\\n      console.log('crediting native', msg.value);\\n      assetBalances.credit(0, msg.value);\\n    }\\n    // credit any starting assets (if this is a continutation workflow with assets sent by a bridge)\\n    if (startingAsset.amount > 0) {\\n      assetBalances.credit(startingAsset.asset, startingAsset.amount);\\n    }\\n    if (workflow.steps.length > 0) {\\n      while (true) {\\n        // prepare to invoke the step\\n        WorkflowStep memory currentStep = workflow.steps[currentStepIndex];\\n\\n        // ChainBranch and AssetAmountBranch are special\\n        if (currentStep.stepTypeId == STEP_TYPE_ID_CHAIN_BRANCH || currentStep.stepTypeId == STEP_TYPE_ID_ASSET_AMOUNT_BRANCH) {\\n          int16 nextStepIndex;\\n          if (currentStep.stepTypeId == STEP_TYPE_ID_CHAIN_BRANCH) {\\n            nextStepIndex = ChainBranch.getNextStepIndex(currentStep);\\n          } else {\\n            nextStepIndex = AssetBalanceBranch.getNextStepIndex(currentStep, assetBalances);\\n          }\\n          if (nextStepIndex == -1) {\\n            break;\\n          }\\n          currentStepIndex = uint16(nextStepIndex);\\n          continue;\\n        }\\n\\n        address stepAddress = resolveStepAddress(currentStep);\\n        AssetAmount[] memory inputAssetAmounts = resolveAmounts(userAddress, assetBalances, currentStep.inputAssets);\\n\\n        console.log('calling id', currentStep.stepTypeId);\\n        console.log('calling addr', stepAddress);\\n        console.log('assetAmounts', inputAssetAmounts.length);\\n        for (uint256 i = 0; i < inputAssetAmounts.length; ++i) {\\n          console.log('  input type', inputAssetAmounts[i].asset.assetType == AssetType.ERC20 ? 'erc20' : 'native');\\n          console.log('  input addr', inputAssetAmounts[i].asset.assetAddress);\\n          console.log('  input amount', inputAssetAmounts[i].amount);\\n        }\\n\\n        // invoke the step\\n        WorkflowStepResult memory stepResult = invokeStep(stepAddress, inputAssetAmounts, currentStep.argData);\\n\\n        console.log('stepResult.ouptputs', stepResult.outputAssetAmounts.length);\\n        for (uint256 i = 0; i < stepResult.outputAssetAmounts.length; ++i) {\\n          console.log('output amount', stepResult.outputAssetAmounts[i].amount);\\n        }\\n\\n        emit WorkflowStepExecution(currentStepIndex, currentStep, currentStep.stepTypeId, stepAddress, inputAssetAmounts, stepResult);\\n\\n        // debit input assets\\n        console.log('result inputs', stepResult.inputAssetAmounts.length);\\n        for (uint256 i = 0; i < stepResult.inputAssetAmounts.length; ++i) {\\n          console.log('  debit', i);\\n          console.log('  debit addr', stepResult.inputAssetAmounts[i].asset.assetAddress);\\n          console.log('  debit amt', stepResult.inputAssetAmounts[i].amount);\\n          assetBalances.debit(stepResult.inputAssetAmounts[i].asset, stepResult.inputAssetAmounts[i].amount);\\n        }\\n        // credit output assets\\n        console.log('result outputs', stepResult.outputAssetAmounts.length);\\n        for (uint256 i = 0; i < stepResult.outputAssetAmounts.length; ++i) {\\n          console.log('  credit', i);\\n          console.log('  credit addr', stepResult.outputAssetAmounts[i].asset.assetAddress);\\n          console.log('  credit amt', stepResult.outputAssetAmounts[i].amount);\\n          assetBalances.credit(stepResult.outputAssetAmounts[i].asset, stepResult.outputAssetAmounts[i].amount);\\n        }\\n        console.log('currentStep.nextStepIndex');\\n        console.logInt(currentStep.nextStepIndex);\\n        if (currentStep.nextStepIndex == -1) {\\n          break;\\n        }\\n        currentStepIndex = uint16(currentStep.nextStepIndex);\\n      }\\n    }\\n    refundUser(userAddress, assetBalances);\\n  }\\n\\n  function refundUser(address userAddress, LibAssetBalances.AssetBalances memory assetBalances) internal {\\n    console.log('entering refundUser, numAssets=', assetBalances.getAssetCount());\\n    for (uint8 i = 0; i < assetBalances.getAssetCount(); ++i) {\\n      AssetAmount memory ab = assetBalances.getAssetAt(i);\\n      console.log('  refunding asset', i);\\n      console.log('    type', ab.asset.assetType == AssetType.ERC20 ? 'erc20' : 'native');\\n      console.log('    addr', ab.asset.assetAddress);\\n      console.log('    amt', ab.amount);\\n      Asset memory asset = ab.asset;\\n      uint256 feeAmount = LibPercent.percentageOf(ab.amount, 300);\\n      uint256 userAmount = ab.amount - feeAmount;\\n      emit RemainingAsset(asset, ab.amount, feeAmount, userAmount);\\n      if (asset.assetType == AssetType.Native) {\\n        require(address(this).balance >= ab.amount, 'computed native balance is greater than actual balance');\\n        payable(userAddress).transfer(userAmount);\\n      } else if (asset.assetType == AssetType.ERC20) {\\n        IERC20 token = IERC20(asset.assetAddress);\\n        uint256 balance = token.balanceOf(address(this));\\n        console.log('  refunding erc20 balance', balance);\\n        SafeERC20.safeTransfer(token, userAddress, userAmount);\\n      } else {\\n        revert('unknown asset type in assetBalances');\\n      }\\n    }\\n  }\\n\\n  function invokeStep(\\n    address stepAddress,\\n    AssetAmount[] memory inputAssetAmounts,\\n    bytes memory data\\n  ) internal returns (WorkflowStepResult memory) {\\n    (bool success, bytes memory returnData) = stepAddress.delegatecall(\\n      abi.encodeWithSelector(IWorkflowStep.execute.selector, inputAssetAmounts, data)\\n    );\\n    require(success, string(returnData));\\n    return abi.decode(returnData, (WorkflowStepResult));\\n  }\\n\\n  function resolveStepAddress(WorkflowStep memory currentStep) internal view returns (address) {\\n    if (currentStep.stepAddress == address(0)) {\\n      return LibConfigReader.getStepAddressInternal(eternalStorageAddress, currentStep.stepTypeId);\\n    }\\n    // ensure given address is in the whitelist for given stepTypeId\\n    require(\\n      LibConfigReader.isStepAddressWhitelisted(eternalStorageAddress, currentStep.stepTypeId, currentStep.stepAddress),\\n      'step address not in white list'\\n    );\\n    return currentStep.stepAddress;\\n  }\\n\\n  function resolveAmounts(\\n    address userAddress,\\n    LibAssetBalances.AssetBalances memory assetBalances,\\n    WorkflowStepInputAsset[] memory inputAssets\\n  ) internal returns (AssetAmount[] memory) {\\n    AssetAmount[] memory rv = new AssetAmount[](inputAssets.length);\\n    for (uint256 i = 0; i < inputAssets.length; ++i) {\\n      WorkflowStepInputAsset memory stepInputAsset = inputAssets[i];\\n      rv[i].asset = stepInputAsset.asset;\\n      if (stepInputAsset.sourceIsCaller) {\\n        transferFromCaller(userAddress, stepInputAsset, assetBalances);\\n      }\\n      uint256 currentWorkflowAssetBalance = assetBalances.getAssetBalance(stepInputAsset.asset);\\n      if (stepInputAsset.amountIsPercent) {\\n        rv[i].amount = LibPercent.percentageOf(currentWorkflowAssetBalance, stepInputAsset.amount);\\n        // rv[i].amount = 1;\\n      } else {\\n        require(currentWorkflowAssetBalance <= stepInputAsset.amount, 'absolute amount exceeds workflow asset balance');\\n        rv[i].amount = stepInputAsset.amount;\\n      }\\n    }\\n    return rv;\\n  }\\n\\n  function transferFromCaller(\\n    address userAddress,\\n    WorkflowStepInputAsset memory inputAssetAmount,\\n    LibAssetBalances.AssetBalances memory assetBalances\\n  ) internal {\\n    require(inputAssetAmount.amountIsPercent == false, 'cannot use percentage for amount of asset from caller');\\n    if (inputAssetAmount.asset.assetType == AssetType.Native) {\\n      // it's not possible to 'trasfer from caller' for native assets\\n      // assetBalances should have been initialized with the correct amount\\n    } else if (inputAssetAmount.asset.assetType == AssetType.ERC20) {\\n      IERC20 token = IERC20(inputAssetAmount.asset.assetAddress);\\n      uint256 allowance = token.allowance(userAddress, address(this));\\n      require(allowance >= inputAssetAmount.amount, 'insufficient allowance for erc20');\\n      SafeERC20.safeTransferFrom(token, userAddress, address(this), inputAssetAmount.amount);\\n      assetBalances.credit(inputAssetAmount.asset, inputAssetAmount.amount);\\n    } else {\\n      revert('unknown asset type in inputAssetAmounts');\\n    }\\n  }\\n\\n  function continueWorkflow(\\n    address userAddress,\\n    uint256 nonce,\\n    Workflow memory workflow,\\n    AssetAmount memory startingAsset\\n  ) external payable {\\n    emit WorkflowContinuation(nonce, userAddress, startingAsset);\\n    executeWorkflow(userAddress, workflow, startingAsset);\\n  }\\n}\\n\",\"keccak256\":\"0x054592c1f8c17488c97856500de63e47b2d42952295c0600984ea55ad3dd164f\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200599238038062005992833981810160405281019062000037919062000208565b338173ffffffffffffffffffffffffffffffffffffffff1663384782fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000084573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000aa91906200027f565b60008083806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260146101000a81548160ff02191690831515021790555050505050600160038190555050620002b1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d082620001a3565b9050919050565b620001e281620001c3565b8114620001ee57600080fd5b50565b6000815190506200020281620001d7565b92915050565b6000602082840312156200022157620002206200019e565b5b60006200023184828501620001f1565b91505092915050565b60006200024782620001a3565b9050919050565b62000259816200023a565b81146200026557600080fd5b50565b60008151905062000279816200024e565b92915050565b6000602082840312156200029857620002976200019e565b5b6000620002a88482850162000268565b91505092915050565b6156d180620002c16000396000f3fe60806040526004361061007b5760003560e01c806352faae301161004e57806352faae301461011b5780638da5cb5b14610137578063f903397714610162578063ff05c2a81461019f5761007b565b806313af40351461008057806332b56aaf146100a957806334192642146100d4578063384782fe146100f0575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a2919061314d565b6101ca565b005b3480156100b557600080fd5b506100be6102d7565b6040516100cb919061319b565b60405180910390f35b6100ee60048036038101906100e99190613829565b6102fd565b005b3480156100fc57600080fd5b50610105610349565b604051610112919061319b565b60405180910390f35b610135600480360381019061013091906138d0565b61036f565b005b34801561014357600080fd5b5061014c6103ef565b6040516101599190613928565b60405180910390f35b34801561016e57600080fd5b5061018960048036038101906101849190613943565b610413565b604051610196919061319b565b60405180910390f35b3480156101ab57600080fd5b506101b4610448565b6040516101c1919061397f565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361025b57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd933826040516102cc9291906139f9565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f5fb75a336a44ceb6f98a3b8492da063de0d7407916807b030a6703bc96c3871283858360405161033093929190613b24565b60405180910390a161034384838361045b565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610377610e0c565b600060405180604001604052806040518060400160405280600060028111156103a3576103a2613a31565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152508152602001600081525090506103e333836103dd90613b5b565b8361045b565b506103ec610e5b565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610441600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610e65565b9050919050565b600260149054906101000a900460ff1681565b7fc8094e88bd093f5d416a30bcc4c54a73a490d161daf321f6f5df19920a76d67a838360405161048c929190613e9a565b60405180910390a1600061049e612fe0565b600034146104fc576104e56040518060400160405280601081526020017f637265646974696e67206e61746976650000000000000000000000000000000081525034610f13565b6104fb60003483610faf9092919063ffffffff16565b5b6000836020015111156105275761052683600001518460200151836110719092919063ffffffff16565b5b60008460200151511115610dfb575b600115610dfa57600084602001518361ffff168151811061055a57610559613eca565b5b60200260200101519050600161ffff16816000015161ffff16148061058b5750600261ffff16816000015161ffff16145b156105fe576000600161ffff16826000015161ffff16036105b6576105af82611089565b90506105c3565b6105c08284611168565b90505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160010b036105f4575050610dfa565b8093505050610536565b6000610609826112b8565b9050600061061c888585604001516113a9565b90506106656040518060400160405280600a81526020017f63616c6c696e6720696400000000000000000000000000000000000000000000815250846000015161ffff16610f13565b6106a46040518060400160405280600c81526020017f63616c6c696e672061646472000000000000000000000000000000000000000081525083611556565b6106e46040518060400160405280600c81526020017f6173736574416d6f756e747300000000000000000000000000000000000000008152508251610f13565b60005b81518110156108bd576107ee6040518060400160405280600c81526020017f2020696e707574207479706500000000000000000000000000000000000000008152506001600281111561073d5761073c613a31565b5b8484815181106107505761074f613eca565b5b60200260200101516000015160000151600281111561077257610771613a31565b5b146107b2576040518060400160405280600681526020017f6e617469766500000000000000000000000000000000000000000000000000008152506107e9565b6040518060400160405280600581526020017f65726332300000000000000000000000000000000000000000000000000000008152505b6115f2565b61084f6040518060400160405280600c81526020017f2020696e7075742061646472000000000000000000000000000000000000000081525083838151811061083a57610839613eca565b5b60200260200101516000015160200151611556565b6108ac6040518060400160405280600e81526020017f2020696e70757420616d6f756e7400000000000000000000000000000000000081525083838151811061089b5761089a613eca565b5b602002602001015160200151610f13565b806108b690613f28565b90506106e7565b5060006108cf8383866060015161168e565b90506109156040518060400160405280601381526020017f73746570526573756c742e6f7570747075747300000000000000000000000000815250826020015151610f13565b60005b816020015151811015610997576109866040518060400160405280600d81526020017f6f757470757420616d6f756e74000000000000000000000000000000000000008152508360200151838151811061097557610974613eca565b5b602002602001015160200151610f13565b8061099090613f28565b9050610918565b507f1754cdb05aef18c5f0e96033a1ff1dc6b452412b60d5699a299da58ab09d1276868586600001518686866040516109d5969594939291906141cf565b60405180910390a1610a216040518060400160405280600d81526020017f726573756c7420696e7075747300000000000000000000000000000000000000815250826000015151610f13565b60005b816000015151811015610ba057610a706040518060400160405280600781526020017f202064656269740000000000000000000000000000000000000000000000000081525082610f13565b610ad56040518060400160405280600c81526020017f202064656269742061646472000000000000000000000000000000000000000081525083600001518381518110610ac057610abf613eca565b5b60200260200101516000015160200151611556565b610b366040518060400160405280600b81526020017f2020646562697420616d7400000000000000000000000000000000000000000081525083600001518381518110610b2557610b24613eca565b5b602002602001015160200151610f13565b610b8f82600001518281518110610b5057610b4f613eca565b5b60200260200101516000015183600001518381518110610b7357610b72613eca565b5b602002602001015160200151886117dd9092919063ffffffff16565b80610b9990613f28565b9050610a24565b50610be56040518060400160405280600e81526020017f726573756c74206f757470757473000000000000000000000000000000000000815250826020015151610f13565b60005b816020015151811015610d6457610c346040518060400160405280600881526020017f202063726564697400000000000000000000000000000000000000000000000081525082610f13565b610c996040518060400160405280600d81526020017f202063726564697420616464720000000000000000000000000000000000000081525083602001518381518110610c8457610c83613eca565b5b60200260200101516000015160200151611556565b610cfa6040518060400160405280600c81526020017f202063726564697420616d74000000000000000000000000000000000000000081525083602001518381518110610ce957610ce8613eca565b5b602002602001015160200151610f13565b610d5382602001518281518110610d1457610d13613eca565b5b60200260200101516000015183602001518381518110610d3757610d36613eca565b5b602002602001015160200151886110719092919063ffffffff16565b80610d5d90613f28565b9050610be8565b50610da36040518060400160405280601981526020017f63757272656e74537465702e6e65787453746570496e646578000000000000008152506117f5565b610db3846080015160010b61188e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff846080015160010b03610dea5750505050610dfa565b8360800151955050505050610536565b5b610e058582611927565b5050505050565b600260035403610e51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e48906142a2565b60405180910390fd5b6002600381905550565b6001600381905550565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b856040518363ffffffff1660e01b8152600401610ec992919061430c565b602060405180830381865afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a919061434a565b91505092915050565b610fab8282604051602401610f299291906143bb565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b5050565b600081111561106c576000610fc48484611e0d565b9050600080610ff2866000015184600a8110610fe357610fe2613eca565b5b60200201516020015185611f15565b915091508161105c5761105b6040518060400160405280600681526020017f637265646974000000000000000000000000000000000000000000000000000081525086886000015186600a811061104c5761104b613eca565b5b60200201516020015187611f44565b5b611067868483612005565b505050505b505050565b6110848361107e8461204d565b83610faf565b505050565b60008082606001518060200190518101906110a49190614465565b90504681600001510361110c576110ef6040518060400160405280600e81526020017f7265747572696e672069665965730000000000000000000000000000000000008152506117f5565b6110ff816020015160010b61188e565b8060200151915050611163565b61114a6040518060400160405280601681526020017f7265747572696e67206e65787453746570496e646578000000000000000000008152506117f5565b61115a836080015160010b61188e565b82608001519150505b919050565b60008083606001518060200190518101906111839190614594565b905060008160200151905060006111a783600001518661206890919063ffffffff16565b9050600083604001519050600083600081146111ea57600181146111f457600281146111ff5760038114611209576004811461121757600581146112215761122b565b828414915061122b565b82841419915061122b565b828410915061122b565b82841083851417915061122b565b828411915061122b565b8284118385141791505b50801561127457611253604051806060016040528060218152602001615652602191396117f5565b611263856060015160010b61188e565b8460600151955050505050506112b2565b611295604051806060016040528060298152602001615673602991396117f5565b6112a5886080015160010b61188e565b8760800151955050505050505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff160361132857611321600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360000151610e65565b90506113a4565b61135d600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600001518460200151612104565b61139c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113939061460d565b60405180910390fd5b816020015190505b919050565b60606000825167ffffffffffffffff8111156113c8576113c761322e565b5b60405190808252806020026020018201604052801561140157816020015b6113ee613003565b8152602001906001900390816113e65790505b50905060005b835181101561154a57600084828151811061142557611424613eca565b5b60200260200101519050806040015183838151811061144757611446613eca565b5b60200260200101516000018190525080600001511561146c5761146b878288612198565b5b600061148582604001518861206890919063ffffffff16565b90508160200151156114c75761149f818360600151612395565b8484815181106114b2576114b1613eca565b5b60200260200101516020018181525050611537565b816060015181111561150e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115059061469f565b60405180910390fd5b816060015184848151811061152657611525613eca565b5b602002602001015160200181815250505b50508061154390613f28565b9050611407565b50809150509392505050565b6115ee828260405160240161156c9291906146bf565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b5050565b61168a82826040516024016116089291906146ef565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b5050565b611696613023565b6000808573ffffffffffffffffffffffffffffffffffffffff16637bb26ca760e01b86866040516024016116cb929190614770565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161173591906147e3565b600060405180830381855af49150503d8060008114611770576040519150601f19603f3d011682016040523d82523d6000602084013e611775565b606091505b50915091508181906117bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b491906147fa565b60405180910390fd5b50808060200190518101906117d29190614a0b565b925050509392505050565b6117f0836117ea8461204d565b83612412565b505050565b61188b8160405160240161180991906147fa565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b50565b611924816040516024016118a29190614a6d565b6040516020818303038152906040527f2d5b6cb9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b50565b6119716040518060400160405280601f81526020017f656e746572696e6720726566756e64557365722c206e756d4173736574733d00815250611969836124d4565b60ff16610f13565b60005b61197d826124d4565b60ff168160ff161015611ddf57600061199f82846124e290919063ffffffff16565b90506119e36040518060400160405280601181526020017f2020726566756e64696e672061737365740000000000000000000000000000008152508360ff16610f13565b611ac76040518060400160405280600881526020017f202020207479706500000000000000000000000000000000000000000000000081525060016002811115611a3057611a2f613a31565b5b8360000151600001516002811115611a4b57611a4a613a31565b5b14611a8b576040518060400160405280600681526020017f6e61746976650000000000000000000000000000000000000000000000000000815250611ac2565b6040518060400160405280600581526020017f65726332300000000000000000000000000000000000000000000000000000008152505b6115f2565b611b0e6040518060400160405280600881526020017f2020202061646472000000000000000000000000000000000000000000000000815250826000015160200151611556565b611b516040518060400160405280600781526020017f20202020616d74000000000000000000000000000000000000000000000000008152508260200151610f13565b6000816000015190506000611b6c836020015161012c612395565b90506000818460200151611b809190614a88565b90507fb57bad0019da5831064de8f296d1458a6ca8403646dd9c362e9ddbb588cb52c08385602001518484604051611bbb9493929190614aeb565b60405180910390a160006002811115611bd757611bd6613a31565b5b83600001516002811115611bee57611bed613a31565b5b03611c86578360200151471015611c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3190614ba2565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611c80573d6000803e3d6000fd5b50611dca565b60016002811115611c9a57611c99613a31565b5b83600001516002811115611cb157611cb0613a31565b5b03611d8e5760008360200151905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cfa919061319b565b602060405180830381865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b9190614bc2565b9050611d7c6040518060400160405280601981526020017f2020726566756e64696e672065726332302062616c616e63650000000000000081525082610f13565b611d87828a856125a5565b5050611dc9565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc090614c61565b60405180910390fd5b5b5050505080611dd890614c8e565b9050611974565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080600090505b836020015160ff16811015611e645782846000015182600a8110611e3c57611e3b613eca565b5b60200201516000015103611e535780915050611f0f565b80611e5d90613f28565b9050611e15565b50600a60ff16836020015160ff1610611eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea990614d03565b60405180910390fd5b604051806040016040528083815260200160008152508360000151846020015160ff16600a8110611ee657611ee5613eca565b5b6020020181905250826020018051809190611f0090614c8e565b60ff1660ff1681525060ff1690505b92915050565b6000806000838501905084811015611f34576000809250925050611f3d565b60018192509250505b9250929050565b6000611f4f8461262b565b905084611f7182600001516002811115611f6c57611f6b613a31565b5b61269d565b611f94836020015173ffffffffffffffffffffffffffffffffffffffff1661276b565b611f9d8661269d565b611fa68661269d565b604051602001611fba959493929190614df7565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffc91906147fa565b60405180910390fd5b600080820361201d576120188484612789565b612043565b81846000015184600a811061203557612034613eca565b5b602002015160200181815250505b8190509392505050565b6000612061826000015183602001516127f6565b9050919050565b60008083600001519050600061207d8461204d565b905060005b856020015160ff168161ffff1610156120f65781838261ffff16600a81106120ad576120ac613eca565b5b602002015160000151036120e557828161ffff16600a81106120d2576120d1613eca565b5b60200201516020015193505050506120fe565b806120ef90614e7e565b9050612082565b506000925050505b92915050565b6000808490508073ffffffffffffffffffffffffffffffffffffffff16639312813661212f8661284c565b856040518363ffffffff1660e01b815260040161214d929190614ea8565b602060405180830381865afa15801561216a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218e9190614ee6565b9150509392505050565b6000151582602001511515146121e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121da90614f85565b60405180910390fd5b600060028111156121f7576121f6613a31565b5b826040015160000151600281111561221257612211613a31565b5b0315612390576001600281111561222c5761222b613a31565b5b826040015160000151600281111561224757612246613a31565b5b03612354576000826040015160200151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86306040518363ffffffff1660e01b8152600401612296929190614fa5565b602060405180830381865afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d79190614bc2565b90508360600151811015612320576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123179061501a565b60405180910390fd5b612330828630876060015161287c565b61234d84604001518560600151856110719092919063ffffffff16565b505061238f565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612386906150ac565b60405180910390fd5b5b505050565b6000816000111580156123ab5750620186a08211155b6123ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e19061513e565b60405180910390fd5b600082846123f8919061515e565b9050620186a08161240991906151cf565b91505092915050565b60008111156124cf5760006124278484611e0d565b9050600080612455866000015184600a811061244657612445613eca565b5b60200201516020015185612905565b91509150816124bf576124be6040518060400160405280600581526020017f646562697400000000000000000000000000000000000000000000000000000081525086886000015186600a81106124af576124ae613eca565b5b60200201516020015187611f44565b5b6124ca868483612005565b505050505b505050565b600081602001519050919050565b6124ea613003565b826020015160ff168260ff1610612536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252d90615272565b60405180910390fd5b600061256384600001518460ff16600a811061255557612554613eca565b5b60200201516000015161262b565b9050604051806040016040528082815260200185600001518560ff16600a81106125905761258f613eca565b5b60200201516020015181525091505092915050565b6126268363a9059cbb60e01b84846040516024016125c4929190615292565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061292d565b505050565b612633613051565b60008261ffff16600281111561264c5761264b613a31565b5b90506000601084901c9050604051806040016040528083600281111561267557612674613a31565b5b81526020018273ffffffffffffffffffffffffffffffffffffffff1681525092505050919050565b6060600060016126ac846129f4565b01905060008167ffffffffffffffff8111156126cb576126ca61322e565b5b6040519080825280601f01601f1916602001820160405280156126fd5781602001600182028036833780820191505090505b509050600082602001820190505b600115612760578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612754576127536151a0565b5b0494506000850361270b575b819350505050919050565b606061278282600161277c85612b47565b01612bd7565b9050919050565b81600001516001836020015161279f91906152bb565b60ff16600a81106127b3576127b2613eca565b5b6020020151826000015182600a81106127cf576127ce613eca565b5b60200201819052508160200180516127e6906152f0565b60ff16908160ff16815250505050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1690506000601082901b9050600086600281111561283557612834613a31565b5b905060008183179050809550505050505092915050565b60008160405160200161285f919061539b565b604051602081830303815290604052805190602001209050919050565b6128ff846323b872dd60e01b85858560405160240161289d939291906153c1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061292d565b50505050565b6000808383111561291c5760008091509150612926565b6001838503915091505b9250929050565b600061298f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612e139092919063ffffffff16565b90506000815111156129ef57808060200190518101906129af9190614ee6565b6129ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e59061546a565b60405180910390fd5b5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a52577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a4857612a476151a0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612a8f576d04ee2d6d415b85acef81000000008381612a8557612a846151a0565b5b0492506020810190505b662386f26fc100008310612abe57662386f26fc100008381612ab457612ab36151a0565b5b0492506010810190505b6305f5e1008310612ae7576305f5e1008381612add57612adc6151a0565b5b0492506008810190505b6127108310612b0c576127108381612b0257612b016151a0565b5b0492506004810190505b60648310612b2f5760648381612b2557612b246151a0565b5b0492506002810190505b600a8310612b3e576001810190505b80915050919050565b600080600090506000608084901c1115612b6957608083901c92506010810190505b6000604084901c1115612b8457604083901c92506008810190505b6000602084901c1115612b9f57602083901c92506004810190505b6000601084901c1115612bba57601083901c92506002810190505b6000600884901c1115612bce576001810190505b80915050919050565b606060006002836002612bea919061515e565b612bf4919061548a565b67ffffffffffffffff811115612c0d57612c0c61322e565b5b6040519080825280601f01601f191660200182016040528015612c3f5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c7757612c76613eca565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612cdb57612cda613eca565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612d1b919061515e565b612d25919061548a565b90505b6001811115612dc5577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612d6757612d66613eca565b5b1a60f81b828281518110612d7e57612d7d613eca565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612dbe906154be565b9050612d28565b5060008414612e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0090615533565b60405180910390fd5b8091505092915050565b6060612e228484600085612e2b565b90509392505050565b606082471015612e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e67906155c5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e9991906147e3565b60006040518083038185875af1925050503d8060008114612ed6576040519150601f19603f3d011682016040523d82523d6000602084013e612edb565b606091505b5091509150612eec87838387612ef8565b92505050949350505050565b60608315612f5a576000835103612f5257612f1285612f6d565b612f51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4890615631565b60405180910390fd5b5b829050612f65565b612f648383612f90565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612fa35781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fd791906147fa565b60405180910390fd5b6040518060400160405280612ff3613093565b8152602001600060ff1681525090565b6040518060400160405280613016613051565b8152602001600081525090565b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060400160405280600060028111156130705761306f613a31565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806101400160405280600a905b6130ab6130c1565b8152602001906001900390816130a35790505090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061311a826130ef565b9050919050565b61312a8161310f565b811461313557600080fd5b50565b60008135905061314781613121565b92915050565b600060208284031215613163576131626130e5565b5b600061317184828501613138565b91505092915050565b6000613185826130ef565b9050919050565b6131958161317a565b82525050565b60006020820190506131b0600083018461318c565b92915050565b6131bf8161317a565b81146131ca57600080fd5b50565b6000813590506131dc816131b6565b92915050565b6000819050919050565b6131f5816131e2565b811461320057600080fd5b50565b600081359050613212816131ec565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132668261321d565b810181811067ffffffffffffffff821117156132855761328461322e565b5b80604052505050565b60006132986130db565b90506132a4828261325d565b919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156132ce576132cd61322e565b5b602082029050602081019050919050565b600080fd5b600061ffff82169050919050565b6132fb816132e4565b811461330657600080fd5b50565b600081359050613318816132f2565b92915050565b600067ffffffffffffffff8211156133395761333861322e565b5b602082029050602081019050919050565b60008115159050919050565b61335f8161334a565b811461336a57600080fd5b50565b60008135905061337c81613356565b92915050565b6003811061338f57600080fd5b50565b6000813590506133a181613382565b92915050565b6000604082840312156133bd576133bc613218565b5b6133c7604061328e565b905060006133d784828501613392565b60008301525060206133eb848285016131cd565b60208301525092915050565b600060a0828403121561340d5761340c613218565b5b613417608061328e565b905060006134278482850161336d565b600083015250602061343b8482850161336d565b602083015250604061344f848285016133a7565b604083015250608061346384828501613203565b60608301525092915050565b600061348261347d8461331e565b61328e565b90508083825260208201905060a084028301858111156134a5576134a46132df565b5b835b818110156134ce57806134ba88826133f7565b84526020840193505060a0810190506134a7565b5050509392505050565b600082601f8301126134ed576134ec6132ae565b5b81356134fd84826020860161346f565b91505092915050565b600080fd5b600067ffffffffffffffff8211156135265761352561322e565b5b61352f8261321d565b9050602081019050919050565b82818337600083830152505050565b600061355e6135598461350b565b61328e565b90508281526020810184848401111561357a57613579613506565b5b61358584828561353c565b509392505050565b600082601f8301126135a2576135a16132ae565b5b81356135b284826020860161354b565b91505092915050565b60008160010b9050919050565b6135d1816135bb565b81146135dc57600080fd5b50565b6000813590506135ee816135c8565b92915050565b600060a0828403121561360a57613609613218565b5b61361460a061328e565b9050600061362484828501613309565b6000830152506020613638848285016131cd565b602083015250604082013567ffffffffffffffff81111561365c5761365b6132a9565b5b613668848285016134d8565b604083015250606082013567ffffffffffffffff81111561368c5761368b6132a9565b5b6136988482850161358d565b60608301525060806136ac848285016135df565b60808301525092915050565b60006136cb6136c6846132b3565b61328e565b905080838252602082019050602084028301858111156136ee576136ed6132df565b5b835b8181101561373557803567ffffffffffffffff811115613713576137126132ae565b5b80860161372089826135f4565b855260208501945050506020810190506136f0565b5050509392505050565b600082601f830112613754576137536132ae565b5b81356137648482602086016136b8565b91505092915050565b60006040828403121561378357613782613218565b5b61378d604061328e565b9050600061379d848285016131cd565b600083015250602082013567ffffffffffffffff8111156137c1576137c06132a9565b5b6137cd8482850161373f565b60208301525092915050565b6000606082840312156137ef576137ee613218565b5b6137f9604061328e565b90506000613809848285016133a7565b600083015250604061381d84828501613203565b60208301525092915050565b60008060008060c08587031215613843576138426130e5565b5b6000613851878288016131cd565b945050602061386287828801613203565b935050604085013567ffffffffffffffff811115613883576138826130ea565b5b61388f8782880161376d565b92505060606138a0878288016137d9565b91505092959194509250565b600080fd5b6000604082840312156138c7576138c66138ac565b5b81905092915050565b6000602082840312156138e6576138e56130e5565b5b600082013567ffffffffffffffff811115613904576139036130ea565b5b613910848285016138b1565b91505092915050565b6139228161310f565b82525050565b600060208201905061393d6000830184613919565b92915050565b600060208284031215613959576139586130e5565b5b600061396784828501613309565b91505092915050565b6139798161334a565b82525050565b60006020820190506139946000830184613970565b92915050565b6000819050919050565b60006139bf6139ba6139b5846130ef565b61399a565b6130ef565b9050919050565b60006139d1826139a4565b9050919050565b60006139e3826139c6565b9050919050565b6139f3816139d8565b82525050565b6000604082019050613a0e600083018561318c565b613a1b60208301846139ea565b9392505050565b613a2b816131e2565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613a7157613a70613a31565b5b50565b6000819050613a8282613a60565b919050565b6000613a9282613a74565b9050919050565b613aa281613a87565b82525050565b613ab18161317a565b82525050565b604082016000820151613acd6000850182613a99565b506020820151613ae06020850182613aa8565b50505050565b613aef816131e2565b82525050565b606082016000820151613b0b6000850182613ab7565b506020820151613b1e6040850182613ae6565b50505050565b600060a082019050613b396000830186613a22565b613b46602083018561318c565b613b536040830184613af5565b949350505050565b6000613b67368361376d565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ba3816132e4565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613bde8161334a565b82525050565b60a082016000820151613bfa6000850182613bd5565b506020820151613c0d6020850182613bd5565b506040820151613c206040850182613ab7565b506060820151613c336080850182613ae6565b50505050565b6000613c458383613be4565b60a08301905092915050565b6000602082019050919050565b6000613c6982613ba9565b613c738185613bb4565b9350613c7e83613bc5565b8060005b83811015613caf578151613c968882613c39565b9750613ca183613c51565b925050600181019050613c82565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613cf6578082015181840152602081019050613cdb565b60008484015250505050565b6000613d0d82613cbc565b613d178185613cc7565b9350613d27818560208601613cd8565b613d308161321d565b840191505092915050565b613d44816135bb565b82525050565b600060a083016000830151613d626000860182613b9a565b506020830151613d756020860182613aa8565b5060408301518482036040860152613d8d8282613c5e565b91505060608301518482036060860152613da78282613d02565b9150506080830151613dbc6080860182613d3b565b508091505092915050565b6000613dd38383613d4a565b905092915050565b6000602082019050919050565b6000613df382613b6e565b613dfd8185613b79565b935083602082028501613e0f85613b8a565b8060005b85811015613e4b5784840389528151613e2c8582613dc7565b9450613e3783613ddb565b925060208a01995050600181019050613e13565b50829750879550505050505092915050565b6000604083016000830151613e756000860182613aa8565b5060208301518482036020860152613e8d8282613de8565b9150508091505092915050565b6000604082019050613eaf600083018561318c565b8181036020830152613ec18184613e5d565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f33826131e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f6557613f64613ef9565b5b600182019050919050565b613f79816132e4565b82525050565b600060a083016000830151613f976000860182613b9a565b506020830151613faa6020860182613aa8565b5060408301518482036040860152613fc28282613c5e565b91505060608301518482036060860152613fdc8282613d02565b9150506080830151613ff16080860182613d3b565b508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60608201600082015161403e6000850182613ab7565b5060208201516140516040850182613ae6565b50505050565b60006140638383614028565b60608301905092915050565b6000602082019050919050565b600061408782613ffc565b6140918185614007565b935061409c83614018565b8060005b838110156140cd5781516140b48882614057565b97506140bf8361406f565b9250506001810190506140a0565b5085935050505092915050565b600082825260208201905092915050565b60006140f682613ffc565b61410081856140da565b935061410b83614018565b8060005b8381101561413c5781516141238882614057565b975061412e8361406f565b92505060018101905061410f565b5085935050505092915050565b60008160020b9050919050565b61415f81614149565b82525050565b6000608083016000830151848203600086015261418282826140eb565b9150506020830151848203602086015261419c82826140eb565b91505060408301516141b16040860182613d3b565b5060608301516141c46060860182614156565b508091505092915050565b600060c0820190506141e46000830189613f70565b81810360208301526141f68188613f7f565b90506142056040830187613f70565b614212606083018661318c565b8181036080830152614224818561407c565b905081810360a08301526142388184614165565b9050979650505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061428c601f83614245565b915061429782614256565b602082019050919050565b600060208201905081810360008301526142bb8161427f565b9050919050565b6000819050919050565b6142d5816142c2565b82525050565b60006142f66142f16142ec846132e4565b61399a565b6131e2565b9050919050565b614306816142db565b82525050565b600060408201905061432160008301856142cc565b61432e60208301846142fd565b9392505050565b600081519050614344816131b6565b92915050565b6000602082840312156143605761435f6130e5565b5b600061436e84828501614335565b91505092915050565b600081519050919050565b600061438d82614377565b6143978185614245565b93506143a7818560208601613cd8565b6143b08161321d565b840191505092915050565b600060408201905081810360008301526143d58185614382565b90506143e46020830184613a22565b9392505050565b6000815190506143fa816131ec565b92915050565b60008151905061440f816135c8565b92915050565b60006040828403121561442b5761442a613218565b5b614435604061328e565b90506000614445848285016143eb565b600083015250602061445984828501614400565b60208301525092915050565b60006040828403121561447b5761447a6130e5565b5b600061448984828501614415565b91505092915050565b6000815190506144a181613382565b92915050565b6000604082840312156144bd576144bc613218565b5b6144c7604061328e565b905060006144d784828501614492565b60008301525060206144eb84828501614335565b60208301525092915050565b6006811061450457600080fd5b50565b600081519050614516816144f7565b92915050565b600060a0828403121561453257614531613218565b5b61453c608061328e565b9050600061454c848285016144a7565b600083015250604061456084828501614507565b6020830152506060614574848285016143eb565b604083015250608061458884828501614400565b60608301525092915050565b600060a082840312156145aa576145a96130e5565b5b60006145b88482850161451c565b91505092915050565b7f737465702061646472657373206e6f7420696e207768697465206c6973740000600082015250565b60006145f7601e83614245565b9150614602826145c1565b602082019050919050565b60006020820190508181036000830152614626816145ea565b9050919050565b7f6162736f6c75746520616d6f756e74206578636565647320776f726b666c6f7760008201527f2061737365742062616c616e6365000000000000000000000000000000000000602082015250565b6000614689602e83614245565b91506146948261462d565b604082019050919050565b600060208201905081810360008301526146b88161467c565b9050919050565b600060408201905081810360008301526146d98185614382565b90506146e8602083018461318c565b9392505050565b600060408201905081810360008301526147098185614382565b9050818103602083015261471d8184614382565b90509392505050565b600082825260208201905092915050565b600061474282613cbc565b61474c8185614726565b935061475c818560208601613cd8565b6147658161321d565b840191505092915050565b6000604082019050818103600083015261478a818561407c565b9050818103602083015261479e8184614737565b90509392505050565b600081905092915050565b60006147bd82613cbc565b6147c781856147a7565b93506147d7818560208601613cd8565b80840191505092915050565b60006147ef82846147b2565b915081905092915050565b600060208201905081810360008301526148148184614382565b905092915050565b600067ffffffffffffffff8211156148375761483661322e565b5b602082029050602081019050919050565b60006060828403121561485e5761485d613218565b5b614868604061328e565b90506000614878848285016144a7565b600083015250604061488c848285016143eb565b60208301525092915050565b60006148ab6148a68461481c565b61328e565b905080838252602082019050606084028301858111156148ce576148cd6132df565b5b835b818110156148f757806148e38882614848565b8452602084019350506060810190506148d0565b5050509392505050565b600082601f830112614916576149156132ae565b5b8151614926848260208601614898565b91505092915050565b61493881614149565b811461494357600080fd5b50565b6000815190506149558161492f565b92915050565b60006080828403121561497157614970613218565b5b61497b608061328e565b9050600082015167ffffffffffffffff81111561499b5761499a6132a9565b5b6149a784828501614901565b600083015250602082015167ffffffffffffffff8111156149cb576149ca6132a9565b5b6149d784828501614901565b60208301525060406149eb84828501614400565b60408301525060606149ff84828501614946565b60608301525092915050565b600060208284031215614a2157614a206130e5565b5b600082015167ffffffffffffffff811115614a3f57614a3e6130ea565b5b614a4b8482850161495b565b91505092915050565b6000819050919050565b614a6781614a54565b82525050565b6000602082019050614a826000830184614a5e565b92915050565b6000614a93826131e2565b9150614a9e836131e2565b9250828203905081811115614ab657614ab5613ef9565b5b92915050565b604082016000820151614ad26000850182613a99565b506020820151614ae56020850182613aa8565b50505050565b600060a082019050614b006000830187614abc565b614b0d6040830186613a22565b614b1a6060830185613a22565b614b276080830184613a22565b95945050505050565b7f636f6d7075746564206e61746976652062616c616e636520697320677265617460008201527f6572207468616e2061637475616c2062616c616e636500000000000000000000602082015250565b6000614b8c603683614245565b9150614b9782614b30565b604082019050919050565b60006020820190508181036000830152614bbb81614b7f565b9050919050565b600060208284031215614bd857614bd76130e5565b5b6000614be6848285016143eb565b91505092915050565b7f756e6b6e6f776e206173736574207479706520696e20617373657442616c616e60008201527f6365730000000000000000000000000000000000000000000000000000000000602082015250565b6000614c4b602383614245565b9150614c5682614bef565b604082019050919050565b60006020820190508181036000830152614c7a81614c3e565b9050919050565b600060ff82169050919050565b6000614c9982614c81565b915060ff8203614cac57614cab613ef9565b5b600182019050919050565b7f746f6f206d616e7920746f6b656e2062616c616e636573000000000000000000600082015250565b6000614ced601783614245565b9150614cf882614cb7565b602082019050919050565b60006020820190508181036000830152614d1c81614ce0565b9050919050565b600081905092915050565b6000614d3982614377565b614d438185614d23565b9350614d53818560208601613cd8565b80840191505092915050565b7f206173736574547970653d000000000000000000000000000000000000000000815250565b7f206173736574416464726573733d000000000000000000000000000000000000815250565b7f2076616c75657320000000000000000000000000000000000000000000000000815250565b7f2c20000000000000000000000000000000000000000000000000000000000000815250565b6000614e038288614d2e565b9150614e0e82614d5f565b600b82019150614e1e8287614d2e565b9150614e2982614d85565b600e82019150614e398286614d2e565b9150614e4482614dab565b600882019150614e548285614d2e565b9150614e5f82614dd1565b600282019150614e6f8284614d2e565b91508190509695505050505050565b6000614e89826132e4565b915061ffff8203614e9d57614e9c613ef9565b5b600182019050919050565b6000604082019050614ebd60008301856142cc565b614eca602083018461318c565b9392505050565b600081519050614ee081613356565b92915050565b600060208284031215614efc57614efb6130e5565b5b6000614f0a84828501614ed1565b91505092915050565b7f63616e6e6f74207573652070657263656e7461676520666f7220616d6f756e7460008201527f206f662061737365742066726f6d2063616c6c65720000000000000000000000602082015250565b6000614f6f603583614245565b9150614f7a82614f13565b604082019050919050565b60006020820190508181036000830152614f9e81614f62565b9050919050565b6000604082019050614fba600083018561318c565b614fc7602083018461318c565b9392505050565b7f696e73756666696369656e7420616c6c6f77616e636520666f72206572633230600082015250565b6000615004602083614245565b915061500f82614fce565b602082019050919050565b6000602082019050818103600083015261503381614ff7565b9050919050565b7f756e6b6e6f776e206173736574207479706520696e20696e707574417373657460008201527f416d6f756e747300000000000000000000000000000000000000000000000000602082015250565b6000615096602783614245565b91506150a18261503a565b604082019050919050565b600060208201905081810360008301526150c581615089565b9050919050565b7f70657263656e74206d757374206265206265747765656e203020616e6420313060008201527f3030303000000000000000000000000000000000000000000000000000000000602082015250565b6000615128602483614245565b9150615133826150cc565b604082019050919050565b600060208201905081810360008301526151578161511b565b9050919050565b6000615169826131e2565b9150615174836131e2565b9250828202615182816131e2565b9150828204841483151761519957615198613ef9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006151da826131e2565b91506151e5836131e2565b9250826151f5576151f46151a0565b5b828204905092915050565b7f696e646578206f7574206f6620626f756e6473207768696c652061636365737360008201527f696e672061737365742062616c616e6365730000000000000000000000000000602082015250565b600061525c603283614245565b915061526782615200565b604082019050919050565b6000602082019050818103600083015261528b8161524f565b9050919050565b60006040820190506152a7600083018561318c565b6152b46020830184613a22565b9392505050565b60006152c682614c81565b91506152d183614c81565b9250828203905060ff8111156152ea576152e9613ef9565b5b92915050565b60006152fb82614c81565b91506000820361530e5761530d613ef9565b5b600182039050919050565b7f7374657057686974654c69737400000000000000000000000000000000000000600082015250565b600061534f600d83614d23565b915061535a82615319565b600d82019050919050565b60008160f01b9050919050565b600061537d82615365565b9050919050565b615395615390826132e4565b615372565b82525050565b60006153a682615342565b91506153b28284615384565b60028201915081905092915050565b60006060820190506153d6600083018661318c565b6153e3602083018561318c565b6153f06040830184613a22565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615454602a83614245565b915061545f826153f8565b604082019050919050565b6000602082019050818103600083015261548381615447565b9050919050565b6000615495826131e2565b91506154a0836131e2565b92508282019050808211156154b8576154b7613ef9565b5b92915050565b60006154c9826131e2565b9150600082036154dc576154db613ef9565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061551d602083614245565b9150615528826154e7565b602082019050919050565b6000602082019050818103600083015261554c81615510565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006155af602683614245565b91506155ba82615553565b604082019050919050565b600060208201905081810360008301526155de816155a2565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061561b601d83614245565b9150615626826155e5565b602082019050919050565b6000602082019050818103600083015261564a8161560e565b905091905056fe417373657442616c616e63654272616e6368207265747572696e67206966596573417373657442616c616e63654272616e6368207265747572696e67206e65787453746570496e646578a2646970667358221220e359a367c79fef5dc8733ffeed58ef22d245bd9f9c3a101005588bb035633e5c64736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c806352faae301161004e57806352faae301461011b5780638da5cb5b14610137578063f903397714610162578063ff05c2a81461019f5761007b565b806313af40351461008057806332b56aaf146100a957806334192642146100d4578063384782fe146100f0575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a2919061314d565b6101ca565b005b3480156100b557600080fd5b506100be6102d7565b6040516100cb919061319b565b60405180910390f35b6100ee60048036038101906100e99190613829565b6102fd565b005b3480156100fc57600080fd5b50610105610349565b604051610112919061319b565b60405180910390f35b610135600480360381019061013091906138d0565b61036f565b005b34801561014357600080fd5b5061014c6103ef565b6040516101599190613928565b60405180910390f35b34801561016e57600080fd5b5061018960048036038101906101849190613943565b610413565b604051610196919061319b565b60405180910390f35b3480156101ab57600080fd5b506101b4610448565b6040516101c1919061397f565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361025b57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd933826040516102cc9291906139f9565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f5fb75a336a44ceb6f98a3b8492da063de0d7407916807b030a6703bc96c3871283858360405161033093929190613b24565b60405180910390a161034384838361045b565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610377610e0c565b600060405180604001604052806040518060400160405280600060028111156103a3576103a2613a31565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152508152602001600081525090506103e333836103dd90613b5b565b8361045b565b506103ec610e5b565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610441600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683610e65565b9050919050565b600260149054906101000a900460ff1681565b7fc8094e88bd093f5d416a30bcc4c54a73a490d161daf321f6f5df19920a76d67a838360405161048c929190613e9a565b60405180910390a1600061049e612fe0565b600034146104fc576104e56040518060400160405280601081526020017f637265646974696e67206e61746976650000000000000000000000000000000081525034610f13565b6104fb60003483610faf9092919063ffffffff16565b5b6000836020015111156105275761052683600001518460200151836110719092919063ffffffff16565b5b60008460200151511115610dfb575b600115610dfa57600084602001518361ffff168151811061055a57610559613eca565b5b60200260200101519050600161ffff16816000015161ffff16148061058b5750600261ffff16816000015161ffff16145b156105fe576000600161ffff16826000015161ffff16036105b6576105af82611089565b90506105c3565b6105c08284611168565b90505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160010b036105f4575050610dfa565b8093505050610536565b6000610609826112b8565b9050600061061c888585604001516113a9565b90506106656040518060400160405280600a81526020017f63616c6c696e6720696400000000000000000000000000000000000000000000815250846000015161ffff16610f13565b6106a46040518060400160405280600c81526020017f63616c6c696e672061646472000000000000000000000000000000000000000081525083611556565b6106e46040518060400160405280600c81526020017f6173736574416d6f756e747300000000000000000000000000000000000000008152508251610f13565b60005b81518110156108bd576107ee6040518060400160405280600c81526020017f2020696e707574207479706500000000000000000000000000000000000000008152506001600281111561073d5761073c613a31565b5b8484815181106107505761074f613eca565b5b60200260200101516000015160000151600281111561077257610771613a31565b5b146107b2576040518060400160405280600681526020017f6e617469766500000000000000000000000000000000000000000000000000008152506107e9565b6040518060400160405280600581526020017f65726332300000000000000000000000000000000000000000000000000000008152505b6115f2565b61084f6040518060400160405280600c81526020017f2020696e7075742061646472000000000000000000000000000000000000000081525083838151811061083a57610839613eca565b5b60200260200101516000015160200151611556565b6108ac6040518060400160405280600e81526020017f2020696e70757420616d6f756e7400000000000000000000000000000000000081525083838151811061089b5761089a613eca565b5b602002602001015160200151610f13565b806108b690613f28565b90506106e7565b5060006108cf8383866060015161168e565b90506109156040518060400160405280601381526020017f73746570526573756c742e6f7570747075747300000000000000000000000000815250826020015151610f13565b60005b816020015151811015610997576109866040518060400160405280600d81526020017f6f757470757420616d6f756e74000000000000000000000000000000000000008152508360200151838151811061097557610974613eca565b5b602002602001015160200151610f13565b8061099090613f28565b9050610918565b507f1754cdb05aef18c5f0e96033a1ff1dc6b452412b60d5699a299da58ab09d1276868586600001518686866040516109d5969594939291906141cf565b60405180910390a1610a216040518060400160405280600d81526020017f726573756c7420696e7075747300000000000000000000000000000000000000815250826000015151610f13565b60005b816000015151811015610ba057610a706040518060400160405280600781526020017f202064656269740000000000000000000000000000000000000000000000000081525082610f13565b610ad56040518060400160405280600c81526020017f202064656269742061646472000000000000000000000000000000000000000081525083600001518381518110610ac057610abf613eca565b5b60200260200101516000015160200151611556565b610b366040518060400160405280600b81526020017f2020646562697420616d7400000000000000000000000000000000000000000081525083600001518381518110610b2557610b24613eca565b5b602002602001015160200151610f13565b610b8f82600001518281518110610b5057610b4f613eca565b5b60200260200101516000015183600001518381518110610b7357610b72613eca565b5b602002602001015160200151886117dd9092919063ffffffff16565b80610b9990613f28565b9050610a24565b50610be56040518060400160405280600e81526020017f726573756c74206f757470757473000000000000000000000000000000000000815250826020015151610f13565b60005b816020015151811015610d6457610c346040518060400160405280600881526020017f202063726564697400000000000000000000000000000000000000000000000081525082610f13565b610c996040518060400160405280600d81526020017f202063726564697420616464720000000000000000000000000000000000000081525083602001518381518110610c8457610c83613eca565b5b60200260200101516000015160200151611556565b610cfa6040518060400160405280600c81526020017f202063726564697420616d74000000000000000000000000000000000000000081525083602001518381518110610ce957610ce8613eca565b5b602002602001015160200151610f13565b610d5382602001518281518110610d1457610d13613eca565b5b60200260200101516000015183602001518381518110610d3757610d36613eca565b5b602002602001015160200151886110719092919063ffffffff16565b80610d5d90613f28565b9050610be8565b50610da36040518060400160405280601981526020017f63757272656e74537465702e6e65787453746570496e646578000000000000008152506117f5565b610db3846080015160010b61188e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff846080015160010b03610dea5750505050610dfa565b8360800151955050505050610536565b5b610e058582611927565b5050505050565b600260035403610e51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e48906142a2565b60405180910390fd5b6002600381905550565b6001600381905550565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b856040518363ffffffff1660e01b8152600401610ec992919061430c565b602060405180830381865afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a919061434a565b91505092915050565b610fab8282604051602401610f299291906143bb565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b5050565b600081111561106c576000610fc48484611e0d565b9050600080610ff2866000015184600a8110610fe357610fe2613eca565b5b60200201516020015185611f15565b915091508161105c5761105b6040518060400160405280600681526020017f637265646974000000000000000000000000000000000000000000000000000081525086886000015186600a811061104c5761104b613eca565b5b60200201516020015187611f44565b5b611067868483612005565b505050505b505050565b6110848361107e8461204d565b83610faf565b505050565b60008082606001518060200190518101906110a49190614465565b90504681600001510361110c576110ef6040518060400160405280600e81526020017f7265747572696e672069665965730000000000000000000000000000000000008152506117f5565b6110ff816020015160010b61188e565b8060200151915050611163565b61114a6040518060400160405280601681526020017f7265747572696e67206e65787453746570496e646578000000000000000000008152506117f5565b61115a836080015160010b61188e565b82608001519150505b919050565b60008083606001518060200190518101906111839190614594565b905060008160200151905060006111a783600001518661206890919063ffffffff16565b9050600083604001519050600083600081146111ea57600181146111f457600281146111ff5760038114611209576004811461121757600581146112215761122b565b828414915061122b565b82841419915061122b565b828410915061122b565b82841083851417915061122b565b828411915061122b565b8284118385141791505b50801561127457611253604051806060016040528060218152602001615652602191396117f5565b611263856060015160010b61188e565b8460600151955050505050506112b2565b611295604051806060016040528060298152602001615673602991396117f5565b6112a5886080015160010b61188e565b8760800151955050505050505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff160361132857611321600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360000151610e65565b90506113a4565b61135d600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600001518460200151612104565b61139c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113939061460d565b60405180910390fd5b816020015190505b919050565b60606000825167ffffffffffffffff8111156113c8576113c761322e565b5b60405190808252806020026020018201604052801561140157816020015b6113ee613003565b8152602001906001900390816113e65790505b50905060005b835181101561154a57600084828151811061142557611424613eca565b5b60200260200101519050806040015183838151811061144757611446613eca565b5b60200260200101516000018190525080600001511561146c5761146b878288612198565b5b600061148582604001518861206890919063ffffffff16565b90508160200151156114c75761149f818360600151612395565b8484815181106114b2576114b1613eca565b5b60200260200101516020018181525050611537565b816060015181111561150e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115059061469f565b60405180910390fd5b816060015184848151811061152657611525613eca565b5b602002602001015160200181815250505b50508061154390613f28565b9050611407565b50809150509392505050565b6115ee828260405160240161156c9291906146bf565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b5050565b61168a82826040516024016116089291906146ef565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b5050565b611696613023565b6000808573ffffffffffffffffffffffffffffffffffffffff16637bb26ca760e01b86866040516024016116cb929190614770565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161173591906147e3565b600060405180830381855af49150503d8060008114611770576040519150601f19603f3d011682016040523d82523d6000602084013e611775565b606091505b50915091508181906117bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b491906147fa565b60405180910390fd5b50808060200190518101906117d29190614a0b565b925050509392505050565b6117f0836117ea8461204d565b83612412565b505050565b61188b8160405160240161180991906147fa565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b50565b611924816040516024016118a29190614a6d565b6040516020818303038152906040527f2d5b6cb9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611de4565b50565b6119716040518060400160405280601f81526020017f656e746572696e6720726566756e64557365722c206e756d4173736574733d00815250611969836124d4565b60ff16610f13565b60005b61197d826124d4565b60ff168160ff161015611ddf57600061199f82846124e290919063ffffffff16565b90506119e36040518060400160405280601181526020017f2020726566756e64696e672061737365740000000000000000000000000000008152508360ff16610f13565b611ac76040518060400160405280600881526020017f202020207479706500000000000000000000000000000000000000000000000081525060016002811115611a3057611a2f613a31565b5b8360000151600001516002811115611a4b57611a4a613a31565b5b14611a8b576040518060400160405280600681526020017f6e61746976650000000000000000000000000000000000000000000000000000815250611ac2565b6040518060400160405280600581526020017f65726332300000000000000000000000000000000000000000000000000000008152505b6115f2565b611b0e6040518060400160405280600881526020017f2020202061646472000000000000000000000000000000000000000000000000815250826000015160200151611556565b611b516040518060400160405280600781526020017f20202020616d74000000000000000000000000000000000000000000000000008152508260200151610f13565b6000816000015190506000611b6c836020015161012c612395565b90506000818460200151611b809190614a88565b90507fb57bad0019da5831064de8f296d1458a6ca8403646dd9c362e9ddbb588cb52c08385602001518484604051611bbb9493929190614aeb565b60405180910390a160006002811115611bd757611bd6613a31565b5b83600001516002811115611bee57611bed613a31565b5b03611c86578360200151471015611c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3190614ba2565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611c80573d6000803e3d6000fd5b50611dca565b60016002811115611c9a57611c99613a31565b5b83600001516002811115611cb157611cb0613a31565b5b03611d8e5760008360200151905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cfa919061319b565b602060405180830381865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b9190614bc2565b9050611d7c6040518060400160405280601981526020017f2020726566756e64696e672065726332302062616c616e63650000000000000081525082610f13565b611d87828a856125a5565b5050611dc9565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc090614c61565b60405180910390fd5b5b5050505080611dd890614c8e565b9050611974565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080600090505b836020015160ff16811015611e645782846000015182600a8110611e3c57611e3b613eca565b5b60200201516000015103611e535780915050611f0f565b80611e5d90613f28565b9050611e15565b50600a60ff16836020015160ff1610611eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea990614d03565b60405180910390fd5b604051806040016040528083815260200160008152508360000151846020015160ff16600a8110611ee657611ee5613eca565b5b6020020181905250826020018051809190611f0090614c8e565b60ff1660ff1681525060ff1690505b92915050565b6000806000838501905084811015611f34576000809250925050611f3d565b60018192509250505b9250929050565b6000611f4f8461262b565b905084611f7182600001516002811115611f6c57611f6b613a31565b5b61269d565b611f94836020015173ffffffffffffffffffffffffffffffffffffffff1661276b565b611f9d8661269d565b611fa68661269d565b604051602001611fba959493929190614df7565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffc91906147fa565b60405180910390fd5b600080820361201d576120188484612789565b612043565b81846000015184600a811061203557612034613eca565b5b602002015160200181815250505b8190509392505050565b6000612061826000015183602001516127f6565b9050919050565b60008083600001519050600061207d8461204d565b905060005b856020015160ff168161ffff1610156120f65781838261ffff16600a81106120ad576120ac613eca565b5b602002015160000151036120e557828161ffff16600a81106120d2576120d1613eca565b5b60200201516020015193505050506120fe565b806120ef90614e7e565b9050612082565b506000925050505b92915050565b6000808490508073ffffffffffffffffffffffffffffffffffffffff16639312813661212f8661284c565b856040518363ffffffff1660e01b815260040161214d929190614ea8565b602060405180830381865afa15801561216a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218e9190614ee6565b9150509392505050565b6000151582602001511515146121e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121da90614f85565b60405180910390fd5b600060028111156121f7576121f6613a31565b5b826040015160000151600281111561221257612211613a31565b5b0315612390576001600281111561222c5761222b613a31565b5b826040015160000151600281111561224757612246613a31565b5b03612354576000826040015160200151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86306040518363ffffffff1660e01b8152600401612296929190614fa5565b602060405180830381865afa1580156122b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d79190614bc2565b90508360600151811015612320576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123179061501a565b60405180910390fd5b612330828630876060015161287c565b61234d84604001518560600151856110719092919063ffffffff16565b505061238f565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612386906150ac565b60405180910390fd5b5b505050565b6000816000111580156123ab5750620186a08211155b6123ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e19061513e565b60405180910390fd5b600082846123f8919061515e565b9050620186a08161240991906151cf565b91505092915050565b60008111156124cf5760006124278484611e0d565b9050600080612455866000015184600a811061244657612445613eca565b5b60200201516020015185612905565b91509150816124bf576124be6040518060400160405280600581526020017f646562697400000000000000000000000000000000000000000000000000000081525086886000015186600a81106124af576124ae613eca565b5b60200201516020015187611f44565b5b6124ca868483612005565b505050505b505050565b600081602001519050919050565b6124ea613003565b826020015160ff168260ff1610612536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252d90615272565b60405180910390fd5b600061256384600001518460ff16600a811061255557612554613eca565b5b60200201516000015161262b565b9050604051806040016040528082815260200185600001518560ff16600a81106125905761258f613eca565b5b60200201516020015181525091505092915050565b6126268363a9059cbb60e01b84846040516024016125c4929190615292565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061292d565b505050565b612633613051565b60008261ffff16600281111561264c5761264b613a31565b5b90506000601084901c9050604051806040016040528083600281111561267557612674613a31565b5b81526020018273ffffffffffffffffffffffffffffffffffffffff1681525092505050919050565b6060600060016126ac846129f4565b01905060008167ffffffffffffffff8111156126cb576126ca61322e565b5b6040519080825280601f01601f1916602001820160405280156126fd5781602001600182028036833780820191505090505b509050600082602001820190505b600115612760578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612754576127536151a0565b5b0494506000850361270b575b819350505050919050565b606061278282600161277c85612b47565b01612bd7565b9050919050565b81600001516001836020015161279f91906152bb565b60ff16600a81106127b3576127b2613eca565b5b6020020151826000015182600a81106127cf576127ce613eca565b5b60200201819052508160200180516127e6906152f0565b60ff16908160ff16815250505050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1690506000601082901b9050600086600281111561283557612834613a31565b5b905060008183179050809550505050505092915050565b60008160405160200161285f919061539b565b604051602081830303815290604052805190602001209050919050565b6128ff846323b872dd60e01b85858560405160240161289d939291906153c1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061292d565b50505050565b6000808383111561291c5760008091509150612926565b6001838503915091505b9250929050565b600061298f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612e139092919063ffffffff16565b90506000815111156129ef57808060200190518101906129af9190614ee6565b6129ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e59061546a565b60405180910390fd5b5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a52577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a4857612a476151a0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612a8f576d04ee2d6d415b85acef81000000008381612a8557612a846151a0565b5b0492506020810190505b662386f26fc100008310612abe57662386f26fc100008381612ab457612ab36151a0565b5b0492506010810190505b6305f5e1008310612ae7576305f5e1008381612add57612adc6151a0565b5b0492506008810190505b6127108310612b0c576127108381612b0257612b016151a0565b5b0492506004810190505b60648310612b2f5760648381612b2557612b246151a0565b5b0492506002810190505b600a8310612b3e576001810190505b80915050919050565b600080600090506000608084901c1115612b6957608083901c92506010810190505b6000604084901c1115612b8457604083901c92506008810190505b6000602084901c1115612b9f57602083901c92506004810190505b6000601084901c1115612bba57601083901c92506002810190505b6000600884901c1115612bce576001810190505b80915050919050565b606060006002836002612bea919061515e565b612bf4919061548a565b67ffffffffffffffff811115612c0d57612c0c61322e565b5b6040519080825280601f01601f191660200182016040528015612c3f5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c7757612c76613eca565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612cdb57612cda613eca565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612d1b919061515e565b612d25919061548a565b90505b6001811115612dc5577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612d6757612d66613eca565b5b1a60f81b828281518110612d7e57612d7d613eca565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612dbe906154be565b9050612d28565b5060008414612e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0090615533565b60405180910390fd5b8091505092915050565b6060612e228484600085612e2b565b90509392505050565b606082471015612e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e67906155c5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e9991906147e3565b60006040518083038185875af1925050503d8060008114612ed6576040519150601f19603f3d011682016040523d82523d6000602084013e612edb565b606091505b5091509150612eec87838387612ef8565b92505050949350505050565b60608315612f5a576000835103612f5257612f1285612f6d565b612f51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4890615631565b60405180910390fd5b5b829050612f65565b612f648383612f90565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612fa35781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fd791906147fa565b60405180910390fd5b6040518060400160405280612ff3613093565b8152602001600060ff1681525090565b6040518060400160405280613016613051565b8152602001600081525090565b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060400160405280600060028111156130705761306f613a31565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806101400160405280600a905b6130ab6130c1565b8152602001906001900390816130a35790505090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061311a826130ef565b9050919050565b61312a8161310f565b811461313557600080fd5b50565b60008135905061314781613121565b92915050565b600060208284031215613163576131626130e5565b5b600061317184828501613138565b91505092915050565b6000613185826130ef565b9050919050565b6131958161317a565b82525050565b60006020820190506131b0600083018461318c565b92915050565b6131bf8161317a565b81146131ca57600080fd5b50565b6000813590506131dc816131b6565b92915050565b6000819050919050565b6131f5816131e2565b811461320057600080fd5b50565b600081359050613212816131ec565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132668261321d565b810181811067ffffffffffffffff821117156132855761328461322e565b5b80604052505050565b60006132986130db565b90506132a4828261325d565b919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156132ce576132cd61322e565b5b602082029050602081019050919050565b600080fd5b600061ffff82169050919050565b6132fb816132e4565b811461330657600080fd5b50565b600081359050613318816132f2565b92915050565b600067ffffffffffffffff8211156133395761333861322e565b5b602082029050602081019050919050565b60008115159050919050565b61335f8161334a565b811461336a57600080fd5b50565b60008135905061337c81613356565b92915050565b6003811061338f57600080fd5b50565b6000813590506133a181613382565b92915050565b6000604082840312156133bd576133bc613218565b5b6133c7604061328e565b905060006133d784828501613392565b60008301525060206133eb848285016131cd565b60208301525092915050565b600060a0828403121561340d5761340c613218565b5b613417608061328e565b905060006134278482850161336d565b600083015250602061343b8482850161336d565b602083015250604061344f848285016133a7565b604083015250608061346384828501613203565b60608301525092915050565b600061348261347d8461331e565b61328e565b90508083825260208201905060a084028301858111156134a5576134a46132df565b5b835b818110156134ce57806134ba88826133f7565b84526020840193505060a0810190506134a7565b5050509392505050565b600082601f8301126134ed576134ec6132ae565b5b81356134fd84826020860161346f565b91505092915050565b600080fd5b600067ffffffffffffffff8211156135265761352561322e565b5b61352f8261321d565b9050602081019050919050565b82818337600083830152505050565b600061355e6135598461350b565b61328e565b90508281526020810184848401111561357a57613579613506565b5b61358584828561353c565b509392505050565b600082601f8301126135a2576135a16132ae565b5b81356135b284826020860161354b565b91505092915050565b60008160010b9050919050565b6135d1816135bb565b81146135dc57600080fd5b50565b6000813590506135ee816135c8565b92915050565b600060a0828403121561360a57613609613218565b5b61361460a061328e565b9050600061362484828501613309565b6000830152506020613638848285016131cd565b602083015250604082013567ffffffffffffffff81111561365c5761365b6132a9565b5b613668848285016134d8565b604083015250606082013567ffffffffffffffff81111561368c5761368b6132a9565b5b6136988482850161358d565b60608301525060806136ac848285016135df565b60808301525092915050565b60006136cb6136c6846132b3565b61328e565b905080838252602082019050602084028301858111156136ee576136ed6132df565b5b835b8181101561373557803567ffffffffffffffff811115613713576137126132ae565b5b80860161372089826135f4565b855260208501945050506020810190506136f0565b5050509392505050565b600082601f830112613754576137536132ae565b5b81356137648482602086016136b8565b91505092915050565b60006040828403121561378357613782613218565b5b61378d604061328e565b9050600061379d848285016131cd565b600083015250602082013567ffffffffffffffff8111156137c1576137c06132a9565b5b6137cd8482850161373f565b60208301525092915050565b6000606082840312156137ef576137ee613218565b5b6137f9604061328e565b90506000613809848285016133a7565b600083015250604061381d84828501613203565b60208301525092915050565b60008060008060c08587031215613843576138426130e5565b5b6000613851878288016131cd565b945050602061386287828801613203565b935050604085013567ffffffffffffffff811115613883576138826130ea565b5b61388f8782880161376d565b92505060606138a0878288016137d9565b91505092959194509250565b600080fd5b6000604082840312156138c7576138c66138ac565b5b81905092915050565b6000602082840312156138e6576138e56130e5565b5b600082013567ffffffffffffffff811115613904576139036130ea565b5b613910848285016138b1565b91505092915050565b6139228161310f565b82525050565b600060208201905061393d6000830184613919565b92915050565b600060208284031215613959576139586130e5565b5b600061396784828501613309565b91505092915050565b6139798161334a565b82525050565b60006020820190506139946000830184613970565b92915050565b6000819050919050565b60006139bf6139ba6139b5846130ef565b61399a565b6130ef565b9050919050565b60006139d1826139a4565b9050919050565b60006139e3826139c6565b9050919050565b6139f3816139d8565b82525050565b6000604082019050613a0e600083018561318c565b613a1b60208301846139ea565b9392505050565b613a2b816131e2565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613a7157613a70613a31565b5b50565b6000819050613a8282613a60565b919050565b6000613a9282613a74565b9050919050565b613aa281613a87565b82525050565b613ab18161317a565b82525050565b604082016000820151613acd6000850182613a99565b506020820151613ae06020850182613aa8565b50505050565b613aef816131e2565b82525050565b606082016000820151613b0b6000850182613ab7565b506020820151613b1e6040850182613ae6565b50505050565b600060a082019050613b396000830186613a22565b613b46602083018561318c565b613b536040830184613af5565b949350505050565b6000613b67368361376d565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ba3816132e4565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613bde8161334a565b82525050565b60a082016000820151613bfa6000850182613bd5565b506020820151613c0d6020850182613bd5565b506040820151613c206040850182613ab7565b506060820151613c336080850182613ae6565b50505050565b6000613c458383613be4565b60a08301905092915050565b6000602082019050919050565b6000613c6982613ba9565b613c738185613bb4565b9350613c7e83613bc5565b8060005b83811015613caf578151613c968882613c39565b9750613ca183613c51565b925050600181019050613c82565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613cf6578082015181840152602081019050613cdb565b60008484015250505050565b6000613d0d82613cbc565b613d178185613cc7565b9350613d27818560208601613cd8565b613d308161321d565b840191505092915050565b613d44816135bb565b82525050565b600060a083016000830151613d626000860182613b9a565b506020830151613d756020860182613aa8565b5060408301518482036040860152613d8d8282613c5e565b91505060608301518482036060860152613da78282613d02565b9150506080830151613dbc6080860182613d3b565b508091505092915050565b6000613dd38383613d4a565b905092915050565b6000602082019050919050565b6000613df382613b6e565b613dfd8185613b79565b935083602082028501613e0f85613b8a565b8060005b85811015613e4b5784840389528151613e2c8582613dc7565b9450613e3783613ddb565b925060208a01995050600181019050613e13565b50829750879550505050505092915050565b6000604083016000830151613e756000860182613aa8565b5060208301518482036020860152613e8d8282613de8565b9150508091505092915050565b6000604082019050613eaf600083018561318c565b8181036020830152613ec18184613e5d565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f33826131e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f6557613f64613ef9565b5b600182019050919050565b613f79816132e4565b82525050565b600060a083016000830151613f976000860182613b9a565b506020830151613faa6020860182613aa8565b5060408301518482036040860152613fc28282613c5e565b91505060608301518482036060860152613fdc8282613d02565b9150506080830151613ff16080860182613d3b565b508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60608201600082015161403e6000850182613ab7565b5060208201516140516040850182613ae6565b50505050565b60006140638383614028565b60608301905092915050565b6000602082019050919050565b600061408782613ffc565b6140918185614007565b935061409c83614018565b8060005b838110156140cd5781516140b48882614057565b97506140bf8361406f565b9250506001810190506140a0565b5085935050505092915050565b600082825260208201905092915050565b60006140f682613ffc565b61410081856140da565b935061410b83614018565b8060005b8381101561413c5781516141238882614057565b975061412e8361406f565b92505060018101905061410f565b5085935050505092915050565b60008160020b9050919050565b61415f81614149565b82525050565b6000608083016000830151848203600086015261418282826140eb565b9150506020830151848203602086015261419c82826140eb565b91505060408301516141b16040860182613d3b565b5060608301516141c46060860182614156565b508091505092915050565b600060c0820190506141e46000830189613f70565b81810360208301526141f68188613f7f565b90506142056040830187613f70565b614212606083018661318c565b8181036080830152614224818561407c565b905081810360a08301526142388184614165565b9050979650505050505050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061428c601f83614245565b915061429782614256565b602082019050919050565b600060208201905081810360008301526142bb8161427f565b9050919050565b6000819050919050565b6142d5816142c2565b82525050565b60006142f66142f16142ec846132e4565b61399a565b6131e2565b9050919050565b614306816142db565b82525050565b600060408201905061432160008301856142cc565b61432e60208301846142fd565b9392505050565b600081519050614344816131b6565b92915050565b6000602082840312156143605761435f6130e5565b5b600061436e84828501614335565b91505092915050565b600081519050919050565b600061438d82614377565b6143978185614245565b93506143a7818560208601613cd8565b6143b08161321d565b840191505092915050565b600060408201905081810360008301526143d58185614382565b90506143e46020830184613a22565b9392505050565b6000815190506143fa816131ec565b92915050565b60008151905061440f816135c8565b92915050565b60006040828403121561442b5761442a613218565b5b614435604061328e565b90506000614445848285016143eb565b600083015250602061445984828501614400565b60208301525092915050565b60006040828403121561447b5761447a6130e5565b5b600061448984828501614415565b91505092915050565b6000815190506144a181613382565b92915050565b6000604082840312156144bd576144bc613218565b5b6144c7604061328e565b905060006144d784828501614492565b60008301525060206144eb84828501614335565b60208301525092915050565b6006811061450457600080fd5b50565b600081519050614516816144f7565b92915050565b600060a0828403121561453257614531613218565b5b61453c608061328e565b9050600061454c848285016144a7565b600083015250604061456084828501614507565b6020830152506060614574848285016143eb565b604083015250608061458884828501614400565b60608301525092915050565b600060a082840312156145aa576145a96130e5565b5b60006145b88482850161451c565b91505092915050565b7f737465702061646472657373206e6f7420696e207768697465206c6973740000600082015250565b60006145f7601e83614245565b9150614602826145c1565b602082019050919050565b60006020820190508181036000830152614626816145ea565b9050919050565b7f6162736f6c75746520616d6f756e74206578636565647320776f726b666c6f7760008201527f2061737365742062616c616e6365000000000000000000000000000000000000602082015250565b6000614689602e83614245565b91506146948261462d565b604082019050919050565b600060208201905081810360008301526146b88161467c565b9050919050565b600060408201905081810360008301526146d98185614382565b90506146e8602083018461318c565b9392505050565b600060408201905081810360008301526147098185614382565b9050818103602083015261471d8184614382565b90509392505050565b600082825260208201905092915050565b600061474282613cbc565b61474c8185614726565b935061475c818560208601613cd8565b6147658161321d565b840191505092915050565b6000604082019050818103600083015261478a818561407c565b9050818103602083015261479e8184614737565b90509392505050565b600081905092915050565b60006147bd82613cbc565b6147c781856147a7565b93506147d7818560208601613cd8565b80840191505092915050565b60006147ef82846147b2565b915081905092915050565b600060208201905081810360008301526148148184614382565b905092915050565b600067ffffffffffffffff8211156148375761483661322e565b5b602082029050602081019050919050565b60006060828403121561485e5761485d613218565b5b614868604061328e565b90506000614878848285016144a7565b600083015250604061488c848285016143eb565b60208301525092915050565b60006148ab6148a68461481c565b61328e565b905080838252602082019050606084028301858111156148ce576148cd6132df565b5b835b818110156148f757806148e38882614848565b8452602084019350506060810190506148d0565b5050509392505050565b600082601f830112614916576149156132ae565b5b8151614926848260208601614898565b91505092915050565b61493881614149565b811461494357600080fd5b50565b6000815190506149558161492f565b92915050565b60006080828403121561497157614970613218565b5b61497b608061328e565b9050600082015167ffffffffffffffff81111561499b5761499a6132a9565b5b6149a784828501614901565b600083015250602082015167ffffffffffffffff8111156149cb576149ca6132a9565b5b6149d784828501614901565b60208301525060406149eb84828501614400565b60408301525060606149ff84828501614946565b60608301525092915050565b600060208284031215614a2157614a206130e5565b5b600082015167ffffffffffffffff811115614a3f57614a3e6130ea565b5b614a4b8482850161495b565b91505092915050565b6000819050919050565b614a6781614a54565b82525050565b6000602082019050614a826000830184614a5e565b92915050565b6000614a93826131e2565b9150614a9e836131e2565b9250828203905081811115614ab657614ab5613ef9565b5b92915050565b604082016000820151614ad26000850182613a99565b506020820151614ae56020850182613aa8565b50505050565b600060a082019050614b006000830187614abc565b614b0d6040830186613a22565b614b1a6060830185613a22565b614b276080830184613a22565b95945050505050565b7f636f6d7075746564206e61746976652062616c616e636520697320677265617460008201527f6572207468616e2061637475616c2062616c616e636500000000000000000000602082015250565b6000614b8c603683614245565b9150614b9782614b30565b604082019050919050565b60006020820190508181036000830152614bbb81614b7f565b9050919050565b600060208284031215614bd857614bd76130e5565b5b6000614be6848285016143eb565b91505092915050565b7f756e6b6e6f776e206173736574207479706520696e20617373657442616c616e60008201527f6365730000000000000000000000000000000000000000000000000000000000602082015250565b6000614c4b602383614245565b9150614c5682614bef565b604082019050919050565b60006020820190508181036000830152614c7a81614c3e565b9050919050565b600060ff82169050919050565b6000614c9982614c81565b915060ff8203614cac57614cab613ef9565b5b600182019050919050565b7f746f6f206d616e7920746f6b656e2062616c616e636573000000000000000000600082015250565b6000614ced601783614245565b9150614cf882614cb7565b602082019050919050565b60006020820190508181036000830152614d1c81614ce0565b9050919050565b600081905092915050565b6000614d3982614377565b614d438185614d23565b9350614d53818560208601613cd8565b80840191505092915050565b7f206173736574547970653d000000000000000000000000000000000000000000815250565b7f206173736574416464726573733d000000000000000000000000000000000000815250565b7f2076616c75657320000000000000000000000000000000000000000000000000815250565b7f2c20000000000000000000000000000000000000000000000000000000000000815250565b6000614e038288614d2e565b9150614e0e82614d5f565b600b82019150614e1e8287614d2e565b9150614e2982614d85565b600e82019150614e398286614d2e565b9150614e4482614dab565b600882019150614e548285614d2e565b9150614e5f82614dd1565b600282019150614e6f8284614d2e565b91508190509695505050505050565b6000614e89826132e4565b915061ffff8203614e9d57614e9c613ef9565b5b600182019050919050565b6000604082019050614ebd60008301856142cc565b614eca602083018461318c565b9392505050565b600081519050614ee081613356565b92915050565b600060208284031215614efc57614efb6130e5565b5b6000614f0a84828501614ed1565b91505092915050565b7f63616e6e6f74207573652070657263656e7461676520666f7220616d6f756e7460008201527f206f662061737365742066726f6d2063616c6c65720000000000000000000000602082015250565b6000614f6f603583614245565b9150614f7a82614f13565b604082019050919050565b60006020820190508181036000830152614f9e81614f62565b9050919050565b6000604082019050614fba600083018561318c565b614fc7602083018461318c565b9392505050565b7f696e73756666696369656e7420616c6c6f77616e636520666f72206572633230600082015250565b6000615004602083614245565b915061500f82614fce565b602082019050919050565b6000602082019050818103600083015261503381614ff7565b9050919050565b7f756e6b6e6f776e206173736574207479706520696e20696e707574417373657460008201527f416d6f756e747300000000000000000000000000000000000000000000000000602082015250565b6000615096602783614245565b91506150a18261503a565b604082019050919050565b600060208201905081810360008301526150c581615089565b9050919050565b7f70657263656e74206d757374206265206265747765656e203020616e6420313060008201527f3030303000000000000000000000000000000000000000000000000000000000602082015250565b6000615128602483614245565b9150615133826150cc565b604082019050919050565b600060208201905081810360008301526151578161511b565b9050919050565b6000615169826131e2565b9150615174836131e2565b9250828202615182816131e2565b9150828204841483151761519957615198613ef9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006151da826131e2565b91506151e5836131e2565b9250826151f5576151f46151a0565b5b828204905092915050565b7f696e646578206f7574206f6620626f756e6473207768696c652061636365737360008201527f696e672061737365742062616c616e6365730000000000000000000000000000602082015250565b600061525c603283614245565b915061526782615200565b604082019050919050565b6000602082019050818103600083015261528b8161524f565b9050919050565b60006040820190506152a7600083018561318c565b6152b46020830184613a22565b9392505050565b60006152c682614c81565b91506152d183614c81565b9250828203905060ff8111156152ea576152e9613ef9565b5b92915050565b60006152fb82614c81565b91506000820361530e5761530d613ef9565b5b600182039050919050565b7f7374657057686974654c69737400000000000000000000000000000000000000600082015250565b600061534f600d83614d23565b915061535a82615319565b600d82019050919050565b60008160f01b9050919050565b600061537d82615365565b9050919050565b615395615390826132e4565b615372565b82525050565b60006153a682615342565b91506153b28284615384565b60028201915081905092915050565b60006060820190506153d6600083018661318c565b6153e3602083018561318c565b6153f06040830184613a22565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615454602a83614245565b915061545f826153f8565b604082019050919050565b6000602082019050818103600083015261548381615447565b9050919050565b6000615495826131e2565b91506154a0836131e2565b92508282019050808211156154b8576154b7613ef9565b5b92915050565b60006154c9826131e2565b9150600082036154dc576154db613ef9565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061551d602083614245565b9150615528826154e7565b602082019050919050565b6000602082019050818103600083015261554c81615510565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006155af602683614245565b91506155ba82615553565b604082019050919050565b600060208201905081810360008301526155de816155a2565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061561b601d83614245565b9150615626826155e5565b602082019050919050565b6000602082019050818103600083015261564a8161560e565b905091905056fe417373657442616c616e63654272616e6368207265747572696e67206966596573417373657442616c616e63654272616e6368207265747572696e67206e65787453746570496e646578a2646970667358221220e359a367c79fef5dc8733ffeed58ef22d245bd9f9c3a101005588bb035633e5c64736f6c63430008120033",
  "devdoc": {
    "events": {
      "RemainingAsset((uint8,address),uint256,uint256,uint256)": {
        "params": {
          "asset": "The asset.",
          "feeAmount": "The portion of the total amount that FMP will keep as a fee.",
          "totalAmount": "The total amount of the asset.",
          "userAmount": "The portion of the total amount that is sent to the user."
        }
      },
      "WorkflowContinuation(uint256,address,((uint8,address),uint256))": {
        "params": {
          "nonce": "The nonce provided by the caller on the source chain, used to correlate the source chain workflow segment with this segment.",
          "startingAsset": "The asset that was transferred from the source chain to this chain"
        }
      },
      "WorkflowExecution(address,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]))": {
        "params": {
          "userAddress": "The user for which this workflow is executing.",
          "workflow": "The workflow."
        }
      },
      "WorkflowStepExecution(uint16,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16),uint16,address,((uint8,address),uint256)[],(((uint8,address),uint256)[],((uint8,address),uint256)[],int16,int24))": {
        "params": {
          "inputAssetAmounts": "The input assets, with the absolute amount of each asset.",
          "result": "The result returned form the step invocation.",
          "step": "The step configuration.",
          "stepAddress": "The address of the step used for this invocation.",
          "stepIndex": "The index of the step in the Workflow.steps array.",
          "stepTypeId": "The logical id of the step (also repeated in the step param but duplicated here for convenience)."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "executeWorkflow((address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]))": {
        "params": {
          "workflow": "The workflow to execute."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RemainingAsset((uint8,address),uint256,uint256,uint256)": {
        "notice": "This event is emitted after the workflow has completed, once for each asset ramining with a non-zero amount."
      },
      "WorkflowContinuation(uint256,address,((uint8,address),uint256))": {
        "notice": "This event is emitted when this is a continuation of a workflow from another chain"
      },
      "WorkflowExecution(address,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]))": {
        "notice": "This event is emitted when a workflow execution begins."
      },
      "WorkflowStepExecution(uint16,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16),uint16,address,((uint8,address),uint256)[],(((uint8,address),uint256)[],((uint8,address),uint256)[],int16,int24))": {
        "notice": "This event is emitted when immediately after invoking a step in the workflow."
      }
    },
    "kind": "user",
    "methods": {
      "continueWorkflow(address,uint256,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]),((uint8,address),uint256))": {
        "notice": "Continue a workflow that started on a different chain.This is not callable by 3rd parties, only approved bridge integrations call this method."
      },
      "executeWorkflow((address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[]))": {
        "notice": "Initiate the execution of a workflow."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7587,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 6291,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "eternalStorageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6293,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "upstreamAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6295,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "isUserProxy",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 172,
        "contract": "contracts/WorkflowRunner.sol:WorkflowRunner",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}