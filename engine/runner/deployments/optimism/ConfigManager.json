{
  "address": "0x5DE1dF35467c24C024E598ae6a2FB98240e62EC7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_frontDoorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldFeeIsPercent",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newFeeIsPercent",
          "type": "bool"
        }
      ],
      "name": "DefaultFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogNewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stepAddress",
          "type": "address"
        }
      ],
      "name": "StepAddressSetEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldFeeIsPercent",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newFeeIsPercent",
          "type": "bool"
        }
      ],
      "name": "StepFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "runnerAddress",
          "type": "address"
        }
      ],
      "name": "addRunnerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eternalStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frontDoorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRunnerAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        }
      ],
      "name": "getStepAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStepCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        }
      ],
      "name": "getStepFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStepInfoAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "stepTypeId",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "feeIsPercent",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "latest",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "whitelist",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "blacklist",
              "type": "address[]"
            }
          ],
          "internalType": "struct StepInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscribers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUserProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "runnerAddress",
          "type": "address"
        }
      ],
      "name": "removeRunnerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "stepAddress",
          "type": "address"
        }
      ],
      "name": "removeStepAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "feeIsPercent",
          "type": "bool"
        }
      ],
      "name": "setDefaultFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "stepTypeId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "stepAddress",
          "type": "address"
        }
      ],
      "name": "setStepAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "stepTypeId",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "feeIsPercent",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct StepFee[]",
          "name": "stepFeeUpdates",
          "type": "tuple[]"
        }
      ],
      "name": "setStepFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newSubscribers",
          "type": "address[]"
        }
      ],
      "name": "updateSubscribers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upstreamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xce202bc05218fd33f021f5080f976a10158200b45b3e37d911f1d0b2b6f11bfe",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x5DE1dF35467c24C024E598ae6a2FB98240e62EC7",
    "transactionIndex": 3,
    "gasUsed": "3036836",
    "logsBloom": "0x
    "blockHash": "0x758d3ac231fb7f327a22ea30e0cd6b558129393f29ca9556e4b26ec866dc6e27",
    "transactionHash": "0xce202bc05218fd33f021f5080f976a10158200b45b3e37d911f1d0b2b6f11bfe",
    "logs": [],
    "blockNumber": 107882074,
    "cumulativeGasUsed": "4118075",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x696b93e408acf1c066839690A365e78C4492c276"
  ],
  "numDeployments": 3,
  "solcInputHash": "d9185c3cd17850e7ae68061d865bb58e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_frontDoorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldFeeIsPercent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newFeeIsPercent\",\"type\":\"bool\"}],\"name\":\"DefaultFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"}],\"name\":\"StepAddressSetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldFeeIsPercent\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newFeeIsPercent\",\"type\":\"bool\"}],\"name\":\"StepFeeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runnerAddress\",\"type\":\"address\"}],\"name\":\"addRunnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eternalStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frontDoorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRunnerAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"}],\"name\":\"getStepAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStepCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"}],\"name\":\"getStepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStepInfoAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"feeIsPercent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"latest\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"blacklist\",\"type\":\"address[]\"}],\"internalType\":\"struct StepInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscribers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUserProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"runnerAddress\",\"type\":\"address\"}],\"name\":\"removeRunnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"}],\"name\":\"removeStepAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"feeIsPercent\",\"type\":\"bool\"}],\"name\":\"setDefaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"}],\"name\":\"setStepAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"feeIsPercent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct StepFee[]\",\"name\":\"stepFeeUpdates\",\"type\":\"tuple[]\"}],\"name\":\"setStepFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newSubscribers\",\"type\":\"address[]\"}],\"name\":\"updateSubscribers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upstreamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConfigManager.sol\":\"ConfigManager\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/ConfigManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './EternalStorage.sol';\\nimport './StepInfo.sol';\\nimport './LibConfigReader.sol';\\nimport './FreeMarketBase.sol';\\nimport './FrontDoor.sol';\\n\\nstruct StepFee {\\n  uint16 stepTypeId;\\n  bool feeIsPercent;\\n  uint256 fee;\\n}\\n\\ncontract ConfigManager is FreeMarketBase {\\n  address public immutable frontDoorAddress;\\n  //                                    1234567890123456789012345678901234567890123456789012345678901234\\n  bytes32 constant allStepAddresses = 0x18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e99139555; // keccak256('allStepAddresses')\\n\\n  event StepFeeUpdated(uint16 stepTypeId, uint256 oldFee, bool oldFeeIsPercent, uint256 newFee, bool newFeeIsPercent);\\n  event DefaultFeeUpdated(uint256 oldFee, bool oldFeeIsPercent, uint256 newFee, bool newFeeIsPercent);\\n\\n  constructor(\\n    address payable _frontDoorAddress\\n  )\\n    FreeMarketBase(\\n      msg.sender, // owner\\n      FrontDoor(_frontDoorAddress).eternalStorageAddress(), // eternal storage address\\n      address(0), // upstream (this doesn't have one)\\n      false // isUserProxy\\n    )\\n  {\\n    frontDoorAddress = _frontDoorAddress;\\n  }\\n\\n  function getStepAddress(uint16 stepTypeId) external view returns (address) {\\n    return LibConfigReader.getStepAddressInternal(eternalStorageAddress, stepTypeId);\\n  }\\n\\n  function getStepCount() external view returns (uint256) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.lengthEnumerableMapUintToAddress(LibConfigReader.latestStepAddresses);\\n  }\\n\\n  function getStepInfoAt(uint256 index) public view returns (StepInfo memory) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    (uint256 stepTypeId, address stepAddress) = eternalStorage.atEnumerableMapUintToAddress(LibConfigReader.latestStepAddresses, index);\\n\\n    bytes32 whitelistKey = LibConfigReader.getStepWhitelistKey(uint16(stepTypeId));\\n    uint256 whitelistCount = eternalStorage.lengthEnumerableMapAddressToUint(whitelistKey);\\n    address[] memory whitelist = new address[](whitelistCount);\\n    for (uint256 i = 0; i < whitelistCount; ++i) {\\n      (address whitelistedAddress, ) = eternalStorage.atEnumerableMapAddressToUint(whitelistKey, i);\\n      whitelist[i] = whitelistedAddress;\\n    }\\n\\n    bytes32 blacklistKey = LibConfigReader.getStepBlacklistKey(uint16(stepTypeId));\\n    uint256 blacklistCount = eternalStorage.lengthEnumerableMapAddressToUint(blacklistKey);\\n    address[] memory blacklist = new address[](blacklistCount);\\n    for (uint256 i = 0; i < blacklistCount; ++i) {\\n      (address blacklistedAddress, ) = eternalStorage.atEnumerableMapAddressToUint(blacklistKey, i);\\n      blacklist[i] = blacklistedAddress;\\n    }\\n\\n    (uint256 fee, bool feeIsPercent) = LibConfigReader.getStepFee(eternalStorageAddress, uint16(stepTypeId));\\n    return StepInfo(uint16(stepTypeId), feeIsPercent, fee, stepAddress, whitelist, blacklist);\\n  }\\n\\n  event StepAddressSetEvent(uint16 stepTypeId, address stepAddress);\\n\\n  function setStepAddress(uint16 stepTypeId, address stepAddress) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    eternalStorage.setEnumerableMapUintToAddress(LibConfigReader.latestStepAddresses, stepTypeId, stepAddress);\\n    // using the white list map like a set, we only care about the keys\\n    // this sets it as the current step for the stepTypeId\\n    eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.getStepWhitelistKey(stepTypeId), stepAddress, 0);\\n    // this adds it to the list of all valid steps\\n    eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.allStepAddresses, stepAddress, 0);\\n    // remove it from the black list just in case it was there\\n    eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.getStepBlacklistKey(stepTypeId), stepAddress);\\n    emit StepAddressSetEvent(stepTypeId, stepAddress);\\n  }\\n\\n  function removeStepAddress(uint16 stepTypeId, address stepAddress) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    address latest = eternalStorage.getEnumerableMapUintToAddress(LibConfigReader.latestStepAddresses, stepTypeId);\\n    require(stepAddress != latest, 'cannot remove latest step address');\\n    eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.getStepBlacklistKey(stepTypeId), stepAddress, 0);\\n    eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.getStepWhitelistKey(stepTypeId), stepAddress);\\n    eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.allStepAddresses, stepAddress);\\n    emit StepAddressSetEvent(stepTypeId, stepAddress);\\n  }\\n\\n  function addRunnerAddress(address runnerAddress) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    // using the map like a set, we only care about the keys\\n    eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.runnerAddresses, runnerAddress, 0);\\n  }\\n\\n  function removeRunnerAddress(address runnerAddress) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.runnerAddresses, runnerAddress);\\n  }\\n\\n  function getRunnerAddresses() external view returns (address[] memory) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    uint256 count = eternalStorage.lengthEnumerableMapAddressToUint(LibConfigReader.runnerAddresses);\\n    address[] memory runners = new address[](count);\\n    for (uint256 i = 0; i < count; ++i) {\\n      (address runnerAddress, ) = eternalStorage.atEnumerableMapAddressToUint(LibConfigReader.runnerAddresses, i);\\n      runners[i] = runnerAddress;\\n    }\\n    return runners;\\n  }\\n\\n  function setDefaultFee(uint256 fee, bool feeIsPercent) external onlyOwner {\\n    require(feeIsPercent || fee & LibConfigReader.FEE_MASK == 0, 'absolute fee out of bounds');\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    uint256 encodedFee = LibConfigReader.encodeFee(fee, feeIsPercent);\\n    bytes32 feeKey = LibConfigReader.getDefaultFeeKey();\\n    uint256 existingEncodedFee = eternalStorage.getUint(LibConfigReader.getDefaultFeeKey());\\n    if (encodedFee != existingEncodedFee) {\\n      eternalStorage.setUint(feeKey, encodedFee);\\n      (uint256 existingFee, bool existingFeeIsPercent) = LibConfigReader.decodeFee(encodedFee);\\n      emit DefaultFeeUpdated(existingFee, existingFeeIsPercent, fee, feeIsPercent);\\n    }\\n  }\\n\\n  function setStepFees(StepFee[] calldata stepFeeUpdates) external onlyOwner {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    for (uint256 i = 0; i < stepFeeUpdates.length; ++i) {\\n      // if its an absolute value, it cannot have the top bit set\\n      require(stepFeeUpdates[i].feeIsPercent || stepFeeUpdates[i].fee & LibConfigReader.FEE_MASK == 0, 'absolute fee out of bounds');\\n      bytes32 feeKey = LibConfigReader.getStepFeeKey(stepFeeUpdates[i].stepTypeId);\\n      // read the exising fee data and see if it's changing\\n      uint256 existingFeeEncoded = eternalStorage.getUint(feeKey);\\n      uint256 feeEncoded = LibConfigReader.encodeFee(stepFeeUpdates[i].fee, stepFeeUpdates[i].feeIsPercent);\\n      if (feeEncoded != existingFeeEncoded) {\\n        (uint256 existingFee, bool existingFeeIsPercent) = LibConfigReader.decodeFee(existingFeeEncoded);\\n        emit StepFeeUpdated(\\n          stepFeeUpdates[i].stepTypeId,\\n          existingFee,\\n          existingFeeIsPercent,\\n          stepFeeUpdates[i].fee,\\n          stepFeeUpdates[i].feeIsPercent\\n        );\\n        eternalStorage.setUint(feeKey, feeEncoded);\\n      }\\n    }\\n  }\\n\\n  function getStepFee(uint16 stepTypeId) external view returns (uint256, bool) {\\n    return LibConfigReader.getStepFee(eternalStorageAddress, stepTypeId);\\n  }\\n\\n  function getDefaultFee() external view returns (uint256, bool) {\\n    return LibConfigReader.getDefaultFee(eternalStorageAddress);\\n  }\\n\\n  function getSubscribers() external view returns (address[] memory) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    uint256 count = eternalStorage.lengthEnumerableMapAddressToUint(LibConfigReader.subscribers);\\n    address[] memory subscribers = new address[](count);\\n    for (uint256 i = 0; i < count; ++i) {\\n      (address subscriber, ) = eternalStorage.atEnumerableMapAddressToUint(LibConfigReader.subscribers, i);\\n      subscribers[i] = subscriber;\\n    }\\n    return subscribers;\\n  }\\n\\n  // not very scalable, but OK for now\\n  // would be better to add/remove subscribers one at a time\\n  function updateSubscribers(address[] calldata newSubscribers) external {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    // delete all existing subscribers\\n    while (true) {\\n      uint256 count = eternalStorage.lengthEnumerableMapAddressToUint(LibConfigReader.subscribers);\\n      if (count == 0) {\\n        break;\\n      }\\n      (address subscriber, ) = eternalStorage.atEnumerableMapAddressToUint(LibConfigReader.subscribers, count - 1);\\n      eternalStorage.removeEnumerableMapAddressToUint(LibConfigReader.subscribers, subscriber);\\n    }\\n\\n    // add current subscribers back in\\n    for (uint256 i = 0; i < newSubscribers.length; ++i) {\\n      eternalStorage.setEnumerableMapAddressToUint(LibConfigReader.subscribers, newSubscribers[i], 0);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3fdf587969878f52e9a6a441312595a05396bd2b60249648942c869529e60cab\",\"license\":\"MIT\"},\"contracts/EternalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\n\\nimport './Ownable.sol';\\n\\ncontract EternalStorage is Ownable {\\n  address internal writer;\\n\\n  modifier onlyWriter() {\\n    require(msg.sender == writer);\\n    _;\\n  }\\n\\n  constructor(address owner, address initialWriter) Ownable(owner) {\\n    writer = initialWriter;\\n  }\\n\\n  event StorageWriterChanged(address oldWriter, address newWriter);\\n\\n  function getWriter() public view returns (address) {\\n    return writer;\\n  }\\n\\n  function setWriter(address newWriter) public onlyOwner {\\n    emit StorageWriterChanged(writer, newWriter);\\n    writer = newWriter;\\n  }\\n\\n  mapping(bytes32 => uint256) uIntStorage;\\n  mapping(bytes32 => string) stringStorage;\\n  mapping(bytes32 => address) addressStorage;\\n  mapping(bytes32 => bytes) bytesStorage;\\n  mapping(bytes32 => bool) boolStorage;\\n  mapping(bytes32 => int256) intStorage;\\n\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n  using EnumerableMap for EnumerableMap.AddressToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n  using EnumerableMap for EnumerableMap.UintToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) enumerableMapUintToAddressMapStorage;\\n  mapping(bytes32 => EnumerableMap.AddressToUintMap) enumerableMapAddressToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToBytes32Map) enumerableMapBytes32ToBytes32MapStorage;\\n  mapping(bytes32 => EnumerableMap.UintToUintMap) enumerableMapUintToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToUintMap) enumerableMapBytes32ToUintMapStorage;\\n\\n  // *** Getter Methods ***\\n  function getUint(bytes32 _key) external view returns (uint256) {\\n    return uIntStorage[_key];\\n  }\\n\\n  function getString(bytes32 _key) external view returns (string memory) {\\n    return stringStorage[_key];\\n  }\\n\\n  function getAddress(bytes32 _key) external view returns (address) {\\n    return addressStorage[_key];\\n  }\\n\\n  function getBytes(bytes32 _key) external view returns (bytes memory) {\\n    return bytesStorage[_key];\\n  }\\n\\n  function getBool(bytes32 _key) external view returns (bool) {\\n    return boolStorage[_key];\\n  }\\n\\n  function getInt(bytes32 _key) external view returns (int256) {\\n    return intStorage[_key];\\n  }\\n\\n  // *** Setter Methods ***\\n  function setUint(bytes32 _key, uint256 _value) external onlyWriter {\\n    uIntStorage[_key] = _value;\\n  }\\n\\n  function setString(bytes32 _key, string memory _value) external onlyWriter {\\n    stringStorage[_key] = _value;\\n  }\\n\\n  function setAddress(bytes32 _key, address _value) external {\\n    addressStorage[_key] = _value;\\n  }\\n\\n  function setBytes(bytes32 _key, bytes memory _value) external onlyWriter {\\n    bytesStorage[_key] = _value;\\n  }\\n\\n  function setBool(bytes32 _key, bool _value) external onlyWriter {\\n    boolStorage[_key] = _value;\\n  }\\n\\n  function setInt(bytes32 _key, int256 _value) external onlyWriter {\\n    intStorage[_key] = _value;\\n  }\\n\\n  // *** Delete Methods ***\\n  function deleteUint(bytes32 _key) external onlyWriter {\\n    delete uIntStorage[_key];\\n  }\\n\\n  function deleteString(bytes32 _key) external onlyWriter {\\n    delete stringStorage[_key];\\n  }\\n\\n  function deleteAddress(bytes32 _key) external onlyWriter {\\n    delete addressStorage[_key];\\n  }\\n\\n  function deleteBytes(bytes32 _key) external onlyWriter {\\n    delete bytesStorage[_key];\\n  }\\n\\n  function deleteBool(bytes32 _key) external onlyWriter {\\n    delete boolStorage[_key];\\n  }\\n\\n  function deleteInt(bytes32 _key) external onlyWriter {\\n    delete intStorage[_key];\\n  }\\n\\n  // enumerable get\\n\\n  function getEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  // enumerable tryGet\\n\\n  function tryGetEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bool, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (bool, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (bool, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  // enumerable set\\n\\n  function setEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2, address _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapAddressToUint(bytes32 _key1, address _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2, bytes32 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapUintToUint(bytes32 _key1, uint256 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  // enumerable remove\\n\\n  function removeEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToAddressMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapAddressToUint(bytes32 _key1, address _key2) external onlyWriter {\\n    enumerableMapAddressToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToBytes32MapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  // enumerable contains\\n\\n  function containsEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToBytes32(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapUintToUint(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToUint(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  // enumerable length\\n\\n  function lengthEnumerableMapUintToAddress(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToAddressMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapAddressToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToBytes32(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapUintToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].length();\\n  }\\n\\n  // enumerable at\\n\\n  function atEnumerableMapUintToAddress(bytes32 _key1, uint256 _index) external view returns (uint256, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapAddressToUint(bytes32 _key1, uint256 _index) external view returns (address, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToBytes32(bytes32 _key1, uint256 _index) external view returns (bytes32, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapUintToUint(bytes32 _key1, uint256 _index) external view returns (uint256, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToUint(bytes32 _key1, uint256 _index) external view returns (bytes32, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].at(_index);\\n  }\\n}\\n\",\"keccak256\":\"0x17a2dde162f6ed01a95b2c64c4b5b345e7d0e8fcf4f51d1a861c199cd91fcbef\",\"license\":\"MIT\"},\"contracts/FreeMarketBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './Ownable.sol';\\n\\ncontract FreeMarketBase is Ownable {\\n  // TODO create getters\\n  address public eternalStorageAddress;\\n  address public upstreamAddress;\\n  bool public isUserProxy;\\n\\n  constructor(\\n    address owner,\\n    address eternalStorage,\\n    address upstream,\\n    bool userProxy\\n  ) Ownable(owner) {\\n    eternalStorageAddress = eternalStorage;\\n    upstreamAddress = upstream;\\n    isUserProxy = userProxy;\\n  }\\n}\\n\",\"keccak256\":\"0xeeac9b86b1e934d1a84316e3f006abb32375088cef75fe0a56e74e2e1e38b87e\",\"license\":\"MIT\"},\"contracts/FrontDoor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './EternalStorage.sol';\\nimport './Proxy.sol';\\nimport './LibStorageWriter.sol';\\n\\ncontract FrontDoor is Proxy {\\n  constructor() Proxy(msg.sender, address(new EternalStorage(msg.sender, address(0))), address(0x0), false) {\\n    bytes32 key = keccak256(abi.encodePacked('frontDoor'));\\n    StorageWriter.setAddress(eternalStorageAddress, key, address(this));\\n  }\\n\\n  event UpstreamChanged(address oldUpstream, address newUpstream);\\n  event UpstreamRemoved(address oldUpstream);\\n\\n  function setUpstream(address newUpstream) public onlyOwner {\\n    address oldUpstream = upstreamAddress;\\n    upstreamAddress = newUpstream;\\n    emit UpstreamChanged(oldUpstream, newUpstream);\\n  }\\n}\\n\",\"keccak256\":\"0x62fda07ff75e261b1fbac980b48508481f205c99214206cabdbde790e76f40c8\",\"license\":\"MIT\"},\"contracts/IHasUpstream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IHasUpstream {\\n  function getUpstream() external view returns (address);\\n}\\n\",\"keccak256\":\"0xef83d78a64e9c3cbd2b9238523af2a9a03abc8c42890e57a1ffeefddd7999be3\",\"license\":\"MIT\"},\"contracts/LibConfigReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './EternalStorage.sol';\\n\\nlibrary LibConfigReader {\\n  string constant STEP_FEES_KEY = 'stepFees';\\n  string constant DEFAULT_FEE_KEY = 'defaultFees';\\n  uint256 constant FEE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n  // latestStepAddresses maps stepTypeId to latest and greatest version of that step\\n  bytes32 constant latestStepAddresses = 0xc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd; // keccak256('latestActionAddresses')\\n  bytes32 constant runnerAddresses = 0x32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f5; // keccak256('runnerAddresses')\\n  bytes32 constant allStepAddresses = 0x18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e99139555; // keccak256('allStepAddresses')\\n  bytes32 public constant subscribers = keccak256('subscribers');\\n\\n  function getStepAddressInternal(address eternalStorageAddress, uint16 stepTypeId) internal view returns (address) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.getEnumerableMapUintToAddress(latestStepAddresses, stepTypeId);\\n  }\\n\\n  function getStepWhitelistKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked('stepWhiteList', stepTypeId));\\n  }\\n\\n  function getStepBlacklistKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked('stepBlackList', stepTypeId));\\n  }\\n\\n  function isStepAddressWhitelisted(address eternalStorageAddress, uint16 stepTypeId, address stepAddress) internal view returns (bool) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.containsEnumerableMapAddressToUint(getStepWhitelistKey(stepTypeId), stepAddress);\\n  }\\n\\n  function isStepAddressWhitelisted(address eternalStorageAddress, address stepAddress) internal view returns (bool) {\\n    EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n    return eternalStorage.containsEnumerableMapAddressToUint(allStepAddresses, stepAddress);\\n  }\\n\\n  function getStepFeeKey(uint16 stepTypeId) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(STEP_FEES_KEY, stepTypeId));\\n  }\\n\\n  function getDefaultFeeKey() internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(DEFAULT_FEE_KEY));\\n  }\\n\\n  function encodeFee(uint256 _fee, bool isPercent) internal pure returns (uint256) {\\n    uint256 fee = _fee;\\n    if (isPercent) {\\n      fee |= FEE_MASK;\\n    }\\n    return fee;\\n  }\\n\\n  function decodeFee(uint256 feeEncoded) internal pure returns (uint256, bool) {\\n    bool isPercent = (feeEncoded & FEE_MASK) > 0;\\n    uint256 fee = feeEncoded & ~FEE_MASK;\\n    return (fee, isPercent);\\n  }\\n\\n  function getDefaultFee(address eternalStorageAddress) internal view returns (uint256, bool) {\\n    uint256 encodedFee = EternalStorage(eternalStorageAddress).getUint(getDefaultFeeKey());\\n    return decodeFee(encodedFee);\\n  }\\n\\n  function getStepFee(address eternalStorageAddress, uint16 stepTypeId) internal view returns (uint256, bool) {\\n    uint256 encodedFee = EternalStorage(eternalStorageAddress).getUint(getStepFeeKey(stepTypeId));\\n    return decodeFee(encodedFee);\\n  }\\n\\n  function isSubscriber(address eternalStorageAddress, address callerAddress) internal view returns (bool) {\\n    return EternalStorage(eternalStorageAddress).containsEnumerableMapAddressToUint(subscribers, callerAddress);\\n  }\\n}\\n\",\"keccak256\":\"0xa97688e4d200083626ba0699ebffa1ff334d8178a27e44cf79790787a5bd91d3\",\"license\":\"MIT\"},\"contracts/LibStorageWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary StorageWriter {\\n    // *** Setter Methods ***\\n    function setUint(address storageAddr, bytes32 key, uint256 value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setUint(bytes32,uint256)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setString(address storageAddr, bytes32 key, string memory value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setAddress(address storageAddr, bytes32 key, address value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setAddress(bytes32,address)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setBytes(address storageAddr, bytes32 key, bytes memory value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setBytes(bytes32,bytes memory)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setBool(address storageAddr, bytes32 key, bool value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setBool(bytes32,bool)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    function setInt(address storageAddr, bytes32 key, int256 value) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setInt(bytes32,int256)\\\", key, value));\\n        require(success, string(returnData));\\n    }\\n\\n    // *** Delete Methods ***\\n    function deleteUint(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"deleteUint(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteString(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteAddress(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteBytes(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteBool(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function deleteInt(address storageAddr, bytes32 key) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setString(bytes32,string memory)\\\", key));\\n        require(success, string(returnData));\\n    }\\n\\n    function setStepAddress(address storageAddr, uint16 stepTypeId, address stepAddress) internal {\\n        (bool success, bytes memory returnData) =\\n            storageAddr.delegatecall(abi.encodeWithSignature(\\\"setStepAddress(uint16,address)\\\", stepTypeId, stepAddress));\\n        require(success, string(returnData));\\n    }\\n}\\n\",\"keccak256\":\"0xccede755458ec2a36261519cf06894f0bf1db0128212f59fb18e82ba02f696a7\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ncontract Ownable {\\n  address payable public owner;\\n\\n  constructor(address initialOwner) {\\n    owner = payable(initialOwner);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  event LogNewOwner(address sender, address newOwner);\\n\\n  function setOwner(address payable newOwner) external onlyOwner {\\n    require(newOwner != address(0));\\n    owner = newOwner;\\n    emit LogNewOwner(msg.sender, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0xa798ec89af451652edfa77d05689d3330f503ed4bf9e01d6620d6b2c6a617544\",\"license\":\"MIT\"},\"contracts/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './IHasUpstream.sol';\\nimport './FreeMarketBase.sol';\\nimport './EternalStorage.sol';\\n\\n\\ncontract Proxy is FreeMarketBase, IHasUpstream {\\n  bytes32 constant runnerAddresses = 0x32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f5; // keccak256('runnerAddresses')\\n\\n  constructor(\\n    address owner,\\n    address storageAddress,\\n    address upstream,\\n    bool userProxy\\n  ) FreeMarketBase(owner, storageAddress, upstream, userProxy) {}\\n\\n  function getUpstream() external view virtual returns (address) {\\n    return upstreamAddress;\\n  }\\n\\n  function resolveUpstream() internal view returns (address addr) {\\n    address upstreamFromArgs = getAddressFromCalldata();\\n\\n    if (upstreamFromArgs != address(0)) {\\n\\n      EternalStorage eternalStorage = EternalStorage(eternalStorageAddress);\\n      require(eternalStorage.containsEnumerableMapAddressToUint(runnerAddresses, upstreamFromArgs), 'provided upstream not whitelisted');\\n      return upstreamFromArgs;\\n    } else {\\n\\n    }\\n    return upstreamAddress;\\n  }\\n\\n  function getAddressFromCalldata() internal pure returns (address addr) {\\n    assembly {\\n      let offset := add(4, calldataload(4))\\n      addr := calldataload(offset)\\n    }\\n  }\\n\\n  /// @dev this forwards all calls generically to upstream, only the owner can invoke this\\n  fallback() external payable {\\n\\n    address upstream = resolveUpstream();\\n\\n    _delegate(upstream);\\n  }\\n\\n  /// @dev this allows this contract to receive ETH\\n  receive() external payable {\\n    // noop\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   */\\n  function _delegate(address upstr) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), upstr, 0, calldatasize(), 0, 0)\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n      // let ptr := mload(0x40)\\n      // calldatacopy(ptr, 0, calldatasize())\\n      // let result := delegatecall(gas(), implementation, ptr, calldatasize(), 0, 0)\\n      // let size := returndatasize()\\n      // returndatacopy(ptr, 0, size)\\n      // switch result\\n      // case 0 {\\n      //   revert(ptr, size)\\n      // }\\n      // default {\\n      //   return(ptr, size)\\n      // }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x474762384d8c814a214e08ec2f0ada71584f588bd0f1052f0bcb90767b9d6d23\",\"license\":\"MIT\"},\"contracts/StepInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct StepInfo {\\n  uint16 stepTypeId;\\n  bool feeIsPercent;\\n  uint256 fee;\\n  address latest;\\n  address[] whitelist;\\n  address[] blacklist;\\n}\\n\",\"keccak256\":\"0x1d845de8c0672ac8979dc8e35210a82fe1aedb6774ab1ef7eaaf0bf0eda56b67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620037e7380380620037e7833981810160405281019062000037919062000234565b338173ffffffffffffffffffffffffffffffffffffffff1663384782fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000084573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000aa9190620002ab565b60008083806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260146101000a81548160ff021916908315150217905550505050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620002dd565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fc82620001cf565b9050919050565b6200020e81620001ef565b81146200021a57600080fd5b50565b6000815190506200022e8162000203565b92915050565b6000602082840312156200024d576200024c620001ca565b5b60006200025d848285016200021d565b91505092915050565b60006200027382620001cf565b9050919050565b620002858162000266565b81146200029157600080fd5b50565b600081519050620002a5816200027a565b92915050565b600060208284031215620002c457620002c3620001ca565b5b6000620002d48482850162000294565b91505092915050565b6080516134ee620002f9600039600061100101526134ee6000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063699a2057116100ad5780639566b960116100715780639566b960146102fa5780639c98a5621461032b578063c4006c8114610347578063f903397714610363578063ff05c2a8146103935761012c565b8063699a2057146102565780636fd63351146102865780638a04867b146102a45780638da5cb5b146102c0578063910752cd146102de5761012c565b806332b56aaf116100f457806332b56aaf146101c457806333905e84146101e2578063384782fe146101fe57806350fd910e1461021c57806354f09a011461023a5761012c565b806305cc61ad14610131578063073728ea1461014f5780630f53b8541461016d57806313af40351461018957806321bacf28146101a5575b600080fd5b6101396103b1565b604051610146919061269c565b60405180910390f35b6101576105da565b604051610164919061269c565b60405180910390f35b6101876004803603810190610182919061272e565b610809565b005b6101a3600480360381019061019e91906127ac565b610b67565b005b6101ad610c74565b6040516101bb92919061280d565b60405180910390f35b6101cc610caa565b6040516101d99190612845565b60405180910390f35b6101fc60048036038101906101f791906128c5565b610cd0565b005b610206610fd9565b6040516102139190612845565b60405180910390f35b610224610fff565b6040516102319190612845565b60405180910390f35b610254600480360381019061024f9190612968565b611023565b005b610270600480360381019061026b91906129e1565b6113bc565b60405161027d9190612b3a565b60405180910390f35b61028e6118a6565b60405161029b9190612b5c565b60405180910390f35b6102be60048036038101906102b99190612b77565b611971565b005b6102c8611a99565b6040516102d59190612bb3565b60405180910390f35b6102f860048036038101906102f39190612b77565b611abd565b005b610314600480360381019061030f9190612bce565b611bd0565b60405161032292919061280d565b60405180910390f35b61034560048036038101906103409190612c27565b611c08565b005b610361600480360381019061035c919061272e565b611e5f565b005b61037d60048036038101906103789190612bce565b612164565b60405161038a9190612845565b60405180910390f35b61039b612199565b6040516103a89190612c67565b60405180910390f35b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b0d10fd7f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d6040518263ffffffff1660e01b81526004016104359190612c9b565b602060405180830381865afa158015610452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104769190612ccb565b905060008167ffffffffffffffff81111561049457610493612cf8565b5b6040519080825280602002602001820160405280156104c25781602001602082028036833780820191505090505b50905060005b828110156105d05760008473ffffffffffffffffffffffffffffffffffffffff1663619f6cc67f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d846040518363ffffffff1660e01b815260040161052d929190612d27565b6040805180830381865afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d9190612d65565b5090508083838151811061058457610583612da5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505050806105c990612e03565b90506104c8565b5080935050505090565b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b0d10fd7f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b6040518263ffffffff1660e01b81526004016106619190612c9b565b602060405180830381865afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190612ccb565b905060008167ffffffffffffffff8111156106c0576106bf612cf8565b5b6040519080825280602002602001820160405280156106ee5781602001602082028036833780820191505090505b50905060005b828110156107ff5760008473ffffffffffffffffffffffffffffffffffffffff1663619f6cc67f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b846040518363ffffffff1660e01b815260040161075c929190612d27565b6040805180830381865afa158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190612d65565b509050808383815181106107b3576107b2612da5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505050806107f890612e03565b90506106f4565b5080935050505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086157600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b866040518363ffffffff1660e01b81526004016108e8929190612e86565b602060405180830381865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190612eaf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090612f5f565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663ba4014fd6109be866121ac565b8560006040518463ffffffff1660e01b81526004016109df93929190612fba565b6020604051808303816000875af11580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a229190613006565b508173ffffffffffffffffffffffffffffffffffffffff166381425763610a48866121dc565b856040518363ffffffff1660e01b8152600401610a66929190613033565b600060405180830381600087803b158015610a8057600080fd5b505af1158015610a94573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663814257637f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b856040518363ffffffff1660e01b8152600401610af6929190613033565b600060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050507f5c250b46b4ab7901af16e469d68737ca13fe0eac242b19f323f7d3608565be7f8484604051610b5992919061306b565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bbf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bf857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd93382604051610c699291906130e9565b60405180910390a150565b600080610ca2600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661220c565b915091509091565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600115610eeb5760008173ffffffffffffffffffffffffffffffffffffffff16639b0d10fd7f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d6040518263ffffffff1660e01b8152600401610d5a9190612c9b565b602060405180830381865afa158015610d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9b9190612ccb565b905060008103610dab5750610eeb565b60008273ffffffffffffffffffffffffffffffffffffffff1663619f6cc67f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d600185610df79190613112565b6040518363ffffffff1660e01b8152600401610e14929190612d27565b6040805180830381865afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e549190612d65565b5090508273ffffffffffffffffffffffffffffffffffffffff1663814257637f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d836040518363ffffffff1660e01b8152600401610eb2929190613033565b600060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b505050505050610cf8565b60005b83839050811015610fd3578173ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d868685818110610f4957610f48612da5565b5b9050602002016020810190610f5e9190612b77565b60006040518463ffffffff1660e01b8152600401610f7e93929190612fba565b6020604051808303816000875af1158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc19190613006565b5080610fcc90612e03565b9050610eee565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461107b57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060005b838390508110156113b6578383828181106110c3576110c2612da5565b5b90506060020160200160208101906110db9190613146565b80611124575060007f800000000000000000000000000000000000000000000000000000000000000085858481811061111757611116612da5565b5b9050606002016040013516145b611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a906131bf565b60405180910390fd5b600061119885858481811061117b5761117a612da5565b5b90506060020160000160208101906111939190612bce565b6122a7565b905060008373ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5836040518263ffffffff1660e01b81526004016111d59190612c9b565b602060405180830381865afa1580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190612ccb565b9050600061126a8787868181106112305761122f612da5565b5b9050606002016040013588888781811061124d5761124c612da5565b5b90506060020160200160208101906112659190613146565b61230e565b90508181146113a25760008061127f8461234a565b915091507fe4bed5fed2349293688700d428390ab42256a50e167e7d49d77beec4fab218008989888181106112b7576112b6612da5565b5b90506060020160000160208101906112cf9190612bce565b83838c8c8b8181106112e4576112e3612da5565b5b905060600201604001358d8d8c81811061130157611300612da5565b5b90506060020160200160208101906113199190613146565b60405161132a9594939291906131df565b60405180910390a18673ffffffffffffffffffffffffffffffffffffffff1663e2a4853a86856040518363ffffffff1660e01b815260040161136d929190612d27565b600060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b5050505050505b505050806113af90612e03565b90506110a5565b50505050565b6113c461255a565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000808273ffffffffffffffffffffffffffffffffffffffff16634fcee0497fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b876040518363ffffffff1660e01b815260040161144c929190612d27565b6040805180830381865afa158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c9190613232565b91509150600061149b836121dc565b905060008473ffffffffffffffffffffffffffffffffffffffff16639b0d10fd836040518263ffffffff1660e01b81526004016114d89190612c9b565b602060405180830381865afa1580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115199190612ccb565b905060008167ffffffffffffffff81111561153757611536612cf8565b5b6040519080825280602002602001820160405280156115655781602001602082028036833780820191505090505b50905060005b828110156116535760008773ffffffffffffffffffffffffffffffffffffffff1663619f6cc686846040518363ffffffff1660e01b81526004016115b0929190612d27565b6040805180830381865afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f09190612d65565b5090508083838151811061160757611606612da5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050508061164c90612e03565b905061156b565b50600061165f866121ac565b905060008773ffffffffffffffffffffffffffffffffffffffff16639b0d10fd836040518263ffffffff1660e01b815260040161169c9190612c9b565b602060405180830381865afa1580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd9190612ccb565b905060008167ffffffffffffffff8111156116fb576116fa612cf8565b5b6040519080825280602002602001820160405280156117295781602001602082028036833780820191505090505b50905060005b828110156118175760008a73ffffffffffffffffffffffffffffffffffffffff1663619f6cc686846040518363ffffffff1660e01b8152600401611774929190612d27565b6040805180830381865afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190612d65565b509050808383815181106117cb576117ca612da5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050508061181090612e03565b905061172f565b50600080611847600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6123ab565b915091506040518060c001604052808b61ffff16815260200182151581526020018381526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001878152602001848152509b505050505050505050505050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663832860727fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b6040518263ffffffff1660e01b815260040161192a9190612c9b565b602060405180830381865afa158015611947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196b9190612ccb565b91505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119c957600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b8460006040518463ffffffff1660e01b8152600401611a5193929190612fba565b6020604051808303816000875af1158015611a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a949190613006565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b1557600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663814257637f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b846040518363ffffffff1660e01b8152600401611b9a929190613033565b600060405180830381600087803b158015611bb457600080fd5b505af1158015611bc8573d6000803e3d6000fd5b505050505050565b600080611bff600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846123ab565b91509150915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c6057600080fd5b8080611c8e575060007f80000000000000000000000000000000000000000000000000000000000000008316145b611ccd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc4906131bf565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000611d00848461230e565b90506000611d0c612449565b905060008373ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5611d34612449565b6040518263ffffffff1660e01b8152600401611d509190612c9b565b602060405180830381865afa158015611d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d919190612ccb565b9050808314611e57578373ffffffffffffffffffffffffffffffffffffffff1663e2a4853a83856040518363ffffffff1660e01b8152600401611dd5929190612d27565b600060405180830381600087803b158015611def57600080fd5b505af1158015611e03573d6000803e3d6000fd5b50505050600080611e138561234a565b915091507feddfd5447e7ef2b1e4581f32575efd480d5c905f04eae3ff6ec3b90f19811e2b82828a8a604051611e4c9493929190613272565b60405180910390a150505b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611eb757600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663107f89ad7fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b85856040518463ffffffff1660e01b8152600401611f3e939291906132b7565b6020604051808303816000875af1158015611f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f819190613006565b508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd611fa7856121dc565b8460006040518463ffffffff1660e01b8152600401611fc893929190612fba565b6020604051808303816000875af1158015611fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200b9190613006565b508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b8460006040518463ffffffff1660e01b815260040161206d93929190612fba565b6020604051808303816000875af115801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b09190613006565b508073ffffffffffffffffffffffffffffffffffffffff1663814257636120d6856121ac565b846040518363ffffffff1660e01b81526004016120f4929190613033565b600060405180830381600087803b15801561210e57600080fd5b505af1158015612122573d6000803e3d6000fd5b505050507f5c250b46b4ab7901af16e469d68737ca13fe0eac242b19f323f7d3608565be7f838360405161215792919061306b565b60405180910390a1505050565b6000612192600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836124ac565b9050919050565b600260149054906101000a900460ff1681565b6000816040516020016121bf919061337b565b604051602081830303815290604052805190602001209050919050565b6000816040516020016121ef91906133ed565b604051602081830303815290604052805190602001209050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5612235612449565b6040518263ffffffff1660e01b81526004016122519190612c9b565b602060405180830381865afa15801561226e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122929190612ccb565b905061229d8161234a565b9250925050915091565b60006040518060400160405280600881526020017f7374657046656573000000000000000000000000000000000000000000000000815250826040516020016122f1929190613479565b604051602081830303815290604052805190602001209050919050565b6000808390508215612340577f8000000000000000000000000000000000000000000000000000000000000000811790505b8091505092915050565b6000806000807f8000000000000000000000000000000000000000000000000000000000000000851611905060007f800000000000000000000000000000000000000000000000000000000000000019851690508082935093505050915091565b60008060008473ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56123d5866122a7565b6040518263ffffffff1660e01b81526004016123f19190612c9b565b602060405180830381865afa15801561240e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124329190612ccb565b905061243d8161234a565b92509250509250929050565b60006040518060400160405280600b81526020017f64656661756c744665657300000000000000000000000000000000000000000081525060405160200161249191906134a1565b60405160208183030381529060405280519060200120905090565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b856040518363ffffffff1660e01b8152600401612510929190612e86565b602060405180830381865afa15801561252d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125519190612eaf565b91505092915050565b6040518060c00160405280600061ffff16815260200160001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612603826125d8565b9050919050565b612613816125f8565b82525050565b6000612625838361260a565b60208301905092915050565b6000602082019050919050565b6000612649826125ac565b61265381856125b7565b935061265e836125c8565b8060005b8381101561268f5781516126768882612619565b975061268183612631565b925050600181019050612662565b5085935050505092915050565b600060208201905081810360008301526126b6818461263e565b905092915050565b600080fd5b600080fd5b600061ffff82169050919050565b6126df816126c8565b81146126ea57600080fd5b50565b6000813590506126fc816126d6565b92915050565b61270b816125f8565b811461271657600080fd5b50565b60008135905061272881612702565b92915050565b60008060408385031215612745576127446126be565b5b6000612753858286016126ed565b925050602061276485828601612719565b9150509250929050565b6000612779826125d8565b9050919050565b6127898161276e565b811461279457600080fd5b50565b6000813590506127a681612780565b92915050565b6000602082840312156127c2576127c16126be565b5b60006127d084828501612797565b91505092915050565b6000819050919050565b6127ec816127d9565b82525050565b60008115159050919050565b612807816127f2565b82525050565b600060408201905061282260008301856127e3565b61282f60208301846127fe565b9392505050565b61283f816125f8565b82525050565b600060208201905061285a6000830184612836565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261288557612884612860565b5b8235905067ffffffffffffffff8111156128a2576128a1612865565b5b6020830191508360208202830111156128be576128bd61286a565b5b9250929050565b600080602083850312156128dc576128db6126be565b5b600083013567ffffffffffffffff8111156128fa576128f96126c3565b5b6129068582860161286f565b92509250509250929050565b60008083601f84011261292857612927612860565b5b8235905067ffffffffffffffff81111561294557612944612865565b5b6020830191508360608202830111156129615761296061286a565b5b9250929050565b6000806020838503121561297f5761297e6126be565b5b600083013567ffffffffffffffff81111561299d5761299c6126c3565b5b6129a985828601612912565b92509250509250929050565b6129be816127d9565b81146129c957600080fd5b50565b6000813590506129db816129b5565b92915050565b6000602082840312156129f7576129f66126be565b5b6000612a05848285016129cc565b91505092915050565b612a17816126c8565b82525050565b612a26816127f2565b82525050565b612a35816127d9565b82525050565b600082825260208201905092915050565b6000612a57826125ac565b612a618185612a3b565b9350612a6c836125c8565b8060005b83811015612a9d578151612a848882612619565b9750612a8f83612631565b925050600181019050612a70565b5085935050505092915050565b600060c083016000830151612ac26000860182612a0e565b506020830151612ad56020860182612a1d565b506040830151612ae86040860182612a2c565b506060830151612afb606086018261260a565b5060808301518482036080860152612b138282612a4c565b91505060a083015184820360a0860152612b2d8282612a4c565b9150508091505092915050565b60006020820190508181036000830152612b548184612aaa565b905092915050565b6000602082019050612b7160008301846127e3565b92915050565b600060208284031215612b8d57612b8c6126be565b5b6000612b9b84828501612719565b91505092915050565b612bad8161276e565b82525050565b6000602082019050612bc86000830184612ba4565b92915050565b600060208284031215612be457612be36126be565b5b6000612bf2848285016126ed565b91505092915050565b612c04816127f2565b8114612c0f57600080fd5b50565b600081359050612c2181612bfb565b92915050565b60008060408385031215612c3e57612c3d6126be565b5b6000612c4c858286016129cc565b9250506020612c5d85828601612c12565b9150509250929050565b6000602082019050612c7c60008301846127fe565b92915050565b6000819050919050565b612c9581612c82565b82525050565b6000602082019050612cb06000830184612c8c565b92915050565b600081519050612cc5816129b5565b92915050565b600060208284031215612ce157612ce06126be565b5b6000612cef84828501612cb6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000604082019050612d3c6000830185612c8c565b612d4960208301846127e3565b9392505050565b600081519050612d5f81612702565b92915050565b60008060408385031215612d7c57612d7b6126be565b5b6000612d8a85828601612d50565b9250506020612d9b85828601612cb6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e0e826127d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e4057612e3f612dd4565b5b600182019050919050565b6000819050919050565b6000612e70612e6b612e66846126c8565b612e4b565b6127d9565b9050919050565b612e8081612e55565b82525050565b6000604082019050612e9b6000830185612c8c565b612ea86020830184612e77565b9392505050565b600060208284031215612ec557612ec46126be565b5b6000612ed384828501612d50565b91505092915050565b600082825260208201905092915050565b7f63616e6e6f742072656d6f7665206c617465737420737465702061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f49602183612edc565b9150612f5482612eed565b604082019050919050565b60006020820190508181036000830152612f7881612f3c565b9050919050565b6000819050919050565b6000612fa4612f9f612f9a84612f7f565b612e4b565b6127d9565b9050919050565b612fb481612f89565b82525050565b6000606082019050612fcf6000830186612c8c565b612fdc6020830185612836565b612fe96040830184612fab565b949350505050565b60008151905061300081612bfb565b92915050565b60006020828403121561301c5761301b6126be565b5b600061302a84828501612ff1565b91505092915050565b60006040820190506130486000830185612c8c565b6130556020830184612836565b9392505050565b613065816126c8565b82525050565b6000604082019050613080600083018561305c565b61308d6020830184612836565b9392505050565b60006130af6130aa6130a5846125d8565b612e4b565b6125d8565b9050919050565b60006130c182613094565b9050919050565b60006130d3826130b6565b9050919050565b6130e3816130c8565b82525050565b60006040820190506130fe6000830185612836565b61310b60208301846130da565b9392505050565b600061311d826127d9565b9150613128836127d9565b92508282039050818111156131405761313f612dd4565b5b92915050565b60006020828403121561315c5761315b6126be565b5b600061316a84828501612c12565b91505092915050565b7f6162736f6c75746520666565206f7574206f6620626f756e6473000000000000600082015250565b60006131a9601a83612edc565b91506131b482613173565b602082019050919050565b600060208201905081810360008301526131d88161319c565b9050919050565b600060a0820190506131f4600083018861305c565b61320160208301876127e3565b61320e60408301866127fe565b61321b60608301856127e3565b61322860808301846127fe565b9695505050505050565b60008060408385031215613249576132486126be565b5b600061325785828601612cb6565b925050602061326885828601612d50565b9150509250929050565b600060808201905061328760008301876127e3565b61329460208301866127fe565b6132a160408301856127e3565b6132ae60608301846127fe565b95945050505050565b60006060820190506132cc6000830186612c8c565b6132d96020830185612e77565b6132e66040830184612836565b949350505050565b600081905092915050565b7f73746570426c61636b4c69737400000000000000000000000000000000000000600082015250565b600061332f600d836132ee565b915061333a826132f9565b600d82019050919050565b60008160f01b9050919050565b600061335d82613345565b9050919050565b613375613370826126c8565b613352565b82525050565b600061338682613322565b91506133928284613364565b60028201915081905092915050565b7f7374657057686974654c69737400000000000000000000000000000000000000600082015250565b60006133d7600d836132ee565b91506133e2826133a1565b600d82019050919050565b60006133f8826133ca565b91506134048284613364565b60028201915081905092915050565b600081519050919050565b60005b8381101561343c578082015181840152602081019050613421565b60008484015250505050565b600061345382613413565b61345d81856132ee565b935061346d81856020860161341e565b80840191505092915050565b60006134858285613448565b91506134918284613364565b6002820191508190509392505050565b60006134ad8284613448565b91508190509291505056fea26469706673582212207d0599cd2f4cd28efc4b1c92a0ad91dc9e233e7b430c6dd71c4c93a67dd9662264736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063699a2057116100ad5780639566b960116100715780639566b960146102fa5780639c98a5621461032b578063c4006c8114610347578063f903397714610363578063ff05c2a8146103935761012c565b8063699a2057146102565780636fd63351146102865780638a04867b146102a45780638da5cb5b146102c0578063910752cd146102de5761012c565b806332b56aaf116100f457806332b56aaf146101c457806333905e84146101e2578063384782fe146101fe57806350fd910e1461021c57806354f09a011461023a5761012c565b806305cc61ad14610131578063073728ea1461014f5780630f53b8541461016d57806313af40351461018957806321bacf28146101a5575b600080fd5b6101396103b1565b604051610146919061269c565b60405180910390f35b6101576105da565b604051610164919061269c565b60405180910390f35b6101876004803603810190610182919061272e565b610809565b005b6101a3600480360381019061019e91906127ac565b610b67565b005b6101ad610c74565b6040516101bb92919061280d565b60405180910390f35b6101cc610caa565b6040516101d99190612845565b60405180910390f35b6101fc60048036038101906101f791906128c5565b610cd0565b005b610206610fd9565b6040516102139190612845565b60405180910390f35b610224610fff565b6040516102319190612845565b60405180910390f35b610254600480360381019061024f9190612968565b611023565b005b610270600480360381019061026b91906129e1565b6113bc565b60405161027d9190612b3a565b60405180910390f35b61028e6118a6565b60405161029b9190612b5c565b60405180910390f35b6102be60048036038101906102b99190612b77565b611971565b005b6102c8611a99565b6040516102d59190612bb3565b60405180910390f35b6102f860048036038101906102f39190612b77565b611abd565b005b610314600480360381019061030f9190612bce565b611bd0565b60405161032292919061280d565b60405180910390f35b61034560048036038101906103409190612c27565b611c08565b005b610361600480360381019061035c919061272e565b611e5f565b005b61037d60048036038101906103789190612bce565b612164565b60405161038a9190612845565b60405180910390f35b61039b612199565b6040516103a89190612c67565b60405180910390f35b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b0d10fd7f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d6040518263ffffffff1660e01b81526004016104359190612c9b565b602060405180830381865afa158015610452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104769190612ccb565b905060008167ffffffffffffffff81111561049457610493612cf8565b5b6040519080825280602002602001820160405280156104c25781602001602082028036833780820191505090505b50905060005b828110156105d05760008473ffffffffffffffffffffffffffffffffffffffff1663619f6cc67f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d846040518363ffffffff1660e01b815260040161052d929190612d27565b6040805180830381865afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d9190612d65565b5090508083838151811061058457610583612da5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505050806105c990612e03565b90506104c8565b5080935050505090565b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b0d10fd7f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b6040518263ffffffff1660e01b81526004016106619190612c9b565b602060405180830381865afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190612ccb565b905060008167ffffffffffffffff8111156106c0576106bf612cf8565b5b6040519080825280602002602001820160405280156106ee5781602001602082028036833780820191505090505b50905060005b828110156107ff5760008473ffffffffffffffffffffffffffffffffffffffff1663619f6cc67f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b846040518363ffffffff1660e01b815260040161075c929190612d27565b6040805180830381865afa158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190612d65565b509050808383815181106107b3576107b2612da5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505050806107f890612e03565b90506106f4565b5080935050505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086157600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b866040518363ffffffff1660e01b81526004016108e8929190612e86565b602060405180830381865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190612eaf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090612f5f565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663ba4014fd6109be866121ac565b8560006040518463ffffffff1660e01b81526004016109df93929190612fba565b6020604051808303816000875af11580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a229190613006565b508173ffffffffffffffffffffffffffffffffffffffff166381425763610a48866121dc565b856040518363ffffffff1660e01b8152600401610a66929190613033565b600060405180830381600087803b158015610a8057600080fd5b505af1158015610a94573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663814257637f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b856040518363ffffffff1660e01b8152600401610af6929190613033565b600060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050507f5c250b46b4ab7901af16e469d68737ca13fe0eac242b19f323f7d3608565be7f8484604051610b5992919061306b565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bbf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bf857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd93382604051610c699291906130e9565b60405180910390a150565b600080610ca2600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661220c565b915091509091565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600115610eeb5760008173ffffffffffffffffffffffffffffffffffffffff16639b0d10fd7f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d6040518263ffffffff1660e01b8152600401610d5a9190612c9b565b602060405180830381865afa158015610d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9b9190612ccb565b905060008103610dab5750610eeb565b60008273ffffffffffffffffffffffffffffffffffffffff1663619f6cc67f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d600185610df79190613112565b6040518363ffffffff1660e01b8152600401610e14929190612d27565b6040805180830381865afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e549190612d65565b5090508273ffffffffffffffffffffffffffffffffffffffff1663814257637f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d836040518363ffffffff1660e01b8152600401610eb2929190613033565b600060405180830381600087803b158015610ecc57600080fd5b505af1158015610ee0573d6000803e3d6000fd5b505050505050610cf8565b60005b83839050811015610fd3578173ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f948010e77eb10f7971665add956670a8ef333384c23ce885d3f97f3020357b5d868685818110610f4957610f48612da5565b5b9050602002016020810190610f5e9190612b77565b60006040518463ffffffff1660e01b8152600401610f7e93929190612fba565b6020604051808303816000875af1158015610f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc19190613006565b5080610fcc90612e03565b9050610eee565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461107b57600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060005b838390508110156113b6578383828181106110c3576110c2612da5565b5b90506060020160200160208101906110db9190613146565b80611124575060007f800000000000000000000000000000000000000000000000000000000000000085858481811061111757611116612da5565b5b9050606002016040013516145b611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a906131bf565b60405180910390fd5b600061119885858481811061117b5761117a612da5565b5b90506060020160000160208101906111939190612bce565b6122a7565b905060008373ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5836040518263ffffffff1660e01b81526004016111d59190612c9b565b602060405180830381865afa1580156111f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112169190612ccb565b9050600061126a8787868181106112305761122f612da5565b5b9050606002016040013588888781811061124d5761124c612da5565b5b90506060020160200160208101906112659190613146565b61230e565b90508181146113a25760008061127f8461234a565b915091507fe4bed5fed2349293688700d428390ab42256a50e167e7d49d77beec4fab218008989888181106112b7576112b6612da5565b5b90506060020160000160208101906112cf9190612bce565b83838c8c8b8181106112e4576112e3612da5565b5b905060600201604001358d8d8c81811061130157611300612da5565b5b90506060020160200160208101906113199190613146565b60405161132a9594939291906131df565b60405180910390a18673ffffffffffffffffffffffffffffffffffffffff1663e2a4853a86856040518363ffffffff1660e01b815260040161136d929190612d27565b600060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b5050505050505b505050806113af90612e03565b90506110a5565b50505050565b6113c461255a565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000808273ffffffffffffffffffffffffffffffffffffffff16634fcee0497fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b876040518363ffffffff1660e01b815260040161144c929190612d27565b6040805180830381865afa158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c9190613232565b91509150600061149b836121dc565b905060008473ffffffffffffffffffffffffffffffffffffffff16639b0d10fd836040518263ffffffff1660e01b81526004016114d89190612c9b565b602060405180830381865afa1580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115199190612ccb565b905060008167ffffffffffffffff81111561153757611536612cf8565b5b6040519080825280602002602001820160405280156115655781602001602082028036833780820191505090505b50905060005b828110156116535760008773ffffffffffffffffffffffffffffffffffffffff1663619f6cc686846040518363ffffffff1660e01b81526004016115b0929190612d27565b6040805180830381865afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f09190612d65565b5090508083838151811061160757611606612da5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050508061164c90612e03565b905061156b565b50600061165f866121ac565b905060008773ffffffffffffffffffffffffffffffffffffffff16639b0d10fd836040518263ffffffff1660e01b815260040161169c9190612c9b565b602060405180830381865afa1580156116b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116dd9190612ccb565b905060008167ffffffffffffffff8111156116fb576116fa612cf8565b5b6040519080825280602002602001820160405280156117295781602001602082028036833780820191505090505b50905060005b828110156118175760008a73ffffffffffffffffffffffffffffffffffffffff1663619f6cc686846040518363ffffffff1660e01b8152600401611774929190612d27565b6040805180830381865afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190612d65565b509050808383815181106117cb576117ca612da5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050508061181090612e03565b905061172f565b50600080611847600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6123ab565b915091506040518060c001604052808b61ffff16815260200182151581526020018381526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001878152602001848152509b505050505050505050505050919050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663832860727fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b6040518263ffffffff1660e01b815260040161192a9190612c9b565b602060405180830381865afa158015611947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196b9190612ccb565b91505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119c957600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b8460006040518463ffffffff1660e01b8152600401611a5193929190612fba565b6020604051808303816000875af1158015611a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a949190613006565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b1557600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663814257637f32b7d36eef9191cec628a9b46ddda74b702cf693ad48a065f3f9e5fcc4ea08f560001b846040518363ffffffff1660e01b8152600401611b9a929190613033565b600060405180830381600087803b158015611bb457600080fd5b505af1158015611bc8573d6000803e3d6000fd5b505050505050565b600080611bff600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846123ab565b91509150915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c6057600080fd5b8080611c8e575060007f80000000000000000000000000000000000000000000000000000000000000008316145b611ccd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc4906131bf565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000611d00848461230e565b90506000611d0c612449565b905060008373ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5611d34612449565b6040518263ffffffff1660e01b8152600401611d509190612c9b565b602060405180830381865afa158015611d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d919190612ccb565b9050808314611e57578373ffffffffffffffffffffffffffffffffffffffff1663e2a4853a83856040518363ffffffff1660e01b8152600401611dd5929190612d27565b600060405180830381600087803b158015611def57600080fd5b505af1158015611e03573d6000803e3d6000fd5b50505050600080611e138561234a565b915091507feddfd5447e7ef2b1e4581f32575efd480d5c905f04eae3ff6ec3b90f19811e2b82828a8a604051611e4c9493929190613272565b60405180910390a150505b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611eb757600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663107f89ad7fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b85856040518463ffffffff1660e01b8152600401611f3e939291906132b7565b6020604051808303816000875af1158015611f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f819190613006565b508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd611fa7856121dc565b8460006040518463ffffffff1660e01b8152600401611fc893929190612fba565b6020604051808303816000875af1158015611fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200b9190613006565b508073ffffffffffffffffffffffffffffffffffffffff1663ba4014fd7f18fa4b105101c66136345367eab77cd274c0766ec0596b7e8aadd79e9913955560001b8460006040518463ffffffff1660e01b815260040161206d93929190612fba565b6020604051808303816000875af115801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b09190613006565b508073ffffffffffffffffffffffffffffffffffffffff1663814257636120d6856121ac565b846040518363ffffffff1660e01b81526004016120f4929190613033565b600060405180830381600087803b15801561210e57600080fd5b505af1158015612122573d6000803e3d6000fd5b505050507f5c250b46b4ab7901af16e469d68737ca13fe0eac242b19f323f7d3608565be7f838360405161215792919061306b565b60405180910390a1505050565b6000612192600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836124ac565b9050919050565b600260149054906101000a900460ff1681565b6000816040516020016121bf919061337b565b604051602081830303815290604052805190602001209050919050565b6000816040516020016121ef91906133ed565b604051602081830303815290604052805190602001209050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663bd02d0f5612235612449565b6040518263ffffffff1660e01b81526004016122519190612c9b565b602060405180830381865afa15801561226e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122929190612ccb565b905061229d8161234a565b9250925050915091565b60006040518060400160405280600881526020017f7374657046656573000000000000000000000000000000000000000000000000815250826040516020016122f1929190613479565b604051602081830303815290604052805190602001209050919050565b6000808390508215612340577f8000000000000000000000000000000000000000000000000000000000000000811790505b8091505092915050565b6000806000807f8000000000000000000000000000000000000000000000000000000000000000851611905060007f800000000000000000000000000000000000000000000000000000000000000019851690508082935093505050915091565b60008060008473ffffffffffffffffffffffffffffffffffffffff1663bd02d0f56123d5866122a7565b6040518263ffffffff1660e01b81526004016123f19190612c9b565b602060405180830381865afa15801561240e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124329190612ccb565b905061243d8161234a565b92509250509250929050565b60006040518060400160405280600b81526020017f64656661756c744665657300000000000000000000000000000000000000000081525060405160200161249191906134a1565b60405160208183030381529060405280519060200120905090565b6000808390508073ffffffffffffffffffffffffffffffffffffffff1663a2ccb5227fc94d198e6194ea38dbd900920351d7f8e6c6d85b1d3b803fb93c54be008e11fd60001b856040518363ffffffff1660e01b8152600401612510929190612e86565b602060405180830381865afa15801561252d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125519190612eaf565b91505092915050565b6040518060c00160405280600061ffff16815260200160001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612603826125d8565b9050919050565b612613816125f8565b82525050565b6000612625838361260a565b60208301905092915050565b6000602082019050919050565b6000612649826125ac565b61265381856125b7565b935061265e836125c8565b8060005b8381101561268f5781516126768882612619565b975061268183612631565b925050600181019050612662565b5085935050505092915050565b600060208201905081810360008301526126b6818461263e565b905092915050565b600080fd5b600080fd5b600061ffff82169050919050565b6126df816126c8565b81146126ea57600080fd5b50565b6000813590506126fc816126d6565b92915050565b61270b816125f8565b811461271657600080fd5b50565b60008135905061272881612702565b92915050565b60008060408385031215612745576127446126be565b5b6000612753858286016126ed565b925050602061276485828601612719565b9150509250929050565b6000612779826125d8565b9050919050565b6127898161276e565b811461279457600080fd5b50565b6000813590506127a681612780565b92915050565b6000602082840312156127c2576127c16126be565b5b60006127d084828501612797565b91505092915050565b6000819050919050565b6127ec816127d9565b82525050565b60008115159050919050565b612807816127f2565b82525050565b600060408201905061282260008301856127e3565b61282f60208301846127fe565b9392505050565b61283f816125f8565b82525050565b600060208201905061285a6000830184612836565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261288557612884612860565b5b8235905067ffffffffffffffff8111156128a2576128a1612865565b5b6020830191508360208202830111156128be576128bd61286a565b5b9250929050565b600080602083850312156128dc576128db6126be565b5b600083013567ffffffffffffffff8111156128fa576128f96126c3565b5b6129068582860161286f565b92509250509250929050565b60008083601f84011261292857612927612860565b5b8235905067ffffffffffffffff81111561294557612944612865565b5b6020830191508360608202830111156129615761296061286a565b5b9250929050565b6000806020838503121561297f5761297e6126be565b5b600083013567ffffffffffffffff81111561299d5761299c6126c3565b5b6129a985828601612912565b92509250509250929050565b6129be816127d9565b81146129c957600080fd5b50565b6000813590506129db816129b5565b92915050565b6000602082840312156129f7576129f66126be565b5b6000612a05848285016129cc565b91505092915050565b612a17816126c8565b82525050565b612a26816127f2565b82525050565b612a35816127d9565b82525050565b600082825260208201905092915050565b6000612a57826125ac565b612a618185612a3b565b9350612a6c836125c8565b8060005b83811015612a9d578151612a848882612619565b9750612a8f83612631565b925050600181019050612a70565b5085935050505092915050565b600060c083016000830151612ac26000860182612a0e565b506020830151612ad56020860182612a1d565b506040830151612ae86040860182612a2c565b506060830151612afb606086018261260a565b5060808301518482036080860152612b138282612a4c565b91505060a083015184820360a0860152612b2d8282612a4c565b9150508091505092915050565b60006020820190508181036000830152612b548184612aaa565b905092915050565b6000602082019050612b7160008301846127e3565b92915050565b600060208284031215612b8d57612b8c6126be565b5b6000612b9b84828501612719565b91505092915050565b612bad8161276e565b82525050565b6000602082019050612bc86000830184612ba4565b92915050565b600060208284031215612be457612be36126be565b5b6000612bf2848285016126ed565b91505092915050565b612c04816127f2565b8114612c0f57600080fd5b50565b600081359050612c2181612bfb565b92915050565b60008060408385031215612c3e57612c3d6126be565b5b6000612c4c858286016129cc565b9250506020612c5d85828601612c12565b9150509250929050565b6000602082019050612c7c60008301846127fe565b92915050565b6000819050919050565b612c9581612c82565b82525050565b6000602082019050612cb06000830184612c8c565b92915050565b600081519050612cc5816129b5565b92915050565b600060208284031215612ce157612ce06126be565b5b6000612cef84828501612cb6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000604082019050612d3c6000830185612c8c565b612d4960208301846127e3565b9392505050565b600081519050612d5f81612702565b92915050565b60008060408385031215612d7c57612d7b6126be565b5b6000612d8a85828601612d50565b9250506020612d9b85828601612cb6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e0e826127d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e4057612e3f612dd4565b5b600182019050919050565b6000819050919050565b6000612e70612e6b612e66846126c8565b612e4b565b6127d9565b9050919050565b612e8081612e55565b82525050565b6000604082019050612e9b6000830185612c8c565b612ea86020830184612e77565b9392505050565b600060208284031215612ec557612ec46126be565b5b6000612ed384828501612d50565b91505092915050565b600082825260208201905092915050565b7f63616e6e6f742072656d6f7665206c617465737420737465702061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f49602183612edc565b9150612f5482612eed565b604082019050919050565b60006020820190508181036000830152612f7881612f3c565b9050919050565b6000819050919050565b6000612fa4612f9f612f9a84612f7f565b612e4b565b6127d9565b9050919050565b612fb481612f89565b82525050565b6000606082019050612fcf6000830186612c8c565b612fdc6020830185612836565b612fe96040830184612fab565b949350505050565b60008151905061300081612bfb565b92915050565b60006020828403121561301c5761301b6126be565b5b600061302a84828501612ff1565b91505092915050565b60006040820190506130486000830185612c8c565b6130556020830184612836565b9392505050565b613065816126c8565b82525050565b6000604082019050613080600083018561305c565b61308d6020830184612836565b9392505050565b60006130af6130aa6130a5846125d8565b612e4b565b6125d8565b9050919050565b60006130c182613094565b9050919050565b60006130d3826130b6565b9050919050565b6130e3816130c8565b82525050565b60006040820190506130fe6000830185612836565b61310b60208301846130da565b9392505050565b600061311d826127d9565b9150613128836127d9565b92508282039050818111156131405761313f612dd4565b5b92915050565b60006020828403121561315c5761315b6126be565b5b600061316a84828501612c12565b91505092915050565b7f6162736f6c75746520666565206f7574206f6620626f756e6473000000000000600082015250565b60006131a9601a83612edc565b91506131b482613173565b602082019050919050565b600060208201905081810360008301526131d88161319c565b9050919050565b600060a0820190506131f4600083018861305c565b61320160208301876127e3565b61320e60408301866127fe565b61321b60608301856127e3565b61322860808301846127fe565b9695505050505050565b60008060408385031215613249576132486126be565b5b600061325785828601612cb6565b925050602061326885828601612d50565b9150509250929050565b600060808201905061328760008301876127e3565b61329460208301866127fe565b6132a160408301856127e3565b6132ae60608301846127fe565b95945050505050565b60006060820190506132cc6000830186612c8c565b6132d96020830185612e77565b6132e66040830184612836565b949350505050565b600081905092915050565b7f73746570426c61636b4c69737400000000000000000000000000000000000000600082015250565b600061332f600d836132ee565b915061333a826132f9565b600d82019050919050565b60008160f01b9050919050565b600061335d82613345565b9050919050565b613375613370826126c8565b613352565b82525050565b600061338682613322565b91506133928284613364565b60028201915081905092915050565b7f7374657057686974654c69737400000000000000000000000000000000000000600082015250565b60006133d7600d836132ee565b91506133e2826133a1565b600d82019050919050565b60006133f8826133ca565b91506134048284613364565b60028201915081905092915050565b600081519050919050565b60005b8381101561343c578082015181840152602081019050613421565b60008484015250505050565b600061345382613413565b61345d81856132ee565b935061346d81856020860161341e565b80840191505092915050565b60006134858285613448565b91506134918284613364565b6002820191508190509392505050565b60006134ad8284613448565b91508190509291505056fea26469706673582212207d0599cd2f4cd28efc4b1c92a0ad91dc9e233e7b430c6dd71c4c93a67dd9662264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8323,
        "contract": "contracts/ConfigManager.sol:ConfigManager",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 6747,
        "contract": "contracts/ConfigManager.sol:ConfigManager",
        "label": "eternalStorageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6749,
        "contract": "contracts/ConfigManager.sol:ConfigManager",
        "label": "upstreamAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6751,
        "contract": "contracts/ConfigManager.sol:ConfigManager",
        "label": "isUserProxy",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}