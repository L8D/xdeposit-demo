{
  "address": "0x62Dce3B18309a5133cC119bFAb03f3cb493aFa4c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrappedEtherContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "thisAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeWrapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8fd563a95a40bfbd15440dc14e5fe27fba4b36adb9044a08ef042645983fc8b5",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x62Dce3B18309a5133cC119bFAb03f3cb493aFa4c",
    "transactionIndex": 26,
    "gasUsed": "773609",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe133b887e0cd157b38dd4b14d6e701b07873abe1786387bba3a8abf118d31fdd",
    "transactionHash": "0x8fd563a95a40bfbd15440dc14e5fe27fba4b36adb9044a08ef042645983fc8b5",
    "logs": [],
    "blockNumber": 9069852,
    "cumulativeGasUsed": "4158819",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6"
  ],
  "numDeployments": 1,
  "solcInputHash": "2bb04d57f2450c3bd4964ee3584ce3d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedEtherContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thisAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeWrapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrapNativeAction.sol\":\"WrapNativeAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nlibrary LibActionHelpers {\\n  function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    Asset memory asset = Asset(assetType, assetAddress);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n    ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n    return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2, -1);\\n  }\\n\\n  function singleTokenResult(address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n  }\\n\\n  function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.Native, address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x3017f42ec45c2ee13e81220ac9833f47456f6ee9002fbefd9fdb12055ad7e863\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x2cfe6c734d98383e76c5f7ae9cf3f6e0eeef790bb4bb3b6049589eae6ed1dd64\",\"license\":\"MIT\"},\"contracts/Weth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface Weth {\\n    function name() external view returns (string memory);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    // fallback() external payable;\\n\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n}\\n\",\"keccak256\":\"0x03307f9d9e5917620a9c13f9d8ba15a0f9ec1cc446332283c12f672a5ec48a9c\",\"license\":\"UNLICENSED\"},\"contracts/WrapNativeAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\\nimport '@freemarket/step-sdk/contracts/LibActionHelpers.sol';\\nimport './Weth.sol';\\n\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\n\\ncontract WrapNativeAction is IWorkflowStep {\\n  address public immutable contractAddress;\\n\\n  event NativeWrapped(address thisAddr, uint256 amount);\\n\\n  constructor(address wrappedEtherContractAddress) {\\n    contractAddress = wrappedEtherContractAddress;\\n  }\\n\\n  function execute(AssetAmount[] calldata inputAssetAmounts, bytes calldata) external payable returns (WorkflowStepResult memory) {\\n    require(inputAssetAmounts.length == 1, 'WrapNativeAction: inputAssetAmounts.length must be 1');\\n\\n    uint256 amount = inputAssetAmounts[0].amount;\\n    emit NativeWrapped(address(this), amount);\\n    Weth weth = Weth(contractAddress);\\n    weth.deposit{value: amount}();\\n\\n    WorkflowStepResult memory rv = LibStepResultBuilder\\n      .create(1, 1)\\n      .addInputAssetAmount(inputAssetAmounts[0])\\n      .addOutputToken(contractAddress, amount)\\n      .result;\\n\\n\\n    return rv;\\n  }\\n}\\n\",\"keccak256\":\"0xacaadedc0357f9f545a2e1f00248113fa8566e2be5e0cb87048bcc043773913c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e25380380610e25833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610d0061012560003960008181610136015281816101bf015261024a0152610d006000f3fe6080604052600436106100295760003560e01c80637bb26ca71461002e578063f6b4dfb41461005e575b600080fd5b61004860048036038101906100439190610621565b610089565b6040516100559190610922565b60405180910390f35b34801561006a57600080fd5b50610073610248565b6040516100809190610953565b60405180910390f35b61009161049b565b600185859050146100d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ce906109f1565b60405180910390fd5b6000858560008181106100ed576100ec610a11565b5b9050606002016040013590507f2c58f4d3d48c3b93bf8f7fd23f32658ccb97894f02022d2189ffa9903d37bfb8308260405161012a929190610a4f565b60405180910390a160007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019f57600080fd5b505af11580156101b3573d6000803e3d6000fd5b505050505060006102347f0000000000000000000000000000000000000000000000000000000000000000846102258b8b60008181106101f6576101f5610a11565b5b90506060020180360381019061020c9190610c26565b61021760018061026c565b6103b190919063ffffffff16565b6103fd9092919063ffffffff16565b604001519050809350505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6102746104c9565b60008367ffffffffffffffff8111156102905761028f610a8e565b5b6040519080825280602002602001820160405280156102c957816020015b6102b66104f0565b8152602001906001900390816102ae5790505b50905060008367ffffffffffffffff8111156102e8576102e7610a8e565b5b60405190808252806020026020018201604052801561032157816020015b61030e6104f0565b8152602001906001900390816103065790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b6103b96104c9565b818360400151600001518460000180518091906103d590610c82565b815250815181106103e9576103e8610a11565b5b602002602001018190525082905092915050565b6104056104c9565b604051806040016040528060405180604001604052806001600281111561042f5761042e6106ce565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061047290610c82565b8152508151811061048657610485610a11565b5b60200260200101819052508390509392505050565b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b604051806060016040528060008152602001600081526020016104ea61049b565b81525090565b6040518060400160405280610503610510565b8152602001600081525090565b60405180604001604052806000600281111561052f5761052e6106ce565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261058b5761058a610566565b5b8235905067ffffffffffffffff8111156105a8576105a761056b565b5b6020830191508360608202830111156105c4576105c3610570565b5b9250929050565b60008083601f8401126105e1576105e0610566565b5b8235905067ffffffffffffffff8111156105fe576105fd61056b565b5b60208301915083600182028301111561061a57610619610570565b5b9250929050565b6000806000806040858703121561063b5761063a61055c565b5b600085013567ffffffffffffffff81111561065957610658610561565b5b61066587828801610575565b9450945050602085013567ffffffffffffffff81111561068857610687610561565b5b610694878288016105cb565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061070e5761070d6106ce565b5b50565b600081905061071f826106fd565b919050565b600061072f82610711565b9050919050565b61073f81610724565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077082610745565b9050919050565b61078081610765565b82525050565b60408201600082015161079c6000850182610736565b5060208201516107af6020850182610777565b50505050565b6000819050919050565b6107c8816107b5565b82525050565b6060820160008201516107e46000850182610786565b5060208201516107f760408501826107bf565b50505050565b600061080983836107ce565b60608301905092915050565b6000602082019050919050565b600061082d826106a2565b61083781856106ad565b9350610842836106be565b8060005b8381101561087357815161085a88826107fd565b975061086583610815565b925050600181019050610846565b5085935050505092915050565b60008160010b9050919050565b61089681610880565b82525050565b60008160020b9050919050565b6108b28161089c565b82525050565b600060808301600083015184820360008601526108d58282610822565b915050602083015184820360208601526108ef8282610822565b9150506040830151610904604086018261088d565b50606083015161091760608601826108a9565b508091505092915050565b6000602082019050818103600083015261093c81846108b8565b905092915050565b61094d81610765565b82525050565b60006020820190506109686000830184610944565b92915050565b600082825260208201905092915050565b7f577261704e6174697665416374696f6e3a20696e7075744173736574416d6f7560008201527f6e74732e6c656e677468206d7573742062652031000000000000000000000000602082015250565b60006109db60348361096e565b91506109e68261097f565b604082019050919050565b60006020820190508181036000830152610a0a816109ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610a49816107b5565b82525050565b6000604082019050610a646000830185610944565b610a716020830184610a40565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ac682610a7d565b810181811067ffffffffffffffff82111715610ae557610ae4610a8e565b5b80604052505050565b6000610af8610552565b9050610b048282610abd565b919050565b60038110610b1657600080fd5b50565b600081359050610b2881610b09565b92915050565b610b3781610765565b8114610b4257600080fd5b50565b600081359050610b5481610b2e565b92915050565b600060408284031215610b7057610b6f610a78565b5b610b7a6040610aee565b90506000610b8a84828501610b19565b6000830152506020610b9e84828501610b45565b60208301525092915050565b610bb3816107b5565b8114610bbe57600080fd5b50565b600081359050610bd081610baa565b92915050565b600060608284031215610bec57610beb610a78565b5b610bf66040610aee565b90506000610c0684828501610b5a565b6000830152506040610c1a84828501610bc1565b60208301525092915050565b600060608284031215610c3c57610c3b61055c565b5b6000610c4a84828501610bd6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8d826107b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cbf57610cbe610c53565b5b60018201905091905056fea26469706673582212207e40c138a117aaf2450da113cb627b90c0196325f414654a1f6d09ac29bbbddb64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80637bb26ca71461002e578063f6b4dfb41461005e575b600080fd5b61004860048036038101906100439190610621565b610089565b6040516100559190610922565b60405180910390f35b34801561006a57600080fd5b50610073610248565b6040516100809190610953565b60405180910390f35b61009161049b565b600185859050146100d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ce906109f1565b60405180910390fd5b6000858560008181106100ed576100ec610a11565b5b9050606002016040013590507f2c58f4d3d48c3b93bf8f7fd23f32658ccb97894f02022d2189ffa9903d37bfb8308260405161012a929190610a4f565b60405180910390a160007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019f57600080fd5b505af11580156101b3573d6000803e3d6000fd5b505050505060006102347f0000000000000000000000000000000000000000000000000000000000000000846102258b8b60008181106101f6576101f5610a11565b5b90506060020180360381019061020c9190610c26565b61021760018061026c565b6103b190919063ffffffff16565b6103fd9092919063ffffffff16565b604001519050809350505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6102746104c9565b60008367ffffffffffffffff8111156102905761028f610a8e565b5b6040519080825280602002602001820160405280156102c957816020015b6102b66104f0565b8152602001906001900390816102ae5790505b50905060008367ffffffffffffffff8111156102e8576102e7610a8e565b5b60405190808252806020026020018201604052801561032157816020015b61030e6104f0565b8152602001906001900390816103065790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b6103b96104c9565b818360400151600001518460000180518091906103d590610c82565b815250815181106103e9576103e8610a11565b5b602002602001018190525082905092915050565b6104056104c9565b604051806040016040528060405180604001604052806001600281111561042f5761042e6106ce565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061047290610c82565b8152508151811061048657610485610a11565b5b60200260200101819052508390509392505050565b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b604051806060016040528060008152602001600081526020016104ea61049b565b81525090565b6040518060400160405280610503610510565b8152602001600081525090565b60405180604001604052806000600281111561052f5761052e6106ce565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261058b5761058a610566565b5b8235905067ffffffffffffffff8111156105a8576105a761056b565b5b6020830191508360608202830111156105c4576105c3610570565b5b9250929050565b60008083601f8401126105e1576105e0610566565b5b8235905067ffffffffffffffff8111156105fe576105fd61056b565b5b60208301915083600182028301111561061a57610619610570565b5b9250929050565b6000806000806040858703121561063b5761063a61055c565b5b600085013567ffffffffffffffff81111561065957610658610561565b5b61066587828801610575565b9450945050602085013567ffffffffffffffff81111561068857610687610561565b5b610694878288016105cb565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061070e5761070d6106ce565b5b50565b600081905061071f826106fd565b919050565b600061072f82610711565b9050919050565b61073f81610724565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077082610745565b9050919050565b61078081610765565b82525050565b60408201600082015161079c6000850182610736565b5060208201516107af6020850182610777565b50505050565b6000819050919050565b6107c8816107b5565b82525050565b6060820160008201516107e46000850182610786565b5060208201516107f760408501826107bf565b50505050565b600061080983836107ce565b60608301905092915050565b6000602082019050919050565b600061082d826106a2565b61083781856106ad565b9350610842836106be565b8060005b8381101561087357815161085a88826107fd565b975061086583610815565b925050600181019050610846565b5085935050505092915050565b60008160010b9050919050565b61089681610880565b82525050565b60008160020b9050919050565b6108b28161089c565b82525050565b600060808301600083015184820360008601526108d58282610822565b915050602083015184820360208601526108ef8282610822565b9150506040830151610904604086018261088d565b50606083015161091760608601826108a9565b508091505092915050565b6000602082019050818103600083015261093c81846108b8565b905092915050565b61094d81610765565b82525050565b60006020820190506109686000830184610944565b92915050565b600082825260208201905092915050565b7f577261704e6174697665416374696f6e3a20696e7075744173736574416d6f7560008201527f6e74732e6c656e677468206d7573742062652031000000000000000000000000602082015250565b60006109db60348361096e565b91506109e68261097f565b604082019050919050565b60006020820190508181036000830152610a0a816109ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610a49816107b5565b82525050565b6000604082019050610a646000830185610944565b610a716020830184610a40565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ac682610a7d565b810181811067ffffffffffffffff82111715610ae557610ae4610a8e565b5b80604052505050565b6000610af8610552565b9050610b048282610abd565b919050565b60038110610b1657600080fd5b50565b600081359050610b2881610b09565b92915050565b610b3781610765565b8114610b4257600080fd5b50565b600081359050610b5481610b2e565b92915050565b600060408284031215610b7057610b6f610a78565b5b610b7a6040610aee565b90506000610b8a84828501610b19565b6000830152506020610b9e84828501610b45565b60208301525092915050565b610bb3816107b5565b8114610bbe57600080fd5b50565b600081359050610bd081610baa565b92915050565b600060608284031215610bec57610beb610a78565b5b610bf66040610aee565b90506000610c0684828501610b5a565b6000830152506040610c1a84828501610bc1565b60208301525092915050565b600060608284031215610c3c57610c3b61055c565b5b6000610c4a84828501610bd6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8d826107b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cbf57610cbe610c53565b5b60018201905091905056fea26469706673582212207e40c138a117aaf2450da113cb627b90c0196325f414654a1f6d09ac29bbbddb64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}