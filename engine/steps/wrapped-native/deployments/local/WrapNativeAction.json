{
  "address": "0x696358bBb1a743052E0E87BeD78AAd9d18f0e1F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrappedEtherContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "thisAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeWrapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x70a1e6ae7e11ca7e7278f76dd6746bbcd8a871544235177f91c731ad5f490c3b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x696358bBb1a743052E0E87BeD78AAd9d18f0e1F4",
    "transactionIndex": 0,
    "gasUsed": "726996",
    "logsBloom": "0x
    "blockHash": "0x764dfee339f4d8b37b976a4cb66f595ea82cf4156f758012f15c79b4355f8396",
    "transactionHash": "0x70a1e6ae7e11ca7e7278f76dd6746bbcd8a871544235177f91c731ad5f490c3b",
    "logs": [],
    "blockNumber": 16889319,
    "cumulativeGasUsed": "726996",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "numDeployments": 1,
  "solcInputHash": "a2f04f4c0e2faa3a76b4cb0f034882dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedEtherContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thisAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeWrapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrapNativeAction.sol\":\"WrapNativeAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nlibrary LibActionHelpers {\\n  function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    Asset memory asset = Asset(assetType, assetAddress);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n    ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n    return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2, -1);\\n  }\\n\\n  function singleTokenResult(address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n  }\\n\\n  function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.Native, address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x3017f42ec45c2ee13e81220ac9833f47456f6ee9002fbefd9fdb12055ad7e863\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x2cfe6c734d98383e76c5f7ae9cf3f6e0eeef790bb4bb3b6049589eae6ed1dd64\",\"license\":\"MIT\"},\"contracts/Weth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface Weth {\\n    function name() external view returns (string memory);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    // fallback() external payable;\\n\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n}\\n\",\"keccak256\":\"0x03307f9d9e5917620a9c13f9d8ba15a0f9ec1cc446332283c12f672a5ec48a9c\",\"license\":\"UNLICENSED\"},\"contracts/WrapNativeAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\nimport \\\"./Weth.sol\\\";\\n\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\n\\ncontract WrapNativeAction is IWorkflowStep {\\n    address public immutable contractAddress;\\n\\n    event NativeWrapped(address thisAddr, uint256 amount);\\n\\n    constructor(address wrappedEtherContractAddress) {\\n        contractAddress = wrappedEtherContractAddress;\\n    }\\n\\n    function execute(AssetAmount[] calldata inputAssetAmounts, bytes calldata)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n        require(inputAssetAmounts.length == 1);\\n\\n        uint256 amount = inputAssetAmounts[0].amount;\\n        emit NativeWrapped(address(this), amount);\\n        Weth weth = Weth(contractAddress);\\n        weth.deposit{value: amount}();\\n\\n        WorkflowStepResult memory rv = LibStepResultBuilder.create(1, 1).addInputAssetAmount(inputAssetAmounts[0])\\n            .addOutputToken(contractAddress, amount).result;\\n\\n\\n        return rv;\\n    }\\n}\\n\",\"keccak256\":\"0x591ae9bfb593629da3ef6bdd660f26c1672d8ab1f9b58ea2f72898763878a119\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610d4c380380610d4c833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610c27610125600039600081816101000152818161018901526102140152610c276000f3fe6080604052600436106100295760003560e01c80637bb26ca71461002e578063f6b4dfb41461005e575b600080fd5b610048600480360381019061004391906105eb565b610089565b60405161005591906108ec565b60405180910390f35b34801561006a57600080fd5b50610073610212565b604051610080919061091d565b60405180910390f35b610091610465565b600185859050146100a157600080fd5b6000858560008181106100b7576100b6610938565b5b9050606002016040013590507f2c58f4d3d48c3b93bf8f7fd23f32658ccb97894f02022d2189ffa9903d37bfb830826040516100f4929190610976565b60405180910390a160007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561016957600080fd5b505af115801561017d573d6000803e3d6000fd5b505050505060006101fe7f0000000000000000000000000000000000000000000000000000000000000000846101ef8b8b60008181106101c0576101bf610938565b5b9050606002018036038101906101d69190610b4d565b6101e1600180610236565b61037b90919063ffffffff16565b6103c79092919063ffffffff16565b604001519050809350505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61023e610493565b60008367ffffffffffffffff81111561025a576102596109b5565b5b60405190808252806020026020018201604052801561029357816020015b6102806104ba565b8152602001906001900390816102785790505b50905060008367ffffffffffffffff8111156102b2576102b16109b5565b5b6040519080825280602002602001820160405280156102eb57816020015b6102d86104ba565b8152602001906001900390816102d05790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610383610493565b8183604001516000015184600001805180919061039f90610ba9565b815250815181106103b3576103b2610938565b5b602002602001018190525082905092915050565b6103cf610493565b60405180604001604052806040518060400160405280600160028111156103f9576103f8610698565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061043c90610ba9565b815250815181106104505761044f610938565b5b60200260200101819052508390509392505050565b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b604051806060016040528060008152602001600081526020016104b4610465565b81525090565b60405180604001604052806104cd6104da565b8152602001600081525090565b6040518060400160405280600060028111156104f9576104f8610698565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261055557610554610530565b5b8235905067ffffffffffffffff81111561057257610571610535565b5b60208301915083606082028301111561058e5761058d61053a565b5b9250929050565b60008083601f8401126105ab576105aa610530565b5b8235905067ffffffffffffffff8111156105c8576105c7610535565b5b6020830191508360018202830111156105e4576105e361053a565b5b9250929050565b6000806000806040858703121561060557610604610526565b5b600085013567ffffffffffffffff8111156106235761062261052b565b5b61062f8782880161053f565b9450945050602085013567ffffffffffffffff8111156106525761065161052b565b5b61065e87828801610595565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106106d8576106d7610698565b5b50565b60008190506106e9826106c7565b919050565b60006106f9826106db565b9050919050565b610709816106ee565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061073a8261070f565b9050919050565b61074a8161072f565b82525050565b6040820160008201516107666000850182610700565b5060208201516107796020850182610741565b50505050565b6000819050919050565b6107928161077f565b82525050565b6060820160008201516107ae6000850182610750565b5060208201516107c16040850182610789565b50505050565b60006107d38383610798565b60608301905092915050565b6000602082019050919050565b60006107f78261066c565b6108018185610677565b935061080c83610688565b8060005b8381101561083d57815161082488826107c7565b975061082f836107df565b925050600181019050610810565b5085935050505092915050565b60008160010b9050919050565b6108608161084a565b82525050565b60008160020b9050919050565b61087c81610866565b82525050565b6000608083016000830151848203600086015261089f82826107ec565b915050602083015184820360208601526108b982826107ec565b91505060408301516108ce6040860182610857565b5060608301516108e16060860182610873565b508091505092915050565b600060208201905081810360008301526109068184610882565b905092915050565b6109178161072f565b82525050565b6000602082019050610932600083018461090e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6109708161077f565b82525050565b600060408201905061098b600083018561090e565b6109986020830184610967565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109ed826109a4565b810181811067ffffffffffffffff82111715610a0c57610a0b6109b5565b5b80604052505050565b6000610a1f61051c565b9050610a2b82826109e4565b919050565b60038110610a3d57600080fd5b50565b600081359050610a4f81610a30565b92915050565b610a5e8161072f565b8114610a6957600080fd5b50565b600081359050610a7b81610a55565b92915050565b600060408284031215610a9757610a9661099f565b5b610aa16040610a15565b90506000610ab184828501610a40565b6000830152506020610ac584828501610a6c565b60208301525092915050565b610ada8161077f565b8114610ae557600080fd5b50565b600081359050610af781610ad1565b92915050565b600060608284031215610b1357610b1261099f565b5b610b1d6040610a15565b90506000610b2d84828501610a81565b6000830152506040610b4184828501610ae8565b60208301525092915050565b600060608284031215610b6357610b62610526565b5b6000610b7184828501610afd565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bb48261077f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610be657610be5610b7a565b5b60018201905091905056fea26469706673582212209daa9f488fe036156d45f78ea9226d7c6c71fd99847dce4a171ca872979d5e4f64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80637bb26ca71461002e578063f6b4dfb41461005e575b600080fd5b610048600480360381019061004391906105eb565b610089565b60405161005591906108ec565b60405180910390f35b34801561006a57600080fd5b50610073610212565b604051610080919061091d565b60405180910390f35b610091610465565b600185859050146100a157600080fd5b6000858560008181106100b7576100b6610938565b5b9050606002016040013590507f2c58f4d3d48c3b93bf8f7fd23f32658ccb97894f02022d2189ffa9903d37bfb830826040516100f4929190610976565b60405180910390a160007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561016957600080fd5b505af115801561017d573d6000803e3d6000fd5b505050505060006101fe7f0000000000000000000000000000000000000000000000000000000000000000846101ef8b8b60008181106101c0576101bf610938565b5b9050606002018036038101906101d69190610b4d565b6101e1600180610236565b61037b90919063ffffffff16565b6103c79092919063ffffffff16565b604001519050809350505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61023e610493565b60008367ffffffffffffffff81111561025a576102596109b5565b5b60405190808252806020026020018201604052801561029357816020015b6102806104ba565b8152602001906001900390816102785790505b50905060008367ffffffffffffffff8111156102b2576102b16109b5565b5b6040519080825280602002602001820160405280156102eb57816020015b6102d86104ba565b8152602001906001900390816102d05790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610383610493565b8183604001516000015184600001805180919061039f90610ba9565b815250815181106103b3576103b2610938565b5b602002602001018190525082905092915050565b6103cf610493565b60405180604001604052806040518060400160405280600160028111156103f9576103f8610698565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061043c90610ba9565b815250815181106104505761044f610938565b5b60200260200101819052508390509392505050565b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b604051806060016040528060008152602001600081526020016104b4610465565b81525090565b60405180604001604052806104cd6104da565b8152602001600081525090565b6040518060400160405280600060028111156104f9576104f8610698565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261055557610554610530565b5b8235905067ffffffffffffffff81111561057257610571610535565b5b60208301915083606082028301111561058e5761058d61053a565b5b9250929050565b60008083601f8401126105ab576105aa610530565b5b8235905067ffffffffffffffff8111156105c8576105c7610535565b5b6020830191508360018202830111156105e4576105e361053a565b5b9250929050565b6000806000806040858703121561060557610604610526565b5b600085013567ffffffffffffffff8111156106235761062261052b565b5b61062f8782880161053f565b9450945050602085013567ffffffffffffffff8111156106525761065161052b565b5b61065e87828801610595565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106106d8576106d7610698565b5b50565b60008190506106e9826106c7565b919050565b60006106f9826106db565b9050919050565b610709816106ee565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061073a8261070f565b9050919050565b61074a8161072f565b82525050565b6040820160008201516107666000850182610700565b5060208201516107796020850182610741565b50505050565b6000819050919050565b6107928161077f565b82525050565b6060820160008201516107ae6000850182610750565b5060208201516107c16040850182610789565b50505050565b60006107d38383610798565b60608301905092915050565b6000602082019050919050565b60006107f78261066c565b6108018185610677565b935061080c83610688565b8060005b8381101561083d57815161082488826107c7565b975061082f836107df565b925050600181019050610810565b5085935050505092915050565b60008160010b9050919050565b6108608161084a565b82525050565b60008160020b9050919050565b61087c81610866565b82525050565b6000608083016000830151848203600086015261089f82826107ec565b915050602083015184820360208601526108b982826107ec565b91505060408301516108ce6040860182610857565b5060608301516108e16060860182610873565b508091505092915050565b600060208201905081810360008301526109068184610882565b905092915050565b6109178161072f565b82525050565b6000602082019050610932600083018461090e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6109708161077f565b82525050565b600060408201905061098b600083018561090e565b6109986020830184610967565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109ed826109a4565b810181811067ffffffffffffffff82111715610a0c57610a0b6109b5565b5b80604052505050565b6000610a1f61051c565b9050610a2b82826109e4565b919050565b60038110610a3d57600080fd5b50565b600081359050610a4f81610a30565b92915050565b610a5e8161072f565b8114610a6957600080fd5b50565b600081359050610a7b81610a55565b92915050565b600060408284031215610a9757610a9661099f565b5b610aa16040610a15565b90506000610ab184828501610a40565b6000830152506020610ac584828501610a6c565b60208301525092915050565b610ada8161077f565b8114610ae557600080fd5b50565b600081359050610af781610ad1565b92915050565b600060608284031215610b1357610b1261099f565b5b610b1d6040610a15565b90506000610b2d84828501610a81565b6000830152506040610b4184828501610ae8565b60208301525092915050565b600060608284031215610b6357610b62610526565b5b6000610b7184828501610afd565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bb48261077f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610be657610be5610b7a565b5b60018201905091905056fea26469706673582212209daa9f488fe036156d45f78ea9226d7c6c71fd99847dce4a171ca872979d5e4f64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}