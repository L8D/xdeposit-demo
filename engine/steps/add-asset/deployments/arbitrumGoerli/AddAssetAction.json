{
  "address": "0xBE16638202B7a1600063CC0cAfa1Ff0524E88Ffa",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount",
          "name": "assetAmount",
          "type": "tuple"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "outputAssets",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x56e64396b06df20e1f46721ea525914ed037c3fe6d857a8ecf20202692e30298",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0xBE16638202B7a1600063CC0cAfa1Ff0524E88Ffa",
    "transactionIndex": 1,
    "gasUsed": "5393323",
    "logsBloom": "0x
    "blockHash": "0x4abd889a820d8750a3e5fa8df2cfcc5e9191d02399ead6f7fefbfea7aaf04e94",
    "transactionHash": "0x56e64396b06df20e1f46721ea525914ed037c3fe6d857a8ecf20202692e30298",
    "logs": [],
    "blockNumber": 13149877,
    "cumulativeGasUsed": "5393323",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4b77f16f16378578c9b3e2d18646eb2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount\",\"name\":\"assetAmount\",\"type\":\"tuple\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset[]\",\"name\":\"outputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AssetAdded(address,((uint8,address),uint256))\":{\"params\":{\"assetAmount\":\"The asset and amount that is transferred into this workflow instance\",\"fromAddress\":\"The address from which the asset is transferred into this workflow instance\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(address,((uint8,address),uint256))\":{\"notice\":\"This event is emitted when AddAssetAction is executed\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AddAssetAction.sol\":\"AddAssetAction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './model/Asset.sol';\\nimport './model/AssetAmount.sol';\\nimport './model/WorkflowStepResult.sol';\\n\\ninterface IWorkflowStep {\\n  function execute(\\n    // input assets paired with amounts of each\\n    AssetAmount[] calldata inputAssetAmounts,\\n    // expected output assets (amounts not known yet)\\n    Asset[] calldata outputAssets,\\n    // additional arguments specific to this step\\n    bytes calldata data\\n  ) external payable returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0x53b58fac525aec076ad1de6039ba1cb7606d9fb3aca85cf3179d70f203386e16\",\"license\":\"MIT\"},\"@freemarket/core/contracts/LibPercent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary LibPercent {\\n    /// Percents have 3 decimals of precision, so:\\n    /// 100% is represented as 100000 (100.000%)\\n    /// 1% is represented as 1000 (1.000%)\\n    /// 1 basis point (1/100th of a percent or 0.010% ) is 10\\n    /// the smallest possible percentage is 1/10th of a basis point, or 1 'decibip'\\n    /// @param value the value to take a percentage of\\n    /// @param percent the percentage in decibips\\n    function percentageOf(uint256 value, uint256 percent) internal pure returns (uint256) {\\n        require(0 <= percent && percent <= 100000, \\\"percent must be between 0 and 100000\\\");\\n        uint256 x = value * percent;\\n        return x / 100000;\\n    }\\n}\\n\",\"keccak256\":\"0x7ea6920edf326cd70ed863322b2343db8f76118886dbf5214340ccbee6f6c5b9\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetType.sol';\\n\\nstruct Asset {\\n  AssetType assetType;\\n  address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0xac7144606c56f85fa77f79e9241c8763920dc22dde6e1a1d364e23e2aa12774c\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n  Native,\\n  ERC20,\\n  ERC721\\n}\\n\",\"keccak256\":\"0xf00733a4c359c53b8ebcbee41e43df50ce94d1d3d15e799e9b1c8928c0fd94d9\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n}\\n\",\"keccak256\":\"0x313819947033da240f033808e0251cdd091176504d7d0893b6097d8b4697d2a0\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/AssetType.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/WorkflowStepResult.sol\\\";\\n\\nlibrary LibActionHelpers {\\n    function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        Asset memory asset = Asset(assetType, assetAddress);\\n        AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n        ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n        return WorkflowStepResult(ouputAssetAmounts, -1);\\n    }\\n\\n    function singleTokenResult(address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n    }\\n\\n    function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n        return singleAssetResult(AssetType.Native, address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0xbe9f0b2395af24ac9d18eaafd0a104dbb91b936ca43264fda4f937bc9252be69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/AddAssetAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@freemarket/core/contracts/LibPercent.sol\\\";\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/Asset.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\n\\nstruct AddAssetActionArgs {\\n    address userAddress;\\n    uint256 amount;\\n}\\n\\ncontract AddAssetAction is IWorkflowStep {\\n    /// @notice This event is emitted when AddAssetAction is executed\\n    /// @param fromAddress The address from which the asset is transferred into this workflow instance\\n    /// @param assetAmount The asset and amount that is transferred into this workflow instance\\n    event AssetAdded(address fromAddress, AssetAmount assetAmount);\\n\\n    function execute(AssetAmount[] calldata inputAssetAmounts, Asset[] calldata outputAssets, bytes calldata data)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n        // validate\\n        require(inputAssetAmounts.length == 0, \\\"AddTokenAction must have 0 input assets\\\");\\n        require(outputAssets.length == 1, \\\"AddTokenAction must have 1 output asset\\\");\\n\\n        // decode arguments\\n        AddAssetActionArgs memory args = abi.decode(data, (AddAssetActionArgs));\\n\\n        emit AssetAdded(args.userAddress, AssetAmount(outputAssets[0], args.amount));\\n\\n        if (outputAssets[0].assetType == AssetType.Native) {\\n            // TODO need to re-do how native is accounted for\\n            return LibActionHelpers.singleAssetResult(AssetType.Native, address(0), 0 /*args.amount*/ );\\n        }\\n\\n        require(outputAssets[0].assetType == AssetType.ERC20, \\\"AddTokenAction supports native and ERC20s\\\");\\n        require(args.userAddress != address(this), \\\"AddAsset cannot pull from FrontDoor\\\");\\n\\n        // transfer the token to this\\n        IERC20 erc20 = IERC20(outputAssets[0].assetAddress);\\n        SafeERC20.safeTransferFrom(erc20, args.userAddress, address(this), args.amount);\\n\\n        // return amount transferred\\n        return LibActionHelpers.singleTokenResult(outputAssets[0].assetAddress, args.amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2c6b8f924208a7ce512e85da2b53fedb9829876b5f911b37d361a74d0763aecd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611527806100206000396000f3fe60806040526004361061001e5760003560e01c80632b53501314610023575b600080fd5b61003d6004803603810190610038919061096a565b610053565b60405161004a9190610c55565b60405180910390f35b61005b6107c6565b600087879050146100a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009890610cfa565b60405180910390fd5b600185859050146100e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100de90610d8c565b60405180910390fd5b600083838101906100f89190610ee5565b90507fef0c65b079206f52fb80f62c3dec1aa6a7c5f320e5ab20920ba56c7c7a4f02b5816000015160405180604001604052808989600081811061013f5761013e610f12565b5b9050604002018036038101906101559190610fb6565b81526020018460200151815250604051610170929190611021565b60405180910390a16000600281111561018c5761018b610a4a565b5b868660008181106101a05761019f610f12565b5b90506040020160000160208101906101b8919061104a565b60028111156101ca576101c9610a4a565b5b036101e4576101dc6000806000610374565b91505061036a565b600160028111156101f8576101f7610a4a565b5b8686600081811061020c5761020b610f12565b5b9050604002016000016020810190610224919061104a565b600281111561023657610235610a4a565b5b14610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026d906110e9565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16036102e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102df9061117b565b60405180910390fd5b6000868660008181106102fe576102fd610f12565b5b9050604002016020016020810190610316919061119b565b905061032c81836000015130856020015161048d565b6103658787600081811061034357610342610f12565b5b905060400201602001602081019061035b919061119b565b8360200151610516565b925050505b9695505050505050565b61037c6107c6565b6000604051806040016040528086600281111561039c5761039b610a4a565b5b81526020018573ffffffffffffffffffffffffffffffffffffffff1681525090506000600167ffffffffffffffff8111156103da576103d9610dc2565b5b60405190808252806020026020018201604052801561041357816020015b6104006107e3565b8152602001906001900390816103f85790505b5090506040518060400160405280838152602001858152508160008151811061043f5761043e610f12565b5b602002602001018190525060405180604001604052808281526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60010b815250925050509392505050565b610510846323b872dd60e01b8585856040516024016104ae939291906111d7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610532565b50505050565b61051e6107c6565b61052a60018484610374565b905092915050565b6000610594826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166105f99092919063ffffffff16565b90506000815111156105f457808060200190518101906105b49190611246565b6105f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ea906112e5565b60405180910390fd5b5b505050565b60606106088484600085610611565b90509392505050565b606082471015610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064d90611377565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161067f9190611408565b60006040518083038185875af1925050503d80600081146106bc576040519150601f19603f3d011682016040523d82523d6000602084013e6106c1565b606091505b50915091506106d2878383876106de565b92505050949350505050565b60608315610740576000835103610738576106f885610753565b610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e9061146b565b60405180910390fd5b5b82905061074b565b61074a8383610776565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156107895781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bd91906114cf565b60405180910390fd5b604051806040016040528060608152602001600060010b81525090565b60405180604001604052806107f6610803565b8152602001600081525090565b60405180604001604052806000600281111561082257610821610a4a565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261087e5761087d610859565b5b8235905067ffffffffffffffff81111561089b5761089a61085e565b5b6020830191508360608202830111156108b7576108b6610863565b5b9250929050565b60008083601f8401126108d4576108d3610859565b5b8235905067ffffffffffffffff8111156108f1576108f061085e565b5b60208301915083604082028301111561090d5761090c610863565b5b9250929050565b60008083601f84011261092a57610929610859565b5b8235905067ffffffffffffffff8111156109475761094661085e565b5b60208301915083600182028301111561096357610962610863565b5b9250929050565b600080600080600080606087890312156109875761098661084f565b5b600087013567ffffffffffffffff8111156109a5576109a4610854565b5b6109b189828a01610868565b9650965050602087013567ffffffffffffffff8111156109d4576109d3610854565b5b6109e089828a016108be565b9450945050604087013567ffffffffffffffff811115610a0357610a02610854565b5b610a0f89828a01610914565b92509250509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610a8a57610a89610a4a565b5b50565b6000819050610a9b82610a79565b919050565b6000610aab82610a8d565b9050919050565b610abb81610aa0565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aec82610ac1565b9050919050565b610afc81610ae1565b82525050565b604082016000820151610b186000850182610ab2565b506020820151610b2b6020850182610af3565b50505050565b6000819050919050565b610b4481610b31565b82525050565b606082016000820151610b606000850182610b02565b506020820151610b736040850182610b3b565b50505050565b6000610b858383610b4a565b60608301905092915050565b6000602082019050919050565b6000610ba982610a1e565b610bb38185610a29565b9350610bbe83610a3a565b8060005b83811015610bef578151610bd68882610b79565b9750610be183610b91565b925050600181019050610bc2565b5085935050505092915050565b60008160010b9050919050565b610c1281610bfc565b82525050565b60006040830160008301518482036000860152610c358282610b9e565b9150506020830151610c4a6020860182610c09565b508091505092915050565b60006020820190508181036000830152610c6f8184610c18565b905092915050565b600082825260208201905092915050565b7f416464546f6b656e416374696f6e206d7573742068617665203020696e70757460008201527f2061737365747300000000000000000000000000000000000000000000000000602082015250565b6000610ce4602783610c77565b9150610cef82610c88565b604082019050919050565b60006020820190508181036000830152610d1381610cd7565b9050919050565b7f416464546f6b656e416374696f6e206d75737420686176652031206f7574707560008201527f7420617373657400000000000000000000000000000000000000000000000000602082015250565b6000610d76602783610c77565b9150610d8182610d1a565b604082019050919050565b60006020820190508181036000830152610da581610d69565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dfa82610db1565b810181811067ffffffffffffffff82111715610e1957610e18610dc2565b5b80604052505050565b6000610e2c610845565b9050610e388282610df1565b919050565b610e4681610ae1565b8114610e5157600080fd5b50565b600081359050610e6381610e3d565b92915050565b610e7281610b31565b8114610e7d57600080fd5b50565b600081359050610e8f81610e69565b92915050565b600060408284031215610eab57610eaa610dac565b5b610eb56040610e22565b90506000610ec584828501610e54565b6000830152506020610ed984828501610e80565b60208301525092915050565b600060408284031215610efb57610efa61084f565b5b6000610f0984828501610e95565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60038110610f4e57600080fd5b50565b600081359050610f6081610f41565b92915050565b600060408284031215610f7c57610f7b610dac565b5b610f866040610e22565b90506000610f9684828501610f51565b6000830152506020610faa84828501610e54565b60208301525092915050565b600060408284031215610fcc57610fcb61084f565b5b6000610fda84828501610f66565b91505092915050565b610fec81610ae1565b82525050565b6060820160008201516110086000850182610b02565b50602082015161101b6040850182610b3b565b50505050565b60006080820190506110366000830185610fe3565b6110436020830184610ff2565b9392505050565b6000602082840312156110605761105f61084f565b5b600061106e84828501610f51565b91505092915050565b7f416464546f6b656e416374696f6e20737570706f727473206e6174697665206160008201527f6e64204552433230730000000000000000000000000000000000000000000000602082015250565b60006110d3602983610c77565b91506110de82611077565b604082019050919050565b60006020820190508181036000830152611102816110c6565b9050919050565b7f41646441737365742063616e6e6f742070756c6c2066726f6d2046726f6e744460008201527f6f6f720000000000000000000000000000000000000000000000000000000000602082015250565b6000611165602383610c77565b915061117082611109565b604082019050919050565b6000602082019050818103600083015261119481611158565b9050919050565b6000602082840312156111b1576111b061084f565b5b60006111bf84828501610e54565b91505092915050565b6111d181610b31565b82525050565b60006060820190506111ec6000830186610fe3565b6111f96020830185610fe3565b61120660408301846111c8565b949350505050565b60008115159050919050565b6112238161120e565b811461122e57600080fd5b50565b6000815190506112408161121a565b92915050565b60006020828403121561125c5761125b61084f565b5b600061126a84828501611231565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006112cf602a83610c77565b91506112da82611273565b604082019050919050565b600060208201905081810360008301526112fe816112c2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611361602683610c77565b915061136c82611305565b604082019050919050565b6000602082019050818103600083015261139081611354565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156113cb5780820151818401526020810190506113b0565b60008484015250505050565b60006113e282611397565b6113ec81856113a2565b93506113fc8185602086016113ad565b80840191505092915050565b600061141482846113d7565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611455601d83610c77565b91506114608261141f565b602082019050919050565b6000602082019050818103600083015261148481611448565b9050919050565b600081519050919050565b60006114a18261148b565b6114ab8185610c77565b93506114bb8185602086016113ad565b6114c481610db1565b840191505092915050565b600060208201905081810360008301526114e98184611496565b90509291505056fea26469706673582212208fce216904c17788c8b91c308aa0b95156a596c8fa04b7c17c92dc9fb3545c9d64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "AssetAdded(address,((uint8,address),uint256))": {
        "params": {
          "assetAmount": "The asset and amount that is transferred into this workflow instance",
          "fromAddress": "The address from which the asset is transferred into this workflow instance"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(address,((uint8,address),uint256))": {
        "notice": "This event is emitted when AddAssetAction is executed"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}