{
  "address": "0x22b1c5C2C9251622f7eFb76E356104E5aF0e996A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount",
          "name": "assetAmount",
          "type": "tuple"
        }
      ],
      "name": "AssetAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "assetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c869c03e7287d497ad2f5ba4831a334d58f52521c3780c77dc3c86d569ac4c6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x22b1c5C2C9251622f7eFb76E356104E5aF0e996A",
    "transactionIndex": 0,
    "gasUsed": "1196299",
    "logsBloom": "0x
    "blockHash": "0x11f5f9c53b9c204e3b7a0203f11d7081797557cf29dc9a7f4225ae897b9c1183",
    "transactionHash": "0x5c869c03e7287d497ad2f5ba4831a334d58f52521c3780c77dc3c86d569ac4c6",
    "logs": [],
    "blockNumber": 16889316,
    "cumulativeGasUsed": "1196299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "02d2baa2ada0a9ecd22b96536c0dd955",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount\",\"name\":\"assetAmount\",\"type\":\"tuple\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"assetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AssetAdded(((uint8,address),uint256))\":{\"params\":{\"assetAmount\":\"The asset and amount that is transferred into this workflow instance\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AssetAdded(((uint8,address),uint256))\":{\"notice\":\"This event is emitted when AddAssetAction is executed\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AddAssetAction.sol\":\"AddAssetAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/LibPercent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary LibPercent {\\n    /// Percents have 3 decimals of precision, so:\\n    /// 100% is represented as 100000 (100.000%)\\n    /// 1% is represented as 1000 (1.000%)\\n    /// 1 basis point (1/100th of a percent or 0.010% ) is 10\\n    /// the smallest possible percentage is 1/10th of a basis point, or 1 'decibip'\\n    /// @param value the value to take a percentage of\\n    /// @param percent the percentage in decibips\\n    function percentageOf(uint256 value, uint256 percent) internal pure returns (uint256) {\\n        require(0 <= percent && percent <= 100000, \\\"percent must be between 0 and 100000\\\");\\n        uint256 x = value * percent;\\n        return x / 100000;\\n    }\\n}\\n\",\"keccak256\":\"0x7ea6920edf326cd70ed863322b2343db8f76118886dbf5214340ccbee6f6c5b9\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nlibrary LibActionHelpers {\\n  function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    Asset memory asset = Asset(assetType, assetAddress);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n    ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n    return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2, -1);\\n  }\\n\\n  function singleTokenResult(address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n  }\\n\\n  function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.Native, address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x3017f42ec45c2ee13e81220ac9833f47456f6ee9002fbefd9fdb12055ad7e863\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x2cfe6c734d98383e76c5f7ae9cf3f6e0eeef790bb4bb3b6049589eae6ed1dd64\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/AddAssetAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@freemarket/core/contracts/LibPercent.sol\\\";\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/Asset.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\\\";\\n\\n//\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing SafeERC20 for IERC20;\\n\\ncontract AddAssetAction is IWorkflowStep {\\n    /// @notice This event is emitted when AddAssetAction is executed\\n    /// @param assetAmount The asset and amount that is transferred into this workflow instance\\n    event AssetAdded(AssetAmount assetAmount);\\n\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n        // validate\\n        require(assetAmounts.length == 1, \\\"AddTokenAction must have 1 AssetAmount\\\");\\n\\n\\n\\n        emit AssetAdded(assetAmounts[0]);\\n\\n        if (assetAmounts[0].asset.assetType == AssetType.Native) {\\n            require(msg.value == assetAmounts[0].amount, \\\"native amount should match msg.value\\\");\\n            // returning 0 inputs 0 outputs because this is really a no-op\\n            // native coming in is already accounted for \\n            return LibStepResultBuilder.create(0, 0).result;\\n        }\\n\\n        require(assetAmounts[0].asset.assetType == AssetType.ERC20, \\\"AddTokenAction supports native and ERC20s\\\");\\n\\n        // transfer the token to this\\n        IERC20 erc20 = IERC20(assetAmounts[0].asset.assetAddress);\\n        erc20.safeTransferFrom(msg.sender, address(this), assetAmounts[0].amount);\\n        \\n        // WorkflowStepResult memory asdf = LibStepResultBuilder.create(0, 1).addOutputToken(\\n        //     assetAmounts[0].asset.assetAddress, assetAmounts[0].amount\\n        // ).result;\\n\\n\\n\\n\\n\\n\\n        // return amount transferred\\n        return LibStepResultBuilder.create(0, 1).addOutputToken(\\n            assetAmounts[0].asset.assetAddress, assetAmounts[0].amount\\n        ).result;\\n    }\\n}\\n\",\"keccak256\":\"0x228255c8ad8f625b8389645ad4068667f62c94023d1e0debbdfcd470961f318e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506114c7806100206000396000f3fe60806040526004361061001e5760003560e01c80637bb26ca714610023575b600080fd5b61003d600480360381019061003891906109c9565b610053565b60405161004a9190610cca565b60405180910390f35b61005b61084d565b600185859050146100a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009890610d6f565b60405180910390fd5b7fe69b1fa8a2307790ac35f91c6e1b14f0d0827edb30c3f450804581f0cf5c140a858560008181106100d6576100d5610d8f565b5b9050606002016040516100e99190610f09565b60405180910390a16000600281111561010557610104610a76565b5b8585600081811061011957610118610d8f565b5b90506060020160000160000160208101906101349190610f24565b600281111561014657610145610a76565b5b036101c0578484600081811061015f5761015e610d8f565b5b9050606002016040013534146101aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a190610fc3565b60405180910390fd5b6101b560008061034d565b604001519050610345565b600160028111156101d4576101d3610a76565b5b858560008181106101e8576101e7610d8f565b5b90506060020160000160000160208101906102039190610f24565b600281111561021557610214610a76565b5b14610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024c90611055565b60405180910390fd5b60008585600081811061026b5761026a610d8f565b5b90506060020160000160200160208101906102869190611075565b90506102d23330888860008181106102a1576102a0610d8f565b5b905060600201604001358473ffffffffffffffffffffffffffffffffffffffff16610492909392919063ffffffff16565b61033d868660008181106102e9576102e8610d8f565b5b90506060020160000160200160208101906103049190611075565b8787600081811061031857610317610d8f565b5b9050606002016040013561032e6000600161034d565b61051b9092919063ffffffff16565b604001519150505b949350505050565b61035561087b565b60008367ffffffffffffffff811115610371576103706110a2565b5b6040519080825280602002602001820160405280156103aa57816020015b6103976108a2565b81526020019060019003908161038f5790505b50905060008367ffffffffffffffff8111156103c9576103c86110a2565b5b60405190808252806020026020018201604052801561040257816020015b6103ef6108a2565b8152602001906001900390816103e75790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610515846323b872dd60e01b8585856040516024016104b3939291906110ef565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506105b9565b50505050565b61052361087b565b604051806040016040528060405180604001604052806001600281111561054d5761054c610a76565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061059090611155565b815250815181106105a4576105a3610d8f565b5b60200260200101819052508390509392505050565b600061061b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106809092919063ffffffff16565b905060008151111561067b578080602001905181019061063b91906111d5565b61067a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067190611274565b60405180910390fd5b5b505050565b606061068f8484600085610698565b90509392505050565b6060824710156106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d490611306565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107069190611397565b60006040518083038185875af1925050503d8060008114610743576040519150601f19603f3d011682016040523d82523d6000602084013e610748565b606091505b509150915061075987838387610765565b92505050949350505050565b606083156107c75760008351036107bf5761077f856107da565b6107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b5906113fa565b60405180910390fd5b5b8290506107d2565b6107d183836107fd565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156108105781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610844919061146f565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060600160405280600081526020016000815260200161089c61084d565b81525090565b60405180604001604052806108b56108c2565b8152602001600081525090565b6040518060400160405280600060028111156108e1576108e0610a76565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126109335761093261090e565b5b8235905067ffffffffffffffff8111156109505761094f610913565b5b60208301915083606082028301111561096c5761096b610918565b5b9250929050565b60008083601f8401126109895761098861090e565b5b8235905067ffffffffffffffff8111156109a6576109a5610913565b5b6020830191508360018202830111156109c2576109c1610918565b5b9250929050565b600080600080604085870312156109e3576109e2610904565b5b600085013567ffffffffffffffff811115610a0157610a00610909565b5b610a0d8782880161091d565b9450945050602085013567ffffffffffffffff811115610a3057610a2f610909565b5b610a3c87828801610973565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610ab657610ab5610a76565b5b50565b6000819050610ac782610aa5565b919050565b6000610ad782610ab9565b9050919050565b610ae781610acc565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1882610aed565b9050919050565b610b2881610b0d565b82525050565b604082016000820151610b446000850182610ade565b506020820151610b576020850182610b1f565b50505050565b6000819050919050565b610b7081610b5d565b82525050565b606082016000820151610b8c6000850182610b2e565b506020820151610b9f6040850182610b67565b50505050565b6000610bb18383610b76565b60608301905092915050565b6000602082019050919050565b6000610bd582610a4a565b610bdf8185610a55565b9350610bea83610a66565b8060005b83811015610c1b578151610c028882610ba5565b9750610c0d83610bbd565b925050600181019050610bee565b5085935050505092915050565b60008160010b9050919050565b610c3e81610c28565b82525050565b60008160020b9050919050565b610c5a81610c44565b82525050565b60006080830160008301518482036000860152610c7d8282610bca565b91505060208301518482036020860152610c978282610bca565b9150506040830151610cac6040860182610c35565b506060830151610cbf6060860182610c51565b508091505092915050565b60006020820190508181036000830152610ce48184610c60565b905092915050565b600082825260208201905092915050565b7f416464546f6b656e416374696f6e206d7573742068617665203120417373657460008201527f416d6f756e740000000000000000000000000000000000000000000000000000602082015250565b6000610d59602683610cec565b9150610d6482610cfd565b604082019050919050565b60006020820190508181036000830152610d8881610d4c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082905092915050565b60038110610dd657600080fd5b50565b600081359050610de881610dc9565b92915050565b6000610dfd6020840184610dd9565b905092915050565b610e0e81610b0d565b8114610e1957600080fd5b50565b600081359050610e2b81610e05565b92915050565b6000610e406020840184610e1c565b905092915050565b60408201610e596000830183610dee565b610e666000850182610ade565b50610e746020830183610e31565b610e816020850182610b1f565b50505050565b610e9081610b5d565b8114610e9b57600080fd5b50565b600081359050610ead81610e87565b92915050565b6000610ec26020840184610e9e565b905092915050565b60608201610edb6000830183610dbe565b610ee86000850182610e48565b50610ef66040830183610eb3565b610f036040850182610b67565b50505050565b6000606082019050610f1e6000830184610eca565b92915050565b600060208284031215610f3a57610f39610904565b5b6000610f4884828501610dd9565b91505092915050565b7f6e617469766520616d6f756e742073686f756c64206d61746368206d73672e7660008201527f616c756500000000000000000000000000000000000000000000000000000000602082015250565b6000610fad602483610cec565b9150610fb882610f51565b604082019050919050565b60006020820190508181036000830152610fdc81610fa0565b9050919050565b7f416464546f6b656e416374696f6e20737570706f727473206e6174697665206160008201527f6e64204552433230730000000000000000000000000000000000000000000000602082015250565b600061103f602983610cec565b915061104a82610fe3565b604082019050919050565b6000602082019050818103600083015261106e81611032565b9050919050565b60006020828403121561108b5761108a610904565b5b600061109984828501610e1c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110da81610b0d565b82525050565b6110e981610b5d565b82525050565b600060608201905061110460008301866110d1565b61111160208301856110d1565b61111e60408301846110e0565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061116082610b5d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361119257611191611126565b5b600182019050919050565b60008115159050919050565b6111b28161119d565b81146111bd57600080fd5b50565b6000815190506111cf816111a9565b92915050565b6000602082840312156111eb576111ea610904565b5b60006111f9848285016111c0565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061125e602a83610cec565b915061126982611202565b604082019050919050565b6000602082019050818103600083015261128d81611251565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006112f0602683610cec565b91506112fb82611294565b604082019050919050565b6000602082019050818103600083015261131f816112e3565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561135a57808201518184015260208101905061133f565b60008484015250505050565b600061137182611326565b61137b8185611331565b935061138b81856020860161133c565b80840191505092915050565b60006113a38284611366565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006113e4601d83610cec565b91506113ef826113ae565b602082019050919050565b60006020820190508181036000830152611413816113d7565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006114418261141a565b61144b8185610cec565b935061145b81856020860161133c565b61146481611425565b840191505092915050565b600060208201905081810360008301526114898184611436565b90509291505056fea2646970667358221220ebf22f3173264d6c83fa769a0d8a098e3241be23d4b7f8425d0609ebe65bb51464736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061001e5760003560e01c80637bb26ca714610023575b600080fd5b61003d600480360381019061003891906109c9565b610053565b60405161004a9190610cca565b60405180910390f35b61005b61084d565b600185859050146100a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009890610d6f565b60405180910390fd5b7fe69b1fa8a2307790ac35f91c6e1b14f0d0827edb30c3f450804581f0cf5c140a858560008181106100d6576100d5610d8f565b5b9050606002016040516100e99190610f09565b60405180910390a16000600281111561010557610104610a76565b5b8585600081811061011957610118610d8f565b5b90506060020160000160000160208101906101349190610f24565b600281111561014657610145610a76565b5b036101c0578484600081811061015f5761015e610d8f565b5b9050606002016040013534146101aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a190610fc3565b60405180910390fd5b6101b560008061034d565b604001519050610345565b600160028111156101d4576101d3610a76565b5b858560008181106101e8576101e7610d8f565b5b90506060020160000160000160208101906102039190610f24565b600281111561021557610214610a76565b5b14610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024c90611055565b60405180910390fd5b60008585600081811061026b5761026a610d8f565b5b90506060020160000160200160208101906102869190611075565b90506102d23330888860008181106102a1576102a0610d8f565b5b905060600201604001358473ffffffffffffffffffffffffffffffffffffffff16610492909392919063ffffffff16565b61033d868660008181106102e9576102e8610d8f565b5b90506060020160000160200160208101906103049190611075565b8787600081811061031857610317610d8f565b5b9050606002016040013561032e6000600161034d565b61051b9092919063ffffffff16565b604001519150505b949350505050565b61035561087b565b60008367ffffffffffffffff811115610371576103706110a2565b5b6040519080825280602002602001820160405280156103aa57816020015b6103976108a2565b81526020019060019003908161038f5790505b50905060008367ffffffffffffffff8111156103c9576103c86110a2565b5b60405190808252806020026020018201604052801561040257816020015b6103ef6108a2565b8152602001906001900390816103e75790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610515846323b872dd60e01b8585856040516024016104b3939291906110ef565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506105b9565b50505050565b61052361087b565b604051806040016040528060405180604001604052806001600281111561054d5761054c610a76565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061059090611155565b815250815181106105a4576105a3610d8f565b5b60200260200101819052508390509392505050565b600061061b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166106809092919063ffffffff16565b905060008151111561067b578080602001905181019061063b91906111d5565b61067a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067190611274565b60405180910390fd5b5b505050565b606061068f8484600085610698565b90509392505050565b6060824710156106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d490611306565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107069190611397565b60006040518083038185875af1925050503d8060008114610743576040519150601f19603f3d011682016040523d82523d6000602084013e610748565b606091505b509150915061075987838387610765565b92505050949350505050565b606083156107c75760008351036107bf5761077f856107da565b6107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b5906113fa565b60405180910390fd5b5b8290506107d2565b6107d183836107fd565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156108105781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610844919061146f565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060600160405280600081526020016000815260200161089c61084d565b81525090565b60405180604001604052806108b56108c2565b8152602001600081525090565b6040518060400160405280600060028111156108e1576108e0610a76565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126109335761093261090e565b5b8235905067ffffffffffffffff8111156109505761094f610913565b5b60208301915083606082028301111561096c5761096b610918565b5b9250929050565b60008083601f8401126109895761098861090e565b5b8235905067ffffffffffffffff8111156109a6576109a5610913565b5b6020830191508360018202830111156109c2576109c1610918565b5b9250929050565b600080600080604085870312156109e3576109e2610904565b5b600085013567ffffffffffffffff811115610a0157610a00610909565b5b610a0d8782880161091d565b9450945050602085013567ffffffffffffffff811115610a3057610a2f610909565b5b610a3c87828801610973565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610ab657610ab5610a76565b5b50565b6000819050610ac782610aa5565b919050565b6000610ad782610ab9565b9050919050565b610ae781610acc565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1882610aed565b9050919050565b610b2881610b0d565b82525050565b604082016000820151610b446000850182610ade565b506020820151610b576020850182610b1f565b50505050565b6000819050919050565b610b7081610b5d565b82525050565b606082016000820151610b8c6000850182610b2e565b506020820151610b9f6040850182610b67565b50505050565b6000610bb18383610b76565b60608301905092915050565b6000602082019050919050565b6000610bd582610a4a565b610bdf8185610a55565b9350610bea83610a66565b8060005b83811015610c1b578151610c028882610ba5565b9750610c0d83610bbd565b925050600181019050610bee565b5085935050505092915050565b60008160010b9050919050565b610c3e81610c28565b82525050565b60008160020b9050919050565b610c5a81610c44565b82525050565b60006080830160008301518482036000860152610c7d8282610bca565b91505060208301518482036020860152610c978282610bca565b9150506040830151610cac6040860182610c35565b506060830151610cbf6060860182610c51565b508091505092915050565b60006020820190508181036000830152610ce48184610c60565b905092915050565b600082825260208201905092915050565b7f416464546f6b656e416374696f6e206d7573742068617665203120417373657460008201527f416d6f756e740000000000000000000000000000000000000000000000000000602082015250565b6000610d59602683610cec565b9150610d6482610cfd565b604082019050919050565b60006020820190508181036000830152610d8881610d4c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082905092915050565b60038110610dd657600080fd5b50565b600081359050610de881610dc9565b92915050565b6000610dfd6020840184610dd9565b905092915050565b610e0e81610b0d565b8114610e1957600080fd5b50565b600081359050610e2b81610e05565b92915050565b6000610e406020840184610e1c565b905092915050565b60408201610e596000830183610dee565b610e666000850182610ade565b50610e746020830183610e31565b610e816020850182610b1f565b50505050565b610e9081610b5d565b8114610e9b57600080fd5b50565b600081359050610ead81610e87565b92915050565b6000610ec26020840184610e9e565b905092915050565b60608201610edb6000830183610dbe565b610ee86000850182610e48565b50610ef66040830183610eb3565b610f036040850182610b67565b50505050565b6000606082019050610f1e6000830184610eca565b92915050565b600060208284031215610f3a57610f39610904565b5b6000610f4884828501610dd9565b91505092915050565b7f6e617469766520616d6f756e742073686f756c64206d61746368206d73672e7660008201527f616c756500000000000000000000000000000000000000000000000000000000602082015250565b6000610fad602483610cec565b9150610fb882610f51565b604082019050919050565b60006020820190508181036000830152610fdc81610fa0565b9050919050565b7f416464546f6b656e416374696f6e20737570706f727473206e6174697665206160008201527f6e64204552433230730000000000000000000000000000000000000000000000602082015250565b600061103f602983610cec565b915061104a82610fe3565b604082019050919050565b6000602082019050818103600083015261106e81611032565b9050919050565b60006020828403121561108b5761108a610904565b5b600061109984828501610e1c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110da81610b0d565b82525050565b6110e981610b5d565b82525050565b600060608201905061110460008301866110d1565b61111160208301856110d1565b61111e60408301846110e0565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061116082610b5d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361119257611191611126565b5b600182019050919050565b60008115159050919050565b6111b28161119d565b81146111bd57600080fd5b50565b6000815190506111cf816111a9565b92915050565b6000602082840312156111eb576111ea610904565b5b60006111f9848285016111c0565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061125e602a83610cec565b915061126982611202565b604082019050919050565b6000602082019050818103600083015261128d81611251565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006112f0602683610cec565b91506112fb82611294565b604082019050919050565b6000602082019050818103600083015261131f816112e3565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561135a57808201518184015260208101905061133f565b60008484015250505050565b600061137182611326565b61137b8185611331565b935061138b81856020860161133c565b80840191505092915050565b60006113a38284611366565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006113e4601d83610cec565b91506113ef826113ae565b602082019050919050565b60006020820190508181036000830152611413816113d7565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006114418261141a565b61144b8185610cec565b935061145b81856020860161133c565b61146481611425565b840191505092915050565b600060208201905081810360008301526114898184611436565b90509291505056fea2646970667358221220ebf22f3173264d6c83fa769a0d8a098e3241be23d4b7f8425d0609ebe65bb51464736f6c63430008120033",
  "devdoc": {
    "events": {
      "AssetAdded(((uint8,address),uint256))": {
        "params": {
          "assetAmount": "The asset and amount that is transferred into this workflow instance"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetAdded(((uint8,address),uint256))": {
        "notice": "This event is emitted when AddAssetAction is executed"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}