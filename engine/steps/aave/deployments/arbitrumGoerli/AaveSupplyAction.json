{
  "address": "0x95a771b576e76D921C66D96f6eb4FC47eC2Cd051",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aavePoolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount",
          "name": "inputAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "AaveSupplyActionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xedd518c87e2831c6532f0e3e0c6e2da3e347dd35e54465ce97b44fd5d4d8d81d",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x95a771b576e76D921C66D96f6eb4FC47eC2Cd051",
    "transactionIndex": 1,
    "gasUsed": "6988101",
    "logsBloom": "0x
    "blockHash": "0x9220b23b11fa4c555a75ce3632010cc1d466a110b23fc6972bc5c83b5caabf31",
    "transactionHash": "0xedd518c87e2831c6532f0e3e0c6e2da3e347dd35e54465ce97b44fd5d4d8d81d",
    "logs": [],
    "blockNumber": 13149974,
    "cumulativeGasUsed": "6988101",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC81e66bBE8B45FBDAE11e4E71CBE76a121e5b8Ba"
  ],
  "numDeployments": 1,
  "solcInputHash": "271ac2a339904fbc77866af596dbe7a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aavePoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount\",\"name\":\"inputAssetAmount\",\"type\":\"tuple\"}],\"name\":\"AaveSupplyActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"params\":{\"inputAssetAmount\":\"the asset and amout being supplied to Aave.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"notice\":\"This event is emitted when an Aave 'supply' action is executed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveSupplyAction.sol\":\"AaveSupplyAction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './model/Asset.sol';\\nimport './model/AssetAmount.sol';\\nimport './model/WorkflowStepResult.sol';\\n\\ninterface IWorkflowStep {\\n  function execute(\\n    // input assets paired with amounts of each\\n    AssetAmount[] calldata inputAssetAmounts,\\n    // expected output assets (amounts not known yet)\\n    Asset[] calldata outputAssets,\\n    // additional arguments specific to this step\\n    bytes calldata data\\n  ) external payable returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0x53b58fac525aec076ad1de6039ba1cb7606d9fb3aca85cf3179d70f203386e16\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetType.sol';\\n\\nstruct Asset {\\n  AssetType assetType;\\n  address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0xac7144606c56f85fa77f79e9241c8763920dc22dde6e1a1d364e23e2aa12774c\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n  Native,\\n  ERC20,\\n  ERC721\\n}\\n\",\"keccak256\":\"0xf00733a4c359c53b8ebcbee41e43df50ce94d1d3d15e799e9b1c8928c0fd94d9\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n}\\n\",\"keccak256\":\"0x313819947033da240f033808e0251cdd091176504d7d0893b6097d8b4697d2a0\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/AssetType.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/WorkflowStepResult.sol\\\";\\n\\nlibrary LibActionHelpers {\\n    function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        Asset memory asset = Asset(assetType, assetAddress);\\n        AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n        ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n        return WorkflowStepResult(ouputAssetAmounts, -1);\\n    }\\n\\n    function singleTokenResult(address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n    }\\n\\n    function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n        return singleAssetResult(AssetType.Native, address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0xbe9f0b2395af24ac9d18eaafd0a104dbb91b936ca43264fda4f937bc9252be69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/AaveSupplyAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\nimport \\\"./IAaveV3Pool.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// import {IPool} from '@aave/core-v3/contracts/interfaces/IPool.sol';\\n// import {DataTypes} from '@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol';\\n\\ncontract AaveSupplyAction is IWorkflowStep {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable poolAddress;\\n\\n    /// @notice This event is emitted when an Aave 'supply' action is executed.\\n    /// @param inputAssetAmount the asset and amout being supplied to Aave.\\n    event AaveSupplyActionEvent(AssetAmount inputAssetAmount);\\n\\n    constructor(address _aavePoolAddress) {\\n        poolAddress = _aavePoolAddress;\\n    }\\n\\n    function execute(AssetAmount[] calldata inputAssetAmounts, Asset[] calldata, bytes calldata)\\n        public\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n        // validate\\n        require(inputAssetAmounts.length == 1, \\\"there must be exactly 1 input asset\\\");\\n        require(inputAssetAmounts[0].asset.assetType == AssetType.ERC20, \\\"the input asset must be an ERC20\\\");\\n        // require(outputAssets.length == 1, 'there must be exactly 1 output asset when keeping the aToken in the engine');\\n\\n        emit AaveSupplyActionEvent(inputAssetAmounts[0]);\\n\\n        // approve aave to take the asset\\n        IERC20 inputToken = IERC20(inputAssetAmounts[0].asset.assetAddress);\\n        inputToken.safeApprove(poolAddress, inputAssetAmounts[0].amount);\\n\\n        // get the aToken\\n        IAaveV3Pool pool = IAaveV3Pool(poolAddress);\\n        ReserveData memory reserveData = pool.getReserveData(inputAssetAmounts[0].asset.assetAddress);\\n        IERC20 aToken = IERC20(reserveData.aTokenAddress);\\n\\n        // take note of the before balance\\n        uint256 aTokenBalanceBefore = aToken.balanceOf(address(this));\\n\\n        // invoke supply\\n        pool.supply(inputAssetAmounts[0].asset.assetAddress, inputAssetAmounts[0].amount, address(this), 0);\\n        uint256 aTokenBalanceAfter = aToken.balanceOf(address(this));\\n        require(aTokenBalanceAfter > aTokenBalanceBefore, \\\"aToken balance did not increase\\\");\\n\\n        return LibActionHelpers.singleTokenResult(reserveData.aTokenAddress, aTokenBalanceAfter - aTokenBalanceBefore);\\n    }\\n}\\n\",\"keccak256\":\"0x8a4bdaa966f89c40c485c7b0f02e3f42a0fdbb5d5ec4c36103282e26eabde904\",\"license\":\"MIT\"},\"contracts/IAaveV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct ReserveConfigurationMap {\\n  //bit 0-15: LTV\\n  //bit 16-31: Liq. threshold\\n  //bit 32-47: Liq. bonus\\n  //bit 48-55: Decimals\\n  //bit 56: reserve is active\\n  //bit 57: reserve is frozen\\n  //bit 58: borrowing is enabled\\n  //bit 59: stable rate borrowing enabled\\n  //bit 60: asset is paused\\n  //bit 61: borrowing in isolation mode is enabled\\n  //bit 62-63: reserved\\n  //bit 64-79: reserve factor\\n  //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n  //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n  //bit 152-167 liquidation protocol fee\\n  //bit 168-175 eMode category\\n  //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n  //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n  //bit 252-255 unused\\n\\n  uint256 data;\\n}\\n\\nstruct ReserveData {\\n  //stores the reserve configuration\\n  ReserveConfigurationMap configuration;\\n  //the liquidity index. Expressed in ray\\n  uint128 liquidityIndex;\\n  //the current supply rate. Expressed in ray\\n  uint128 currentLiquidityRate;\\n  //variable borrow index. Expressed in ray\\n  uint128 variableBorrowIndex;\\n  //the current variable borrow rate. Expressed in ray\\n  uint128 currentVariableBorrowRate;\\n  //the current stable borrow rate. Expressed in ray\\n  uint128 currentStableBorrowRate;\\n  //timestamp of last update\\n  uint40 lastUpdateTimestamp;\\n  //the id of the reserve. Represents the position in the list of the active reserves\\n  uint16 id;\\n  //aToken address\\n  address aTokenAddress;\\n  //stableDebtToken address\\n  address stableDebtTokenAddress;\\n  //variableDebtToken address\\n  address variableDebtTokenAddress;\\n  //address of the interest rate strategy\\n  address interestRateStrategyAddress;\\n  //the current treasury balance, scaled\\n  uint128 accruedToTreasury;\\n  //the outstanding unbacked aTokens minted through the bridging feature\\n  uint128 unbacked;\\n  //the outstanding debt borrowed against this asset in isolation mode\\n  uint128 isolationModeTotalDebt;\\n}\\n\\n/**\\n * @title IAaveV3Pool\\n * @author FreeMarketProtocol\\n * @notice This is a _partial_ interface with only the supply method used by AaveSupplyAction.\\n */\\ninterface IAaveV3Pool {\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (ReserveData memory);\\n}\\n\",\"keccak256\":\"0xf0ef438e4c74f3f2e3a68dba30e6c161ca149ba804abb7b25a71ad2d8e809feb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001c8038038062001c808339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051611b496200013760003960008181608b01528181610218015261027f0152611b496000f3fe6080604052600436106100295760003560e01c80631755ff211461002e5780632b53501314610059575b600080fd5b34801561003a57600080fd5b50610043610089565b6040516100509190610b56565b60405180910390f35b610073600480360381019061006e9190610c96565b6100ad565b6040516100809190610f4f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100b5610a96565b600187879050146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f290610ff4565b60405180910390fd5b6001600281111561010f5761010e610d76565b5b8787600081811061012357610122611014565b5b905060600201600001600001602081019061013e9190611068565b60028111156101505761014f610d76565b5b14610190576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610187906110e1565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b9878760008181106101c5576101c4611014565b5b9050606002016040516101d89190611227565b60405180910390a16000878760008181106101f6576101f5611014565b5b90506060020160000160200160208101906102119190611242565b905061027b7f00000000000000000000000000000000000000000000000000000000000000008989600081811061024b5761024a611014565b5b905060600201604001358373ffffffffffffffffffffffffffffffffffffffff1661057e9092919063ffffffff16565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a758b8b60008181106102d2576102d1611014565b5b90506060020160000160200160208101906102ed9190611242565b6040518263ffffffff1660e01b81526004016103099190610b56565b6101e060405180830381865afa158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b9190611589565b90506000816101000151905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103929190610b56565b602060405180830381865afa1580156103af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d391906115b7565b90508373ffffffffffffffffffffffffffffffffffffffff1663617ba0378d8d600081811061040557610404611014565b5b90506060020160000160200160208101906104209190611242565b8e8e600081811061043457610433611014565b5b905060600201604001353060006040518563ffffffff1660e01b81526004016104609493929190611638565b600060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104cd9190610b56565b602060405180830381865afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e91906115b7565b9050818111610552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549906116c9565b60405180910390fd5b61056c84610100015183836105679190611718565b6106cd565b96505050505050509695505050505050565b6000811480610608575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016105c592919061174c565b602060405180830381865afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060691906115b7565b145b610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e906117e7565b60405180910390fd5b6106c88363095ea7b360e01b8484604051602401610666929190611807565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506106e9565b505050565b6106d5610a96565b6106e1600184846107b0565b905092915050565b600061074b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108c99092919063ffffffff16565b90506000815111156107ab578080602001905181019061076b9190611868565b6107aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a190611907565b60405180910390fd5b5b505050565b6107b8610a96565b600060405180604001604052808660028111156107d8576107d7610d76565b5b81526020018573ffffffffffffffffffffffffffffffffffffffff1681525090506000600167ffffffffffffffff81111561081657610815611285565b5b60405190808252806020026020018201604052801561084f57816020015b61083c610ab3565b8152602001906001900390816108345790505b5090506040518060400160405280838152602001858152508160008151811061087b5761087a611014565b5b602002602001018190525060405180604001604052808281526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60010b815250925050509392505050565b60606108d884846000856108e1565b90509392505050565b606082471015610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d90611999565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161094f9190611a2a565b60006040518083038185875af1925050503d806000811461098c576040519150601f19603f3d011682016040523d82523d6000602084013e610991565b606091505b50915091506109a2878383876109ae565b92505050949350505050565b60608315610a10576000835103610a08576109c885610a23565b610a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fe90611a8d565b60405180910390fd5b5b829050610a1b565b610a1a8383610a46565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610a595781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8d9190611af1565b60405180910390fd5b604051806040016040528060608152602001600060010b81525090565b6040518060400160405280610ac6610ad3565b8152602001600081525090565b604051806040016040528060006002811115610af257610af1610d76565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4082610b15565b9050919050565b610b5081610b35565b82525050565b6000602082019050610b6b6000830184610b47565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610baa57610ba9610b85565b5b8235905067ffffffffffffffff811115610bc757610bc6610b8a565b5b602083019150836060820283011115610be357610be2610b8f565b5b9250929050565b60008083601f840112610c0057610bff610b85565b5b8235905067ffffffffffffffff811115610c1d57610c1c610b8a565b5b602083019150836040820283011115610c3957610c38610b8f565b5b9250929050565b60008083601f840112610c5657610c55610b85565b5b8235905067ffffffffffffffff811115610c7357610c72610b8a565b5b602083019150836001820283011115610c8f57610c8e610b8f565b5b9250929050565b60008060008060008060608789031215610cb357610cb2610b7b565b5b600087013567ffffffffffffffff811115610cd157610cd0610b80565b5b610cdd89828a01610b94565b9650965050602087013567ffffffffffffffff811115610d0057610cff610b80565b5b610d0c89828a01610bea565b9450945050604087013567ffffffffffffffff811115610d2f57610d2e610b80565b5b610d3b89828a01610c40565b92509250509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610db657610db5610d76565b5b50565b6000819050610dc782610da5565b919050565b6000610dd782610db9565b9050919050565b610de781610dcc565b82525050565b610df681610b35565b82525050565b604082016000820151610e126000850182610dde565b506020820151610e256020850182610ded565b50505050565b6000819050919050565b610e3e81610e2b565b82525050565b606082016000820151610e5a6000850182610dfc565b506020820151610e6d6040850182610e35565b50505050565b6000610e7f8383610e44565b60608301905092915050565b6000602082019050919050565b6000610ea382610d4a565b610ead8185610d55565b9350610eb883610d66565b8060005b83811015610ee9578151610ed08882610e73565b9750610edb83610e8b565b925050600181019050610ebc565b5085935050505092915050565b60008160010b9050919050565b610f0c81610ef6565b82525050565b60006040830160008301518482036000860152610f2f8282610e98565b9150506020830151610f446020860182610f03565b508091505092915050565b60006020820190508181036000830152610f698184610f12565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b6000610fde602383610f71565b9150610fe982610f82565b604082019050919050565b6000602082019050818103600083015261100d81610fd1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6003811061105057600080fd5b50565b60008135905061106281611043565b92915050565b60006020828403121561107e5761107d610b7b565b5b600061108c84828501611053565b91505092915050565b7f74686520696e707574206173736574206d75737420626520616e204552433230600082015250565b60006110cb602083610f71565b91506110d682611095565b602082019050919050565b600060208201905081810360008301526110fa816110be565b9050919050565b600082905092915050565b600061111b6020840184611053565b905092915050565b61112c81610b35565b811461113757600080fd5b50565b60008135905061114981611123565b92915050565b600061115e602084018461113a565b905092915050565b60408201611177600083018361110c565b6111846000850182610dde565b50611192602083018361114f565b61119f6020850182610ded565b50505050565b6111ae81610e2b565b81146111b957600080fd5b50565b6000813590506111cb816111a5565b92915050565b60006111e060208401846111bc565b905092915050565b606082016111f96000830183611101565b6112066000850182611166565b5061121460408301836111d1565b6112216040850182610e35565b50505050565b600060608201905061123c60008301846111e8565b92915050565b60006020828403121561125857611257610b7b565b5b60006112668482850161113a565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112bd82611274565b810181811067ffffffffffffffff821117156112dc576112db611285565b5b80604052505050565b60006112ef610b71565b90506112fb82826112b4565b919050565b60008151905061130f816111a5565b92915050565b60006020828403121561132b5761132a61126f565b5b61133560206112e5565b9050600061134584828501611300565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61137681611351565b811461138157600080fd5b50565b6000815190506113938161136d565b92915050565b600064ffffffffff82169050919050565b6113b381611399565b81146113be57600080fd5b50565b6000815190506113d0816113aa565b92915050565b600061ffff82169050919050565b6113ed816113d6565b81146113f857600080fd5b50565b60008151905061140a816113e4565b92915050565b60008151905061141f81611123565b92915050565b60006101e0828403121561143c5761143b61126f565b5b6114476101e06112e5565b9050600061145784828501611315565b600083015250602061146b84828501611384565b602083015250604061147f84828501611384565b604083015250606061149384828501611384565b60608301525060806114a784828501611384565b60808301525060a06114bb84828501611384565b60a08301525060c06114cf848285016113c1565b60c08301525060e06114e3848285016113fb565b60e0830152506101006114f884828501611410565b6101008301525061012061150e84828501611410565b6101208301525061014061152484828501611410565b6101408301525061016061153a84828501611410565b6101608301525061018061155084828501611384565b610180830152506101a061156684828501611384565b6101a0830152506101c061157c84828501611384565b6101c08301525092915050565b60006101e082840312156115a05761159f610b7b565b5b60006115ae84828501611425565b91505092915050565b6000602082840312156115cd576115cc610b7b565b5b60006115db84828501611300565b91505092915050565b6115ed81610e2b565b82525050565b6000819050919050565b6000819050919050565b600061162261161d611618846115f3565b6115fd565b6113d6565b9050919050565b61163281611607565b82525050565b600060808201905061164d6000830187610b47565b61165a60208301866115e4565b6116676040830185610b47565b6116746060830184611629565b95945050505050565b7f61546f6b656e2062616c616e636520646964206e6f7420696e63726561736500600082015250565b60006116b3601f83610f71565b91506116be8261167d565b602082019050919050565b600060208201905081810360008301526116e2816116a6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061172382610e2b565b915061172e83610e2b565b9250828203905081811115611746576117456116e9565b5b92915050565b60006040820190506117616000830185610b47565b61176e6020830184610b47565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006117d1603683610f71565b91506117dc82611775565b604082019050919050565b60006020820190508181036000830152611800816117c4565b9050919050565b600060408201905061181c6000830185610b47565b61182960208301846115e4565b9392505050565b60008115159050919050565b61184581611830565b811461185057600080fd5b50565b6000815190506118628161183c565b92915050565b60006020828403121561187e5761187d610b7b565b5b600061188c84828501611853565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006118f1602a83610f71565b91506118fc82611895565b604082019050919050565b60006020820190508181036000830152611920816118e4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611983602683610f71565b915061198e82611927565b604082019050919050565b600060208201905081810360008301526119b281611976565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156119ed5780820151818401526020810190506119d2565b60008484015250505050565b6000611a04826119b9565b611a0e81856119c4565b9350611a1e8185602086016119cf565b80840191505092915050565b6000611a3682846119f9565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a77601d83610f71565b9150611a8282611a41565b602082019050919050565b60006020820190508181036000830152611aa681611a6a565b9050919050565b600081519050919050565b6000611ac382611aad565b611acd8185610f71565b9350611add8185602086016119cf565b611ae681611274565b840191505092915050565b60006020820190508181036000830152611b0b8184611ab8565b90509291505056fea2646970667358221220070020dde88f461f071ddee2929a0da20f14cbf11fb4b54d2b3fc083ec2483b864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80631755ff211461002e5780632b53501314610059575b600080fd5b34801561003a57600080fd5b50610043610089565b6040516100509190610b56565b60405180910390f35b610073600480360381019061006e9190610c96565b6100ad565b6040516100809190610f4f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100b5610a96565b600187879050146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f290610ff4565b60405180910390fd5b6001600281111561010f5761010e610d76565b5b8787600081811061012357610122611014565b5b905060600201600001600001602081019061013e9190611068565b60028111156101505761014f610d76565b5b14610190576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610187906110e1565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b9878760008181106101c5576101c4611014565b5b9050606002016040516101d89190611227565b60405180910390a16000878760008181106101f6576101f5611014565b5b90506060020160000160200160208101906102119190611242565b905061027b7f00000000000000000000000000000000000000000000000000000000000000008989600081811061024b5761024a611014565b5b905060600201604001358373ffffffffffffffffffffffffffffffffffffffff1661057e9092919063ffffffff16565b60007f0000000000000000000000000000000000000000000000000000000000000000905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a758b8b60008181106102d2576102d1611014565b5b90506060020160000160200160208101906102ed9190611242565b6040518263ffffffff1660e01b81526004016103099190610b56565b6101e060405180830381865afa158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b9190611589565b90506000816101000151905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103929190610b56565b602060405180830381865afa1580156103af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d391906115b7565b90508373ffffffffffffffffffffffffffffffffffffffff1663617ba0378d8d600081811061040557610404611014565b5b90506060020160000160200160208101906104209190611242565b8e8e600081811061043457610433611014565b5b905060600201604001353060006040518563ffffffff1660e01b81526004016104609493929190611638565b600060405180830381600087803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104cd9190610b56565b602060405180830381865afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e91906115b7565b9050818111610552576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610549906116c9565b60405180910390fd5b61056c84610100015183836105679190611718565b6106cd565b96505050505050509695505050505050565b6000811480610608575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016105c592919061174c565b602060405180830381865afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060691906115b7565b145b610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e906117e7565b60405180910390fd5b6106c88363095ea7b360e01b8484604051602401610666929190611807565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506106e9565b505050565b6106d5610a96565b6106e1600184846107b0565b905092915050565b600061074b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108c99092919063ffffffff16565b90506000815111156107ab578080602001905181019061076b9190611868565b6107aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a190611907565b60405180910390fd5b5b505050565b6107b8610a96565b600060405180604001604052808660028111156107d8576107d7610d76565b5b81526020018573ffffffffffffffffffffffffffffffffffffffff1681525090506000600167ffffffffffffffff81111561081657610815611285565b5b60405190808252806020026020018201604052801561084f57816020015b61083c610ab3565b8152602001906001900390816108345790505b5090506040518060400160405280838152602001858152508160008151811061087b5761087a611014565b5b602002602001018190525060405180604001604052808281526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60010b815250925050509392505050565b60606108d884846000856108e1565b90509392505050565b606082471015610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d90611999565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161094f9190611a2a565b60006040518083038185875af1925050503d806000811461098c576040519150601f19603f3d011682016040523d82523d6000602084013e610991565b606091505b50915091506109a2878383876109ae565b92505050949350505050565b60608315610a10576000835103610a08576109c885610a23565b610a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fe90611a8d565b60405180910390fd5b5b829050610a1b565b610a1a8383610a46565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610a595781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8d9190611af1565b60405180910390fd5b604051806040016040528060608152602001600060010b81525090565b6040518060400160405280610ac6610ad3565b8152602001600081525090565b604051806040016040528060006002811115610af257610af1610d76565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4082610b15565b9050919050565b610b5081610b35565b82525050565b6000602082019050610b6b6000830184610b47565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610baa57610ba9610b85565b5b8235905067ffffffffffffffff811115610bc757610bc6610b8a565b5b602083019150836060820283011115610be357610be2610b8f565b5b9250929050565b60008083601f840112610c0057610bff610b85565b5b8235905067ffffffffffffffff811115610c1d57610c1c610b8a565b5b602083019150836040820283011115610c3957610c38610b8f565b5b9250929050565b60008083601f840112610c5657610c55610b85565b5b8235905067ffffffffffffffff811115610c7357610c72610b8a565b5b602083019150836001820283011115610c8f57610c8e610b8f565b5b9250929050565b60008060008060008060608789031215610cb357610cb2610b7b565b5b600087013567ffffffffffffffff811115610cd157610cd0610b80565b5b610cdd89828a01610b94565b9650965050602087013567ffffffffffffffff811115610d0057610cff610b80565b5b610d0c89828a01610bea565b9450945050604087013567ffffffffffffffff811115610d2f57610d2e610b80565b5b610d3b89828a01610c40565b92509250509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610db657610db5610d76565b5b50565b6000819050610dc782610da5565b919050565b6000610dd782610db9565b9050919050565b610de781610dcc565b82525050565b610df681610b35565b82525050565b604082016000820151610e126000850182610dde565b506020820151610e256020850182610ded565b50505050565b6000819050919050565b610e3e81610e2b565b82525050565b606082016000820151610e5a6000850182610dfc565b506020820151610e6d6040850182610e35565b50505050565b6000610e7f8383610e44565b60608301905092915050565b6000602082019050919050565b6000610ea382610d4a565b610ead8185610d55565b9350610eb883610d66565b8060005b83811015610ee9578151610ed08882610e73565b9750610edb83610e8b565b925050600181019050610ebc565b5085935050505092915050565b60008160010b9050919050565b610f0c81610ef6565b82525050565b60006040830160008301518482036000860152610f2f8282610e98565b9150506020830151610f446020860182610f03565b508091505092915050565b60006020820190508181036000830152610f698184610f12565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b6000610fde602383610f71565b9150610fe982610f82565b604082019050919050565b6000602082019050818103600083015261100d81610fd1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6003811061105057600080fd5b50565b60008135905061106281611043565b92915050565b60006020828403121561107e5761107d610b7b565b5b600061108c84828501611053565b91505092915050565b7f74686520696e707574206173736574206d75737420626520616e204552433230600082015250565b60006110cb602083610f71565b91506110d682611095565b602082019050919050565b600060208201905081810360008301526110fa816110be565b9050919050565b600082905092915050565b600061111b6020840184611053565b905092915050565b61112c81610b35565b811461113757600080fd5b50565b60008135905061114981611123565b92915050565b600061115e602084018461113a565b905092915050565b60408201611177600083018361110c565b6111846000850182610dde565b50611192602083018361114f565b61119f6020850182610ded565b50505050565b6111ae81610e2b565b81146111b957600080fd5b50565b6000813590506111cb816111a5565b92915050565b60006111e060208401846111bc565b905092915050565b606082016111f96000830183611101565b6112066000850182611166565b5061121460408301836111d1565b6112216040850182610e35565b50505050565b600060608201905061123c60008301846111e8565b92915050565b60006020828403121561125857611257610b7b565b5b60006112668482850161113a565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112bd82611274565b810181811067ffffffffffffffff821117156112dc576112db611285565b5b80604052505050565b60006112ef610b71565b90506112fb82826112b4565b919050565b60008151905061130f816111a5565b92915050565b60006020828403121561132b5761132a61126f565b5b61133560206112e5565b9050600061134584828501611300565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61137681611351565b811461138157600080fd5b50565b6000815190506113938161136d565b92915050565b600064ffffffffff82169050919050565b6113b381611399565b81146113be57600080fd5b50565b6000815190506113d0816113aa565b92915050565b600061ffff82169050919050565b6113ed816113d6565b81146113f857600080fd5b50565b60008151905061140a816113e4565b92915050565b60008151905061141f81611123565b92915050565b60006101e0828403121561143c5761143b61126f565b5b6114476101e06112e5565b9050600061145784828501611315565b600083015250602061146b84828501611384565b602083015250604061147f84828501611384565b604083015250606061149384828501611384565b60608301525060806114a784828501611384565b60808301525060a06114bb84828501611384565b60a08301525060c06114cf848285016113c1565b60c08301525060e06114e3848285016113fb565b60e0830152506101006114f884828501611410565b6101008301525061012061150e84828501611410565b6101208301525061014061152484828501611410565b6101408301525061016061153a84828501611410565b6101608301525061018061155084828501611384565b610180830152506101a061156684828501611384565b6101a0830152506101c061157c84828501611384565b6101c08301525092915050565b60006101e082840312156115a05761159f610b7b565b5b60006115ae84828501611425565b91505092915050565b6000602082840312156115cd576115cc610b7b565b5b60006115db84828501611300565b91505092915050565b6115ed81610e2b565b82525050565b6000819050919050565b6000819050919050565b600061162261161d611618846115f3565b6115fd565b6113d6565b9050919050565b61163281611607565b82525050565b600060808201905061164d6000830187610b47565b61165a60208301866115e4565b6116676040830185610b47565b6116746060830184611629565b95945050505050565b7f61546f6b656e2062616c616e636520646964206e6f7420696e63726561736500600082015250565b60006116b3601f83610f71565b91506116be8261167d565b602082019050919050565b600060208201905081810360008301526116e2816116a6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061172382610e2b565b915061172e83610e2b565b9250828203905081811115611746576117456116e9565b5b92915050565b60006040820190506117616000830185610b47565b61176e6020830184610b47565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006117d1603683610f71565b91506117dc82611775565b604082019050919050565b60006020820190508181036000830152611800816117c4565b9050919050565b600060408201905061181c6000830185610b47565b61182960208301846115e4565b9392505050565b60008115159050919050565b61184581611830565b811461185057600080fd5b50565b6000815190506118628161183c565b92915050565b60006020828403121561187e5761187d610b7b565b5b600061188c84828501611853565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006118f1602a83610f71565b91506118fc82611895565b604082019050919050565b60006020820190508181036000830152611920816118e4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611983602683610f71565b915061198e82611927565b604082019050919050565b600060208201905081810360008301526119b281611976565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156119ed5780820151818401526020810190506119d2565b60008484015250505050565b6000611a04826119b9565b611a0e81856119c4565b9350611a1e8185602086016119cf565b80840191505092915050565b6000611a3682846119f9565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a77601d83610f71565b9150611a8282611a41565b602082019050919050565b60006020820190508181036000830152611aa681611a6a565b9050919050565b600081519050919050565b6000611ac382611aad565b611acd8185610f71565b9350611add8185602086016119cf565b611ae681611274565b840191505092915050565b60006020820190508181036000830152611b0b8184611ab8565b90509291505056fea2646970667358221220070020dde88f461f071ddee2929a0da20f14cbf11fb4b54d2b3fc083ec2483b864736f6c63430008120033",
  "devdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "params": {
          "inputAssetAmount": "the asset and amout being supplied to Aave."
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "notice": "This event is emitted when an Aave 'supply' action is executed."
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}