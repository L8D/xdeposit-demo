{
  "address": "0x6D712CB50297b97b79dE784d10F487C00d7f8c2C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aavePoolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount",
          "name": "inputAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "AaveSupplyActionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "assetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e4f6b39d76d85c2b7ee81f626275207ce8957d0a9cbda994ffc6d3a75270511",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x6D712CB50297b97b79dE784d10F487C00d7f8c2C",
    "transactionIndex": 0,
    "gasUsed": "1762806",
    "logsBloom": "0x
    "blockHash": "0x97caf68e371da107fb51e0594d66cb06e69912edc3971561fc37441ae1b6f0c0",
    "transactionHash": "0x8e4f6b39d76d85c2b7ee81f626275207ce8957d0a9cbda994ffc6d3a75270511",
    "logs": [],
    "blockNumber": 16889331,
    "cumulativeGasUsed": "1762806",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2"
  ],
  "numDeployments": 1,
  "solcInputHash": "95e69282f9bd955036d237f67db53de4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aavePoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount\",\"name\":\"inputAssetAmount\",\"type\":\"tuple\"}],\"name\":\"AaveSupplyActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"assetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"params\":{\"inputAssetAmount\":\"the asset and amout being supplied to Aave.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"notice\":\"This event is emitted when an Aave 'supply' action is executed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveSupplyAction.sol\":\"AaveSupplyAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nlibrary LibActionHelpers {\\n  function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    Asset memory asset = Asset(assetType, assetAddress);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n    ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n    return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2, -1);\\n  }\\n\\n  function singleTokenResult(address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n  }\\n\\n  function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.Native, address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x3017f42ec45c2ee13e81220ac9833f47456f6ee9002fbefd9fdb12055ad7e863\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LibErc20 {\\n    using Address for address;\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // forked from openzeppelin but removed the require, just keeping optional return\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57f8763cdc6339c5b248a4226b8392e36fdec46ad8b84aba2326f6ac1025b06\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x2cfe6c734d98383e76c5f7ae9cf3f6e0eeef790bb4bb3b6049589eae6ed1dd64\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/AaveSupplyAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\nimport '@freemarket/step-sdk/contracts/LibActionHelpers.sol';\\nimport './IAaveV3Pool.sol';\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\\nimport '@freemarket/step-sdk/contracts/LibErc20.sol';\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing LibErc20 for IERC20;\\n\\n// import {IPool} from '@aave/core-v3/contracts/interfaces/IPool.sol';\\n// import {DataTypes} from '@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol';\\n\\ncontract AaveSupplyAction is IWorkflowStep {\\n  address public immutable poolAddress;\\n\\n  /// @notice This event is emitted when an Aave 'supply' action is executed.\\n  /// @param inputAssetAmount the asset and amout being supplied to Aave.\\n  event AaveSupplyActionEvent(AssetAmount inputAssetAmount);\\n\\n  constructor(address _aavePoolAddress) {\\n    poolAddress = _aavePoolAddress;\\n  }\\n\\n  struct Locals {\\n    IERC20 inputToken;\\n    IAaveV3Pool pool;\\n    IERC20 aToken;\\n    uint256 aTokenBalanceBefore;\\n    uint256 aTokenBalanceAfter;\\n    ReserveData reserveData;\\n  }\\n\\n  function execute(AssetAmount[] calldata assetAmounts, bytes calldata) public payable returns (WorkflowStepResult memory) {\\n    // validate\\n    require(assetAmounts.length == 1, 'there must be exactly 1 input asset');\\n    require(assetAmounts[0].asset.assetType == AssetType.ERC20, 'the input asset must be an ERC20');\\n    // require(outputAssets.length == 1, 'there must be exactly 1 output asset when keeping the aToken in the engine');\\n\\n    emit AaveSupplyActionEvent(assetAmounts[0]);\\n    Locals memory locals;\\n\\n    // approve aave to take the asset\\n    locals.inputToken = IERC20(assetAmounts[0].asset.assetAddress);\\n    locals.inputToken.safeApprove(poolAddress, assetAmounts[0].amount);\\n\\n    // get the aToken\\n    locals.pool = IAaveV3Pool(poolAddress);\\n    locals.reserveData = locals.pool.getReserveData(assetAmounts[0].asset.assetAddress);\\n    locals.aToken = IERC20(locals.reserveData.aTokenAddress);\\n\\n    // take note of the before balance\\n    locals.aTokenBalanceBefore = locals.aToken.balanceOf(address(this));\\n\\n    // invoke supply\\n    locals.pool.supply(assetAmounts[0].asset.assetAddress, assetAmounts[0].amount, address(this), 0);\\n\\n    locals.aTokenBalanceAfter = locals.aToken.balanceOf(address(this));\\n    require(locals.aTokenBalanceAfter > locals.aTokenBalanceBefore, 'aToken balance did not increase');\\n\\n    return\\n      LibStepResultBuilder\\n        .create(1, 1)\\n        .addInputAssetAmount(assetAmounts[0])\\n        .addOutputToken(locals.reserveData.aTokenAddress, locals.aTokenBalanceAfter - locals.aTokenBalanceBefore)\\n        .result;\\n  }\\n}\\n\",\"keccak256\":\"0x2b384788258e277e6d7b07b79f89b0c57a1e2327a45c915c1e70ea88e51a1528\",\"license\":\"MIT\"},\"contracts/IAaveV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct ReserveConfigurationMap {\\n  //bit 0-15: LTV\\n  //bit 16-31: Liq. threshold\\n  //bit 32-47: Liq. bonus\\n  //bit 48-55: Decimals\\n  //bit 56: reserve is active\\n  //bit 57: reserve is frozen\\n  //bit 58: borrowing is enabled\\n  //bit 59: stable rate borrowing enabled\\n  //bit 60: asset is paused\\n  //bit 61: borrowing in isolation mode is enabled\\n  //bit 62-63: reserved\\n  //bit 64-79: reserve factor\\n  //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n  //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n  //bit 152-167 liquidation protocol fee\\n  //bit 168-175 eMode category\\n  //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n  //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n  //bit 252-255 unused\\n\\n  uint256 data;\\n}\\n\\nstruct ReserveData {\\n  //stores the reserve configuration\\n  ReserveConfigurationMap configuration;\\n  //the liquidity index. Expressed in ray\\n  uint128 liquidityIndex;\\n  //the current supply rate. Expressed in ray\\n  uint128 currentLiquidityRate;\\n  //variable borrow index. Expressed in ray\\n  uint128 variableBorrowIndex;\\n  //the current variable borrow rate. Expressed in ray\\n  uint128 currentVariableBorrowRate;\\n  //the current stable borrow rate. Expressed in ray\\n  uint128 currentStableBorrowRate;\\n  //timestamp of last update\\n  uint40 lastUpdateTimestamp;\\n  //the id of the reserve. Represents the position in the list of the active reserves\\n  uint16 id;\\n  //aToken address\\n  address aTokenAddress;\\n  //stableDebtToken address\\n  address stableDebtTokenAddress;\\n  //variableDebtToken address\\n  address variableDebtTokenAddress;\\n  //address of the interest rate strategy\\n  address interestRateStrategyAddress;\\n  //the current treasury balance, scaled\\n  uint128 accruedToTreasury;\\n  //the outstanding unbacked aTokens minted through the bridging feature\\n  uint128 unbacked;\\n  //the outstanding debt borrowed against this asset in isolation mode\\n  uint128 isolationModeTotalDebt;\\n}\\n\\n/**\\n * @title IAaveV3Pool\\n * @author FreeMarketProtocol\\n * @notice This is a _partial_ interface with only the supply method used by AaveSupplyAction.\\n */\\ninterface IAaveV3Pool {\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (ReserveData memory);\\n}\\n\",\"keccak256\":\"0xf0ef438e4c74f3f2e3a68dba30e6c161ca149ba804abb7b25a71ad2d8e809feb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200202b3803806200202b8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051611ef46200013760003960008181608b0152818161025301526102bc0152611ef46000f3fe6080604052600436106100295760003560e01c80631755ff211461002e5780637bb26ca714610059575b600080fd5b34801561003a57600080fd5b50610043610089565b6040516100509190610ee7565b60405180910390f35b610073600480360381019061006e9190610fd1565b6100ad565b60405161008091906112a0565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100b5610bef565b600185859050146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f290611345565b60405180910390fd5b6001600281111561010f5761010e61107e565b5b8585600081811061012357610122611365565b5b905060600201600001600001602081019061013e91906113b9565b60028111156101505761014f61107e565b5b14610190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018790611432565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b9858560008181106101c5576101c4611365565b5b9050606002016040516101d89190611578565b60405180910390a16101e8610c1d565b858560008181106101fc576101fb611365565b5b90506060020160000160200160208101906102179190611593565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102ba7f00000000000000000000000000000000000000000000000000000000000000008787600081811061028657610285611365565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff166106a69092919063ffffffff16565b7f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806020015173ffffffffffffffffffffffffffffffffffffffff166335ea6a758787600081811061034657610345611365565b5b90506060020160000160200160208101906103619190611593565b6040518263ffffffff1660e01b815260040161037d9190610ee7565b6101e060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf91906118da565b8160a001819052508060a001516101000151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104459190610ee7565b602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190611908565b816060018181525050806020015173ffffffffffffffffffffffffffffffffffffffff1663617ba037878760008181106104c3576104c2611365565b5b90506060020160000160200160208101906104de9190611593565b888860008181106104f2576104f1611365565b5b905060600201604001353060006040518563ffffffff1660e01b815260040161051e9493929190611989565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50505050806040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161058d9190610ee7565b602060405180830381865afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190611908565b8160800181815250508060600151816080015111610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890611a1a565b60405180910390fd5b6106978160a001516101000151826060015183608001516106429190611a69565b6106888989600081811061065957610658611365565b5b90506060020180360381019061066f9190611b3d565b61067a60018061072c565b61087190919063ffffffff16565b6108bd9092919063ffffffff16565b60400151915050949350505050565b6107278363095ea7b360e01b84846040516024016106c5929190611b6a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061095b565b505050565b610734610c9b565b60008367ffffffffffffffff8111156107505761074f6115d6565b5b60405190808252806020026020018201604052801561078957816020015b610776610cc2565b81526020019060019003908161076e5790505b50905060008367ffffffffffffffff8111156107a8576107a76115d6565b5b6040519080825280602002602001820160405280156107e157816020015b6107ce610cc2565b8152602001906001900390816107c65790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610879610c9b565b8183604001516000015184600001805180919061089590611b93565b815250815181106108a9576108a8611365565b5b602002602001018190525082905092915050565b6108c5610c9b565b60405180604001604052806040518060400160405280600160028111156108ef576108ee61107e565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061093290611b93565b8152508151811061094657610945611365565b5b60200260200101819052508390509392505050565b60006109bd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a229092919063ffffffff16565b9050600081511115610a1d57808060200190518101906109dd9190611c13565b610a1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1390611cb2565b60405180910390fd5b5b505050565b6060610a318484600085610a3a565b90509392505050565b606082471015610a7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7690611d44565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610aa89190611dd5565b60006040518083038185875af1925050503d8060008114610ae5576040519150601f19603f3d011682016040523d82523d6000602084013e610aea565b606091505b5091509150610afb87838387610b07565b92505050949350505050565b60608315610b69576000835103610b6157610b2185610b7c565b610b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5790611e38565b60405180910390fd5b5b829050610b74565b610b738383610b9f565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610bb25781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be69190611e9c565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001610c95610ce2565b81525090565b60405180606001604052806000815260200160008152602001610cbc610bef565b81525090565b6040518060400160405280610cd5610e51565b8152602001600081525090565b604051806101e00160405280610cf6610e93565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806040016040528060006002811115610e7057610e6f61107e565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed182610ea6565b9050919050565b610ee181610ec6565b82525050565b6000602082019050610efc6000830184610ed8565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610f3b57610f3a610f16565b5b8235905067ffffffffffffffff811115610f5857610f57610f1b565b5b602083019150836060820283011115610f7457610f73610f20565b5b9250929050565b60008083601f840112610f9157610f90610f16565b5b8235905067ffffffffffffffff811115610fae57610fad610f1b565b5b602083019150836001820283011115610fca57610fc9610f20565b5b9250929050565b60008060008060408587031215610feb57610fea610f0c565b5b600085013567ffffffffffffffff81111561100957611008610f11565b5b61101587828801610f25565b9450945050602085013567ffffffffffffffff81111561103857611037610f11565b5b61104487828801610f7b565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106110be576110bd61107e565b5b50565b60008190506110cf826110ad565b919050565b60006110df826110c1565b9050919050565b6110ef816110d4565b82525050565b6110fe81610ec6565b82525050565b60408201600082015161111a60008501826110e6565b50602082015161112d60208501826110f5565b50505050565b6000819050919050565b61114681611133565b82525050565b6060820160008201516111626000850182611104565b506020820151611175604085018261113d565b50505050565b6000611187838361114c565b60608301905092915050565b6000602082019050919050565b60006111ab82611052565b6111b5818561105d565b93506111c08361106e565b8060005b838110156111f15781516111d8888261117b565b97506111e383611193565b9250506001810190506111c4565b5085935050505092915050565b60008160010b9050919050565b611214816111fe565b82525050565b60008160020b9050919050565b6112308161121a565b82525050565b6000608083016000830151848203600086015261125382826111a0565b9150506020830151848203602086015261126d82826111a0565b9150506040830151611282604086018261120b565b5060608301516112956060860182611227565b508091505092915050565b600060208201905081810360008301526112ba8184611236565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b600061132f6023836112c2565b915061133a826112d3565b604082019050919050565b6000602082019050818103600083015261135e81611322565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600381106113a157600080fd5b50565b6000813590506113b381611394565b92915050565b6000602082840312156113cf576113ce610f0c565b5b60006113dd848285016113a4565b91505092915050565b7f74686520696e707574206173736574206d75737420626520616e204552433230600082015250565b600061141c6020836112c2565b9150611427826113e6565b602082019050919050565b6000602082019050818103600083015261144b8161140f565b9050919050565b600082905092915050565b600061146c60208401846113a4565b905092915050565b61147d81610ec6565b811461148857600080fd5b50565b60008135905061149a81611474565b92915050565b60006114af602084018461148b565b905092915050565b604082016114c8600083018361145d565b6114d560008501826110e6565b506114e360208301836114a0565b6114f060208501826110f5565b50505050565b6114ff81611133565b811461150a57600080fd5b50565b60008135905061151c816114f6565b92915050565b6000611531602084018461150d565b905092915050565b6060820161154a6000830183611452565b61155760008501826114b7565b506115656040830183611522565b611572604085018261113d565b50505050565b600060608201905061158d6000830184611539565b92915050565b6000602082840312156115a9576115a8610f0c565b5b60006115b78482850161148b565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61160e826115c5565b810181811067ffffffffffffffff8211171561162d5761162c6115d6565b5b80604052505050565b6000611640610f02565b905061164c8282611605565b919050565b600081519050611660816114f6565b92915050565b60006020828403121561167c5761167b6115c0565b5b6116866020611636565b9050600061169684828501611651565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6116c7816116a2565b81146116d257600080fd5b50565b6000815190506116e4816116be565b92915050565b600064ffffffffff82169050919050565b611704816116ea565b811461170f57600080fd5b50565b600081519050611721816116fb565b92915050565b600061ffff82169050919050565b61173e81611727565b811461174957600080fd5b50565b60008151905061175b81611735565b92915050565b60008151905061177081611474565b92915050565b60006101e0828403121561178d5761178c6115c0565b5b6117986101e0611636565b905060006117a884828501611666565b60008301525060206117bc848285016116d5565b60208301525060406117d0848285016116d5565b60408301525060606117e4848285016116d5565b60608301525060806117f8848285016116d5565b60808301525060a061180c848285016116d5565b60a08301525060c061182084828501611712565b60c08301525060e06118348482850161174c565b60e08301525061010061184984828501611761565b6101008301525061012061185f84828501611761565b6101208301525061014061187584828501611761565b6101408301525061016061188b84828501611761565b610160830152506101806118a1848285016116d5565b610180830152506101a06118b7848285016116d5565b6101a0830152506101c06118cd848285016116d5565b6101c08301525092915050565b60006101e082840312156118f1576118f0610f0c565b5b60006118ff84828501611776565b91505092915050565b60006020828403121561191e5761191d610f0c565b5b600061192c84828501611651565b91505092915050565b61193e81611133565b82525050565b6000819050919050565b6000819050919050565b600061197361196e61196984611944565b61194e565b611727565b9050919050565b61198381611958565b82525050565b600060808201905061199e6000830187610ed8565b6119ab6020830186611935565b6119b86040830185610ed8565b6119c5606083018461197a565b95945050505050565b7f61546f6b656e2062616c616e636520646964206e6f7420696e63726561736500600082015250565b6000611a04601f836112c2565b9150611a0f826119ce565b602082019050919050565b60006020820190508181036000830152611a33816119f7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a7482611133565b9150611a7f83611133565b9250828203905081811115611a9757611a96611a3a565b5b92915050565b600060408284031215611ab357611ab26115c0565b5b611abd6040611636565b90506000611acd848285016113a4565b6000830152506020611ae18482850161148b565b60208301525092915050565b600060608284031215611b0357611b026115c0565b5b611b0d6040611636565b90506000611b1d84828501611a9d565b6000830152506040611b318482850161150d565b60208301525092915050565b600060608284031215611b5357611b52610f0c565b5b6000611b6184828501611aed565b91505092915050565b6000604082019050611b7f6000830185610ed8565b611b8c6020830184611935565b9392505050565b6000611b9e82611133565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bd057611bcf611a3a565b5b600182019050919050565b60008115159050919050565b611bf081611bdb565b8114611bfb57600080fd5b50565b600081519050611c0d81611be7565b92915050565b600060208284031215611c2957611c28610f0c565b5b6000611c3784828501611bfe565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c9c602a836112c2565b9150611ca782611c40565b604082019050919050565b60006020820190508181036000830152611ccb81611c8f565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611d2e6026836112c2565b9150611d3982611cd2565b604082019050919050565b60006020820190508181036000830152611d5d81611d21565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611d98578082015181840152602081019050611d7d565b60008484015250505050565b6000611daf82611d64565b611db98185611d6f565b9350611dc9818560208601611d7a565b80840191505092915050565b6000611de18284611da4565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611e22601d836112c2565b9150611e2d82611dec565b602082019050919050565b60006020820190508181036000830152611e5181611e15565b9050919050565b600081519050919050565b6000611e6e82611e58565b611e7881856112c2565b9350611e88818560208601611d7a565b611e91816115c5565b840191505092915050565b60006020820190508181036000830152611eb68184611e63565b90509291505056fea26469706673582212200bee6ea849db78945a9746eaadacef5f1224662379fdad00a18e572d10452c8764736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80631755ff211461002e5780637bb26ca714610059575b600080fd5b34801561003a57600080fd5b50610043610089565b6040516100509190610ee7565b60405180910390f35b610073600480360381019061006e9190610fd1565b6100ad565b60405161008091906112a0565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100b5610bef565b600185859050146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f290611345565b60405180910390fd5b6001600281111561010f5761010e61107e565b5b8585600081811061012357610122611365565b5b905060600201600001600001602081019061013e91906113b9565b60028111156101505761014f61107e565b5b14610190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018790611432565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b9858560008181106101c5576101c4611365565b5b9050606002016040516101d89190611578565b60405180910390a16101e8610c1d565b858560008181106101fc576101fb611365565b5b90506060020160000160200160208101906102179190611593565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102ba7f00000000000000000000000000000000000000000000000000000000000000008787600081811061028657610285611365565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff166106a69092919063ffffffff16565b7f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806020015173ffffffffffffffffffffffffffffffffffffffff166335ea6a758787600081811061034657610345611365565b5b90506060020160000160200160208101906103619190611593565b6040518263ffffffff1660e01b815260040161037d9190610ee7565b6101e060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf91906118da565b8160a001819052508060a001516101000151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104459190610ee7565b602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190611908565b816060018181525050806020015173ffffffffffffffffffffffffffffffffffffffff1663617ba037878760008181106104c3576104c2611365565b5b90506060020160000160200160208101906104de9190611593565b888860008181106104f2576104f1611365565b5b905060600201604001353060006040518563ffffffff1660e01b815260040161051e9493929190611989565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50505050806040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161058d9190610ee7565b602060405180830381865afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce9190611908565b8160800181815250508060600151816080015111610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890611a1a565b60405180910390fd5b6106978160a001516101000151826060015183608001516106429190611a69565b6106888989600081811061065957610658611365565b5b90506060020180360381019061066f9190611b3d565b61067a60018061072c565b61087190919063ffffffff16565b6108bd9092919063ffffffff16565b60400151915050949350505050565b6107278363095ea7b360e01b84846040516024016106c5929190611b6a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061095b565b505050565b610734610c9b565b60008367ffffffffffffffff8111156107505761074f6115d6565b5b60405190808252806020026020018201604052801561078957816020015b610776610cc2565b81526020019060019003908161076e5790505b50905060008367ffffffffffffffff8111156107a8576107a76115d6565b5b6040519080825280602002602001820160405280156107e157816020015b6107ce610cc2565b8152602001906001900390816107c65790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610879610c9b565b8183604001516000015184600001805180919061089590611b93565b815250815181106108a9576108a8611365565b5b602002602001018190525082905092915050565b6108c5610c9b565b60405180604001604052806040518060400160405280600160028111156108ef576108ee61107e565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061093290611b93565b8152508151811061094657610945611365565b5b60200260200101819052508390509392505050565b60006109bd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a229092919063ffffffff16565b9050600081511115610a1d57808060200190518101906109dd9190611c13565b610a1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1390611cb2565b60405180910390fd5b5b505050565b6060610a318484600085610a3a565b90509392505050565b606082471015610a7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7690611d44565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610aa89190611dd5565b60006040518083038185875af1925050503d8060008114610ae5576040519150601f19603f3d011682016040523d82523d6000602084013e610aea565b606091505b5091509150610afb87838387610b07565b92505050949350505050565b60608315610b69576000835103610b6157610b2185610b7c565b610b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5790611e38565b60405180910390fd5b5b829050610b74565b610b738383610b9f565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610bb25781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be69190611e9c565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001610c95610ce2565b81525090565b60405180606001604052806000815260200160008152602001610cbc610bef565b81525090565b6040518060400160405280610cd5610e51565b8152602001600081525090565b604051806101e00160405280610cf6610e93565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806040016040528060006002811115610e7057610e6f61107e565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed182610ea6565b9050919050565b610ee181610ec6565b82525050565b6000602082019050610efc6000830184610ed8565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610f3b57610f3a610f16565b5b8235905067ffffffffffffffff811115610f5857610f57610f1b565b5b602083019150836060820283011115610f7457610f73610f20565b5b9250929050565b60008083601f840112610f9157610f90610f16565b5b8235905067ffffffffffffffff811115610fae57610fad610f1b565b5b602083019150836001820283011115610fca57610fc9610f20565b5b9250929050565b60008060008060408587031215610feb57610fea610f0c565b5b600085013567ffffffffffffffff81111561100957611008610f11565b5b61101587828801610f25565b9450945050602085013567ffffffffffffffff81111561103857611037610f11565b5b61104487828801610f7b565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106110be576110bd61107e565b5b50565b60008190506110cf826110ad565b919050565b60006110df826110c1565b9050919050565b6110ef816110d4565b82525050565b6110fe81610ec6565b82525050565b60408201600082015161111a60008501826110e6565b50602082015161112d60208501826110f5565b50505050565b6000819050919050565b61114681611133565b82525050565b6060820160008201516111626000850182611104565b506020820151611175604085018261113d565b50505050565b6000611187838361114c565b60608301905092915050565b6000602082019050919050565b60006111ab82611052565b6111b5818561105d565b93506111c08361106e565b8060005b838110156111f15781516111d8888261117b565b97506111e383611193565b9250506001810190506111c4565b5085935050505092915050565b60008160010b9050919050565b611214816111fe565b82525050565b60008160020b9050919050565b6112308161121a565b82525050565b6000608083016000830151848203600086015261125382826111a0565b9150506020830151848203602086015261126d82826111a0565b9150506040830151611282604086018261120b565b5060608301516112956060860182611227565b508091505092915050565b600060208201905081810360008301526112ba8184611236565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b600061132f6023836112c2565b915061133a826112d3565b604082019050919050565b6000602082019050818103600083015261135e81611322565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600381106113a157600080fd5b50565b6000813590506113b381611394565b92915050565b6000602082840312156113cf576113ce610f0c565b5b60006113dd848285016113a4565b91505092915050565b7f74686520696e707574206173736574206d75737420626520616e204552433230600082015250565b600061141c6020836112c2565b9150611427826113e6565b602082019050919050565b6000602082019050818103600083015261144b8161140f565b9050919050565b600082905092915050565b600061146c60208401846113a4565b905092915050565b61147d81610ec6565b811461148857600080fd5b50565b60008135905061149a81611474565b92915050565b60006114af602084018461148b565b905092915050565b604082016114c8600083018361145d565b6114d560008501826110e6565b506114e360208301836114a0565b6114f060208501826110f5565b50505050565b6114ff81611133565b811461150a57600080fd5b50565b60008135905061151c816114f6565b92915050565b6000611531602084018461150d565b905092915050565b6060820161154a6000830183611452565b61155760008501826114b7565b506115656040830183611522565b611572604085018261113d565b50505050565b600060608201905061158d6000830184611539565b92915050565b6000602082840312156115a9576115a8610f0c565b5b60006115b78482850161148b565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61160e826115c5565b810181811067ffffffffffffffff8211171561162d5761162c6115d6565b5b80604052505050565b6000611640610f02565b905061164c8282611605565b919050565b600081519050611660816114f6565b92915050565b60006020828403121561167c5761167b6115c0565b5b6116866020611636565b9050600061169684828501611651565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6116c7816116a2565b81146116d257600080fd5b50565b6000815190506116e4816116be565b92915050565b600064ffffffffff82169050919050565b611704816116ea565b811461170f57600080fd5b50565b600081519050611721816116fb565b92915050565b600061ffff82169050919050565b61173e81611727565b811461174957600080fd5b50565b60008151905061175b81611735565b92915050565b60008151905061177081611474565b92915050565b60006101e0828403121561178d5761178c6115c0565b5b6117986101e0611636565b905060006117a884828501611666565b60008301525060206117bc848285016116d5565b60208301525060406117d0848285016116d5565b60408301525060606117e4848285016116d5565b60608301525060806117f8848285016116d5565b60808301525060a061180c848285016116d5565b60a08301525060c061182084828501611712565b60c08301525060e06118348482850161174c565b60e08301525061010061184984828501611761565b6101008301525061012061185f84828501611761565b6101208301525061014061187584828501611761565b6101408301525061016061188b84828501611761565b610160830152506101806118a1848285016116d5565b610180830152506101a06118b7848285016116d5565b6101a0830152506101c06118cd848285016116d5565b6101c08301525092915050565b60006101e082840312156118f1576118f0610f0c565b5b60006118ff84828501611776565b91505092915050565b60006020828403121561191e5761191d610f0c565b5b600061192c84828501611651565b91505092915050565b61193e81611133565b82525050565b6000819050919050565b6000819050919050565b600061197361196e61196984611944565b61194e565b611727565b9050919050565b61198381611958565b82525050565b600060808201905061199e6000830187610ed8565b6119ab6020830186611935565b6119b86040830185610ed8565b6119c5606083018461197a565b95945050505050565b7f61546f6b656e2062616c616e636520646964206e6f7420696e63726561736500600082015250565b6000611a04601f836112c2565b9150611a0f826119ce565b602082019050919050565b60006020820190508181036000830152611a33816119f7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a7482611133565b9150611a7f83611133565b9250828203905081811115611a9757611a96611a3a565b5b92915050565b600060408284031215611ab357611ab26115c0565b5b611abd6040611636565b90506000611acd848285016113a4565b6000830152506020611ae18482850161148b565b60208301525092915050565b600060608284031215611b0357611b026115c0565b5b611b0d6040611636565b90506000611b1d84828501611a9d565b6000830152506040611b318482850161150d565b60208301525092915050565b600060608284031215611b5357611b52610f0c565b5b6000611b6184828501611aed565b91505092915050565b6000604082019050611b7f6000830185610ed8565b611b8c6020830184611935565b9392505050565b6000611b9e82611133565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bd057611bcf611a3a565b5b600182019050919050565b60008115159050919050565b611bf081611bdb565b8114611bfb57600080fd5b50565b600081519050611c0d81611be7565b92915050565b600060208284031215611c2957611c28610f0c565b5b6000611c3784828501611bfe565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c9c602a836112c2565b9150611ca782611c40565b604082019050919050565b60006020820190508181036000830152611ccb81611c8f565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611d2e6026836112c2565b9150611d3982611cd2565b604082019050919050565b60006020820190508181036000830152611d5d81611d21565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611d98578082015181840152602081019050611d7d565b60008484015250505050565b6000611daf82611d64565b611db98185611d6f565b9350611dc9818560208601611d7a565b80840191505092915050565b6000611de18284611da4565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611e22601d836112c2565b9150611e2d82611dec565b602082019050919050565b60006020820190508181036000830152611e5181611e15565b9050919050565b600081519050919050565b6000611e6e82611e58565b611e7881856112c2565b9350611e88818560208601611d7a565b611e91816115c5565b840191505092915050565b60006020820190508181036000830152611eb68184611e63565b90509291505056fea26469706673582212200bee6ea849db78945a9746eaadacef5f1224662379fdad00a18e572d10452c8764736f6c63430008120033",
  "devdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "params": {
          "inputAssetAmount": "the asset and amout being supplied to Aave."
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "notice": "This event is emitted when an Aave 'supply' action is executed."
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}