{
  "address": "0x5a739c392778691Bf1a88a978AA1F8e6285b75A5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aavePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount",
          "name": "inputAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "AaveSupplyActionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "assetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmountsToCaller",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x825e2a60bf3edb9c138ab0dd1a50d5df5f1cc49593563e751f9ce82d9693fb85",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x5a739c392778691Bf1a88a978AA1F8e6285b75A5",
    "transactionIndex": 9,
    "gasUsed": "1708747",
    "logsBloom": "0x
    "blockHash": "0xebe9593fedff2091dc5df0c7afba8044ce1ebf558616ff5c31a7d1f4fd0ce21d",
    "transactionHash": "0x825e2a60bf3edb9c138ab0dd1a50d5df5f1cc49593563e751f9ce82d9693fb85",
    "logs": [],
    "blockNumber": 108169350,
    "cumulativeGasUsed": "2853501",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x794a61358D6845594F94dc1DB02A252b5b4814aD",
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 3,
  "solcInputHash": "620875ff7dee368f090e397d342df7c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aavePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount\",\"name\":\"inputAssetAmount\",\"type\":\"tuple\"}],\"name\":\"AaveSupplyActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"assetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmountsToCaller\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"params\":{\"inputAssetAmount\":\"the asset and amout being supplied to Aave.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"notice\":\"This event is emitted when an Aave 'supply' action is executed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveSupplyAction.sol\":\"AaveSupplyAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './model/Asset.sol';\\nimport './model/AssetAmount.sol';\\nimport './model/WorkflowStepResult.sol';\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n  /// @notice called by WorkflowRunner to execute a workflow step.\\n  /// @param assetAmounts AssetAmounts to be used by the step\\n  /// @param argData Step specific arguments in ABI encoding\\n  /// @param userAddress the address of the user\\n  /// @return the outcome of the step invocation\\n  function execute(\\n    AssetAmount[] calldata assetAmounts,\\n    bytes calldata argData,\\n    address userAddress\\n  ) external payable returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0x637a266321d30aeaf12f0582f4ac7c70197aeb3fb4096699eabd23e447b930b5\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmountsToCaller;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in absolute currency units)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0x0cc72223efa79934b173495c5452dfc6095d2f95cdd4d93c3d0c25cda0893b62\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/IWeth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IWeth {\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xe00c4f29d37fcfa230bcd8a33dab24923b4da32bf943e6e33741c9d8ececc938\",\"license\":\"UNLICENSED\"},\"@freemarket/step-sdk/contracts/LibErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LibErc20 {\\n    using Address for address;\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // forked from openzeppelin but removed the require, just keeping optional return\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57f8763cdc6339c5b248a4226b8392e36fdec46ad8b84aba2326f6ac1025b06\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  uint256 outputToCallerIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    AssetAmount[] memory ouputAssetAmountsToCaller = new AssetAmount[](0);\\n\\n    return StepResultBuilder(0, 0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, ouputAssetAmountsToCaller, -2, -1));\\n  }\\n\\n  function create(\\n    uint256 inputAssetCount,\\n    uint256 outputAssetCount,\\n    uint256 outputAssetToCallerCount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    AssetAmount[] memory ouputAssetToCallerAmounts = new AssetAmount[](outputAssetToCallerCount);\\n\\n    return StepResultBuilder(0, 0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, ouputAssetToCallerAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmountToCaller(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmountsToCaller[builder.outputToCallerIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x54128c41d82f7a3bca199a750d01456c0190d87a384913f777d49df297776d39\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibWethUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport './IWeth.sol';\\n\\nlibrary LibWethUtils {\\n  function wrapIfNecessary(AssetAmount memory assetAmount, address wethAddress) internal returns (address) {\\n    if (assetAmount.asset.assetType == AssetType.Native) {\\n      require(wethAddress != address(0), 'weth not supported on this chain');\\n      IWeth(wethAddress).deposit{value: assetAmount.amount}();\\n      return wethAddress;\\n    }\\n    return assetAmount.asset.assetAddress;\\n  }\\n}\\n\",\"keccak256\":\"0x0ba11ae39845c71566504ace7b0c1425562457380c83c061d99d8a74693f87b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/AaveSupplyAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\nimport './IAaveV3Pool.sol';\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\\nimport '@freemarket/step-sdk/contracts/LibErc20.sol';\\nimport '@freemarket/step-sdk/contracts/LibWethUtils.sol';\\n\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing LibErc20 for IERC20;\\n\\ncontract AaveSupplyAction is IWorkflowStep {\\n  address public immutable poolAddress;\\n  address public immutable wethAddress;\\n\\n  /// @notice This event is emitted when an Aave 'supply' action is executed.\\n  /// @param inputAssetAmount the asset and amout being supplied to Aave.\\n  event AaveSupplyActionEvent(AssetAmount inputAssetAmount);\\n\\n  constructor(address _aavePoolAddress, address _wethAddress) {\\n    poolAddress = _aavePoolAddress;\\n    wethAddress = _wethAddress;\\n  }\\n\\n  struct Locals {\\n    IERC20 inputToken;\\n    address inputTokenAddress;\\n    IAaveV3Pool pool;\\n    IERC20 aToken;\\n    uint256 aTokenBalanceBefore;\\n    uint256 aTokenBalanceAfter;\\n    ReserveData reserveData;\\n  }\\n\\n  function execute(\\n    AssetAmount[] calldata assetAmounts,\\n    bytes calldata,\\n    address userAddress\\n  ) public payable returns (WorkflowStepResult memory) {\\n\\n    // validate\\n    require(assetAmounts.length == 1, 'there must be exactly 1 input asset');\\n\\n    emit AaveSupplyActionEvent(assetAmounts[0]);\\n    Locals memory locals;\\n\\n\\n\\n    locals.inputTokenAddress = LibWethUtils.wrapIfNecessary(assetAmounts[0], wethAddress);\\n\\n\\n    // approve aave to take the asset\\n    locals.inputToken = IERC20(locals.inputTokenAddress);\\n\\n\\n\\n    locals.inputToken.safeApprove(poolAddress, assetAmounts[0].amount);\\n\\n    // get the aToken\\n    locals.pool = IAaveV3Pool(poolAddress);\\n    locals.reserveData = locals.pool.getReserveData(locals.inputTokenAddress);\\n\\n    // invoke supply\\n\\n    locals.pool.supply(locals.inputTokenAddress, assetAmounts[0].amount, userAddress, 0);\\n\\n    return\\n      LibStepResultBuilder\\n        .create(1, 0, 1)\\n        .addInputAssetAmount(assetAmounts[0])\\n        .addOutputAssetAmountToCaller(AssetAmount(Asset(AssetType.ERC20, locals.reserveData.aTokenAddress), assetAmounts[0].amount))\\n        .result;\\n  }\\n}\\n\",\"keccak256\":\"0xd0d826db030369fc78c3739765c77b900edf761f979c528b7e2eeec0f4e8dc6c\",\"license\":\"MIT\"},\"contracts/IAaveV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct UserConfigurationMap {\\n  /**\\n   * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n   * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n   * asset is borrowed by the user.\\n   */\\n  uint256 data;\\n}\\n\\nstruct ReserveConfigurationMap {\\n  //bit 0-15: LTV\\n  //bit 16-31: Liq. threshold\\n  //bit 32-47: Liq. bonus\\n  //bit 48-55: Decimals\\n  //bit 56: reserve is active\\n  //bit 57: reserve is frozen\\n  //bit 58: borrowing is enabled\\n  //bit 59: stable rate borrowing enabled\\n  //bit 60: asset is paused\\n  //bit 61: borrowing in isolation mode is enabled\\n  //bit 62-63: reserved\\n  //bit 64-79: reserve factor\\n  //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n  //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n  //bit 152-167 liquidation protocol fee\\n  //bit 168-175 eMode category\\n  //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n  //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n  //bit 252-255 unused\\n\\n  uint256 data;\\n}\\n\\nstruct ReserveData {\\n  //stores the reserve configuration\\n  ReserveConfigurationMap configuration;\\n  //the liquidity index. Expressed in ray\\n  uint128 liquidityIndex;\\n  //the current supply rate. Expressed in ray\\n  uint128 currentLiquidityRate;\\n  //variable borrow index. Expressed in ray\\n  uint128 variableBorrowIndex;\\n  //the current variable borrow rate. Expressed in ray\\n  uint128 currentVariableBorrowRate;\\n  //the current stable borrow rate. Expressed in ray\\n  uint128 currentStableBorrowRate;\\n  //timestamp of last update\\n  uint40 lastUpdateTimestamp;\\n  //the id of the reserve. Represents the position in the list of the active reserves\\n  uint16 id;\\n  //aToken address\\n  address aTokenAddress;\\n  //stableDebtToken address\\n  address stableDebtTokenAddress;\\n  //variableDebtToken address\\n  address variableDebtTokenAddress;\\n  //address of the interest rate strategy\\n  address interestRateStrategyAddress;\\n  //the current treasury balance, scaled\\n  uint128 accruedToTreasury;\\n  //the outstanding unbacked aTokens minted through the bridging feature\\n  uint128 unbacked;\\n  //the outstanding debt borrowed against this asset in isolation mode\\n  uint128 isolationModeTotalDebt;\\n}\\n\\n/**\\n * @title IAaveV3Pool\\n * @author FreeMarketProtocol\\n * @notice This is a _partial_ interface with only the supply method used by AaveSupplyAction.\\n */\\ninterface IAaveV3Pool {\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (ReserveData memory);\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(address asset, uint256 amount, uint256 interestRateMode, address onBehalfOf) external returns (uint256);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user) external view returns (UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n}\\n\",\"keccak256\":\"0x09c3b2252a0182016ebb6c539c70b9eed56e27f2e7e51635e091ce8e09c2e95b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80631755ff21146100395780634f0e0ef314610064578063e025f4021461008f575b600080fd5b34801561004557600080fd5b5061004e6100bf565b60405161005b9190610edf565b60405180910390f35b34801561007057600080fd5b506100796100e3565b6040516100869190610edf565b60405180910390f35b6100a960048036038101906100a49190610ff5565b610107565b6040516100b691906112f2565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61010f610bbc565b60018686905014610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c90611397565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b98686600081811061018a576101896113b7565b5b90506060020160405161019d9190611505565b60405180910390a16101ad610bf1565b610200878760008181106101c4576101c36113b7565b5b9050606002018036038101906101da9190611651565b7f000000000000000000000000000000000000000000000000000000000000000061053b565b816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060200151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102df7f0000000000000000000000000000000000000000000000000000000000000000888860008181106102ab576102aa6113b7565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff1661065e9092919063ffffffff16565b7f0000000000000000000000000000000000000000000000000000000000000000816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166335ea6a7582602001516040518263ffffffff1660e01b81526004016103789190610edf565b6101e060405180830381865afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190611907565b8160c00181905250806040015173ffffffffffffffffffffffffffffffffffffffff1663617ba0378260200151898960008181106103fb576103fa6113b7565b5b905060600201604001358660006040518563ffffffff1660e01b81526004016104279493929190611989565b600060405180830381600087803b15801561044157600080fd5b505af1158015610455573d6000803e3d6000fd5b5050505061052b6040518060400160405280604051806040016040528060016002811115610486576104856110b6565b5b81526020018560c00151610100015173ffffffffffffffffffffffffffffffffffffffff168152508152602001898960008181106104c7576104c66113b7565b5b9050606002016040013581525061051d898960008181106104eb576104ea6113b7565b5b9050606002018036038101906105019190611651565b61050f6001600060016106e4565b61089090919063ffffffff16565b6108dc90919063ffffffff16565b6060015191505095945050505050565b60008060028111156105505761054f6110b6565b5b836000015160000151600281111561056b5761056a6110b6565b5b0361064c57600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d690611a1a565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663d0e30db084602001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b5050505050819050610658565b82600001516020015190505b92915050565b6106df8363095ea7b360e01b848460405160240161067d929190611a3a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610928565b505050565b6106ec610c8c565b60008467ffffffffffffffff81111561070857610707611536565b5b60405190808252806020026020018201604052801561074157816020015b61072e610cba565b8152602001906001900390816107265790505b50905060008467ffffffffffffffff8111156107605761075f611536565b5b60405190808252806020026020018201604052801561079957816020015b610786610cba565b81526020019060019003908161077e5790505b50905060008467ffffffffffffffff8111156107b8576107b7611536565b5b6040519080825280602002602001820160405280156107f157816020015b6107de610cba565b8152602001906001900390816107d65790505b50905060405180608001604052806000815260200160008152602001600081526020016040518060a001604052808681526020018581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b81525081525093505050509392505050565b610898610c8c565b818360600151600001518460000180518091906108b490611a92565b815250815181106108c8576108c76113b7565b5b602002602001018190525082905092915050565b6108e4610c8c565b8183606001516040015184604001805180919061090090611a92565b81525081518110610914576109136113b7565b5b602002602001018190525082905092915050565b600061098a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109ef9092919063ffffffff16565b90506000815111156109ea57808060200190518101906109aa9190611b12565b6109e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e090611bb1565b60405180910390fd5b5b505050565b60606109fe8484600085610a07565b90509392505050565b606082471015610a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4390611c43565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a759190611cd4565b60006040518083038185875af1925050503d8060008114610ab2576040519150601f19603f3d011682016040523d82523d6000602084013e610ab7565b606091505b5091509150610ac887838387610ad4565b92505050949350505050565b60608315610b36576000835103610b2e57610aee85610b49565b610b2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2490611d37565b60405180910390fd5b5b829050610b41565b610b408383610b6c565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610b7f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb39190611d9b565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001610c86610cda565b81525090565b6040518060800160405280600081526020016000815260200160008152602001610cb4610bbc565b81525090565b6040518060400160405280610ccd610e49565b8152602001600081525090565b604051806101e00160405280610cee610e8b565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806040016040528060006002811115610e6857610e676110b6565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec982610e9e565b9050919050565b610ed981610ebe565b82525050565b6000602082019050610ef46000830184610ed0565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610f3357610f32610f0e565b5b8235905067ffffffffffffffff811115610f5057610f4f610f13565b5b602083019150836060820283011115610f6c57610f6b610f18565b5b9250929050565b60008083601f840112610f8957610f88610f0e565b5b8235905067ffffffffffffffff811115610fa657610fa5610f13565b5b602083019150836001820283011115610fc257610fc1610f18565b5b9250929050565b610fd281610ebe565b8114610fdd57600080fd5b50565b600081359050610fef81610fc9565b92915050565b60008060008060006060868803121561101157611010610f04565b5b600086013567ffffffffffffffff81111561102f5761102e610f09565b5b61103b88828901610f1d565b9550955050602086013567ffffffffffffffff81111561105e5761105d610f09565b5b61106a88828901610f73565b9350935050604061107d88828901610fe0565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106110f6576110f56110b6565b5b50565b6000819050611107826110e5565b919050565b6000611117826110f9565b9050919050565b6111278161110c565b82525050565b61113681610ebe565b82525050565b604082016000820151611152600085018261111e565b506020820151611165602085018261112d565b50505050565b6000819050919050565b61117e8161116b565b82525050565b60608201600082015161119a600085018261113c565b5060208201516111ad6040850182611175565b50505050565b60006111bf8383611184565b60608301905092915050565b6000602082019050919050565b60006111e38261108a565b6111ed8185611095565b93506111f8836110a6565b8060005b8381101561122957815161121088826111b3565b975061121b836111cb565b9250506001810190506111fc565b5085935050505092915050565b60008160010b9050919050565b61124c81611236565b82525050565b60008160020b9050919050565b61126881611252565b82525050565b600060a083016000830151848203600086015261128b82826111d8565b915050602083015184820360208601526112a582826111d8565b915050604083015184820360408601526112bf82826111d8565b91505060608301516112d46060860182611243565b5060808301516112e7608086018261125f565b508091505092915050565b6000602082019050818103600083015261130c818461126e565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b6000611381602383611314565b915061138c82611325565b604082019050919050565b600060208201905081810360008301526113b081611374565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082905092915050565b600381106113fe57600080fd5b50565b600081359050611410816113f1565b92915050565b60006114256020840184611401565b905092915050565b600061143c6020840184610fe0565b905092915050565b604082016114556000830183611416565b611462600085018261111e565b50611470602083018361142d565b61147d602085018261112d565b50505050565b61148c8161116b565b811461149757600080fd5b50565b6000813590506114a981611483565b92915050565b60006114be602084018461149a565b905092915050565b606082016114d760008301836113e6565b6114e46000850182611444565b506114f260408301836114af565b6114ff6040850182611175565b50505050565b600060608201905061151a60008301846114c6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61156e82611525565b810181811067ffffffffffffffff8211171561158d5761158c611536565b5b80604052505050565b60006115a0610efa565b90506115ac8282611565565b919050565b6000604082840312156115c7576115c6611520565b5b6115d16040611596565b905060006115e184828501611401565b60008301525060206115f584828501610fe0565b60208301525092915050565b60006060828403121561161757611616611520565b5b6116216040611596565b90506000611631848285016115b1565b60008301525060406116458482850161149a565b60208301525092915050565b60006060828403121561166757611666610f04565b5b600061167584828501611601565b91505092915050565b60008151905061168d81611483565b92915050565b6000602082840312156116a9576116a8611520565b5b6116b36020611596565b905060006116c38482850161167e565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6116f4816116cf565b81146116ff57600080fd5b50565b600081519050611711816116eb565b92915050565b600064ffffffffff82169050919050565b61173181611717565b811461173c57600080fd5b50565b60008151905061174e81611728565b92915050565b600061ffff82169050919050565b61176b81611754565b811461177657600080fd5b50565b60008151905061178881611762565b92915050565b60008151905061179d81610fc9565b92915050565b60006101e082840312156117ba576117b9611520565b5b6117c56101e0611596565b905060006117d584828501611693565b60008301525060206117e984828501611702565b60208301525060406117fd84828501611702565b604083015250606061181184828501611702565b606083015250608061182584828501611702565b60808301525060a061183984828501611702565b60a08301525060c061184d8482850161173f565b60c08301525060e061186184828501611779565b60e0830152506101006118768482850161178e565b6101008301525061012061188c8482850161178e565b610120830152506101406118a28482850161178e565b610140830152506101606118b88482850161178e565b610160830152506101806118ce84828501611702565b610180830152506101a06118e484828501611702565b6101a0830152506101c06118fa84828501611702565b6101c08301525092915050565b60006101e0828403121561191e5761191d610f04565b5b600061192c848285016117a3565b91505092915050565b61193e8161116b565b82525050565b6000819050919050565b6000819050919050565b600061197361196e61196984611944565b61194e565b611754565b9050919050565b61198381611958565b82525050565b600060808201905061199e6000830187610ed0565b6119ab6020830186611935565b6119b86040830185610ed0565b6119c5606083018461197a565b95945050505050565b7f77657468206e6f7420737570706f72746564206f6e207468697320636861696e600082015250565b6000611a04602083611314565b9150611a0f826119ce565b602082019050919050565b60006020820190508181036000830152611a33816119f7565b9050919050565b6000604082019050611a4f6000830185610ed0565b611a5c6020830184611935565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a9d8261116b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611acf57611ace611a63565b5b600182019050919050565b60008115159050919050565b611aef81611ada565b8114611afa57600080fd5b50565b600081519050611b0c81611ae6565b92915050565b600060208284031215611b2857611b27610f04565b5b6000611b3684828501611afd565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611b9b602a83611314565b9150611ba682611b3f565b604082019050919050565b60006020820190508181036000830152611bca81611b8e565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611c2d602683611314565b9150611c3882611bd1565b604082019050919050565b60006020820190508181036000830152611c5c81611c20565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611c97578082015181840152602081019050611c7c565b60008484015250505050565b6000611cae82611c63565b611cb88185611c6e565b9350611cc8818560208601611c79565b80840191505092915050565b6000611ce08284611ca3565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611d21601d83611314565b9150611d2c82611ceb565b602082019050919050565b60006020820190508181036000830152611d5081611d14565b9050919050565b600081519050919050565b6000611d6d82611d57565b611d778185611314565b9350611d87818560208601611c79565b611d9081611525565b840191505092915050565b60006020820190508181036000830152611db58184611d62565b90509291505056fea2646970667358221220e96d8a8b88de84b5135800ffc643fd730dccb5620a4125a86f3e6d4fe2890f8e64736f6c63430008120033",
  "devdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "params": {
          "inputAssetAmount": "the asset and amout being supplied to Aave."
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "notice": "This event is emitted when an Aave 'supply' action is executed."
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}