{
  "address": "0x41309991fFDe518bDB64DD38Cbe2313AaC562814",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aavePoolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount",
          "name": "inputAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "AaveSupplyActionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "assetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfca3955843460c42834f6c66859c0b571bb9f5b5525f86e46977aa4a9e275063",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x41309991fFDe518bDB64DD38Cbe2313AaC562814",
    "transactionIndex": 42,
    "gasUsed": "1742093",
    "logsBloom": "0x
    "blockHash": "0x3b0b63c405375c0a789ca323c3d9f32470331f96373a6090c6b7158842870740",
    "transactionHash": "0xfca3955843460c42834f6c66859c0b571bb9f5b5525f86e46977aa4a9e275063",
    "logs": [],
    "blockNumber": 8896109,
    "cumulativeGasUsed": "11905184",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fC08527858ae3E70AFF353DCe4F05568874F187"
  ],
  "numDeployments": 1,
  "solcInputHash": "7a8268dba9311d47bfd24fc65b4ac9e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aavePoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount\",\"name\":\"inputAssetAmount\",\"type\":\"tuple\"}],\"name\":\"AaveSupplyActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"assetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"params\":{\"inputAssetAmount\":\"the asset and amout being supplied to Aave.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"notice\":\"This event is emitted when an Aave 'supply' action is executed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveSupplyAction.sol\":\"AaveSupplyAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetAmount.sol\\\";\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n    // The amounts of each input asset that resulted from the step execution.\\n    AssetAmount[] inputAssetAmounts;\\n    // The amounts of each output asset that resulted from the step execution.\\n    AssetAmount[] outputAssetAmounts;\\n    // The index of the next step in a workflow.\\n    // This value allows the step to override the default nextStepIndex\\n    // statically defined\\n    // -1 means terminate the workflow\\n    // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n    int16 nextStepIndex;\\n}\\n\",\"keccak256\":\"0xf533dd649e5cc237552e8f6054ad120d92cea47e3ad5970cfdacef901414624f\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/AssetType.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/WorkflowStepResult.sol\\\";\\n\\nlibrary LibActionHelpers {\\n    function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        Asset memory asset = Asset(assetType, assetAddress);\\n        AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n        ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n        return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2);\\n    }\\n\\n    function singleTokenResult(address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n    }\\n\\n    function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n        return singleAssetResult(AssetType.Native, address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0x70d61ca9349780d000babacf0153f0d8a94e27cd153403e26cbf639a73e10b29\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LibErc20 {\\n    using Address for address;\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // forked from openzeppelin but removed the require, just keeping optional return\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57f8763cdc6339c5b248a4226b8392e36fdec46ad8b84aba2326f6ac1025b06\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/AssetType.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/WorkflowStepResult.sol\\\";\\n\\nstruct StepResultBuilder {\\n    uint256 inputIndex;\\n    uint256 outputIndex;\\n    WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n    function create(uint256 inputAssetCount, uint256 outputAssetCount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n        AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n        return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2));\\n    }\\n\\n    function addInputToken(StepResultBuilder memory builder, address tokenAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.inputAssetAmounts[builder.inputIndex++] =\\n            AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n        return builder;\\n    }\\n\\n    function addInputAssetAmount(StepResultBuilder memory builder, AssetAmount memory assetAmount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n        return builder;\\n    }\\n\\n    function addOutputToken(StepResultBuilder memory builder, address tokenAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.outputAssetAmounts[builder.outputIndex++] =\\n            AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n        return builder;\\n    }\\n\\n    function addInputNative(StepResultBuilder memory builder, uint256 amount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n        return builder;\\n    }\\n\\n    function addOutputNative(StepResultBuilder memory builder, uint256 amount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.outputAssetAmounts[builder.outputIndex++] =\\n            AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n        return builder;\\n    }\\n\\n    function addOutputAssetAmount(StepResultBuilder memory builder, AssetAmount memory assetAmount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n        return builder;\\n    }\\n\\n    function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.nextStepIndex = nextStepIndex;\\n        return builder;\\n    }\\n}\\n\",\"keccak256\":\"0xbf7e5a6c06d4a71832bd5ac7f456bdb30fc3d3330cb1d88fe5eec6d6d714b83f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/AaveSupplyAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\nimport \\\"./IAaveV3Pool.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibErc20.sol\\\";\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing LibErc20 for IERC20;\\n\\n// import {IPool} from '@aave/core-v3/contracts/interfaces/IPool.sol';\\n// import {DataTypes} from '@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol';\\n\\ncontract AaveSupplyAction is IWorkflowStep {\\n    address public immutable poolAddress;\\n\\n    /// @notice This event is emitted when an Aave 'supply' action is executed.\\n    /// @param inputAssetAmount the asset and amout being supplied to Aave.\\n    event AaveSupplyActionEvent(AssetAmount inputAssetAmount);\\n\\n    constructor(address _aavePoolAddress) {\\n        poolAddress = _aavePoolAddress;\\n    }\\n\\n    struct Locals {\\n        IERC20 inputToken;\\n        IAaveV3Pool pool;\\n        IERC20 aToken;\\n        uint256 aTokenBalanceBefore;\\n        uint256 aTokenBalanceAfter;\\n        ReserveData reserveData;\\n    }\\n\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata)\\n        public\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n        // validate\\n        require(assetAmounts.length == 1, \\\"there must be exactly 1 input asset\\\");\\n        require(assetAmounts[0].asset.assetType == AssetType.ERC20, \\\"the input asset must be an ERC20\\\");\\n        // require(outputAssets.length == 1, 'there must be exactly 1 output asset when keeping the aToken in the engine');\\n\\n        emit AaveSupplyActionEvent(assetAmounts[0]);\\n        Locals memory locals;\\n        // approve aave to take the asset\\n        locals.inputToken = IERC20(assetAmounts[0].asset.assetAddress);\\n        locals.inputToken.safeApprove(poolAddress, assetAmounts[0].amount);\\n\\n        // get the aToken\\n        locals.pool = IAaveV3Pool(poolAddress);\\n        locals.reserveData = locals.pool.getReserveData(assetAmounts[0].asset.assetAddress);\\n        locals.aToken = IERC20(locals.reserveData.aTokenAddress);\\n\\n        // take note of the before balance\\n        locals.aTokenBalanceBefore = locals.aToken.balanceOf(address(this));\\n\\n        // invoke supply\\n        locals.pool.supply(assetAmounts[0].asset.assetAddress, assetAmounts[0].amount, address(this), 0);\\n        locals.aTokenBalanceAfter = locals.aToken.balanceOf(address(this));\\n        require(locals.aTokenBalanceAfter > locals.aTokenBalanceBefore, \\\"aToken balance did not increase\\\");\\n\\n        return LibStepResultBuilder.create(1, 1).addInputAssetAmount(assetAmounts[0]).addOutputToken(\\n            locals.reserveData.aTokenAddress, locals.aTokenBalanceAfter - locals.aTokenBalanceBefore\\n        ).result;\\n    }\\n}\\n\",\"keccak256\":\"0x3f4b7a823f91dba0ec7a231de875fbc9596a062d19d191c15c9dc08363492b4a\",\"license\":\"MIT\"},\"contracts/IAaveV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct ReserveConfigurationMap {\\n  //bit 0-15: LTV\\n  //bit 16-31: Liq. threshold\\n  //bit 32-47: Liq. bonus\\n  //bit 48-55: Decimals\\n  //bit 56: reserve is active\\n  //bit 57: reserve is frozen\\n  //bit 58: borrowing is enabled\\n  //bit 59: stable rate borrowing enabled\\n  //bit 60: asset is paused\\n  //bit 61: borrowing in isolation mode is enabled\\n  //bit 62-63: reserved\\n  //bit 64-79: reserve factor\\n  //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n  //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n  //bit 152-167 liquidation protocol fee\\n  //bit 168-175 eMode category\\n  //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n  //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n  //bit 252-255 unused\\n\\n  uint256 data;\\n}\\n\\nstruct ReserveData {\\n  //stores the reserve configuration\\n  ReserveConfigurationMap configuration;\\n  //the liquidity index. Expressed in ray\\n  uint128 liquidityIndex;\\n  //the current supply rate. Expressed in ray\\n  uint128 currentLiquidityRate;\\n  //variable borrow index. Expressed in ray\\n  uint128 variableBorrowIndex;\\n  //the current variable borrow rate. Expressed in ray\\n  uint128 currentVariableBorrowRate;\\n  //the current stable borrow rate. Expressed in ray\\n  uint128 currentStableBorrowRate;\\n  //timestamp of last update\\n  uint40 lastUpdateTimestamp;\\n  //the id of the reserve. Represents the position in the list of the active reserves\\n  uint16 id;\\n  //aToken address\\n  address aTokenAddress;\\n  //stableDebtToken address\\n  address stableDebtTokenAddress;\\n  //variableDebtToken address\\n  address variableDebtTokenAddress;\\n  //address of the interest rate strategy\\n  address interestRateStrategyAddress;\\n  //the current treasury balance, scaled\\n  uint128 accruedToTreasury;\\n  //the outstanding unbacked aTokens minted through the bridging feature\\n  uint128 unbacked;\\n  //the outstanding debt borrowed against this asset in isolation mode\\n  uint128 isolationModeTotalDebt;\\n}\\n\\n/**\\n * @title IAaveV3Pool\\n * @author FreeMarketProtocol\\n * @notice This is a _partial_ interface with only the supply method used by AaveSupplyAction.\\n */\\ninterface IAaveV3Pool {\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (ReserveData memory);\\n}\\n\",\"keccak256\":\"0xf0ef438e4c74f3f2e3a68dba30e6c161ca149ba804abb7b25a71ad2d8e809feb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001fc938038062001fc98339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051611e926200013760003960008181608b0152818161025301526102bc0152611e926000f3fe6080604052600436106100295760003560e01c80631755ff211461002e5780637bb26ca714610059575b600080fd5b34801561003a57600080fd5b50610043610089565b6040516100509190610eb4565b60405180910390f35b610073600480360381019061006e9190610f9e565b6100ad565b604051610080919061123e565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100b5610bc6565b600185859050146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f2906112e3565b60405180910390fd5b6001600281111561010f5761010e61104b565b5b8585600081811061012357610122611303565b5b905060600201600001600001602081019061013e9190611357565b60028111156101505761014f61104b565b5b14610190576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610187906113d0565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b9858560008181106101c5576101c4611303565b5b9050606002016040516101d89190611516565b60405180910390a16101e8610bea565b858560008181106101fc576101fb611303565b5b90506060020160000160200160208101906102179190611531565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102ba7f00000000000000000000000000000000000000000000000000000000000000008787600081811061028657610285611303565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff166106a69092919063ffffffff16565b7f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806020015173ffffffffffffffffffffffffffffffffffffffff166335ea6a758787600081811061034657610345611303565b5b90506060020160000160200160208101906103619190611531565b6040518263ffffffff1660e01b815260040161037d9190610eb4565b6101e060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf9190611878565b8160a001819052508060a001516101000151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104459190610eb4565b602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048691906118a6565b816060018181525050806020015173ffffffffffffffffffffffffffffffffffffffff1663617ba037878760008181106104c3576104c2611303565b5b90506060020160000160200160208101906104de9190611531565b888860008181106104f2576104f1611303565b5b905060600201604001353060006040518563ffffffff1660e01b815260040161051e9493929190611927565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50505050806040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161058d9190610eb4565b602060405180830381865afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce91906118a6565b8160800181815250508060600151816080015111610621576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610618906119b8565b60405180910390fd5b6106978160a001516101000151826060015183608001516106429190611a07565b6106888989600081811061065957610658611303565b5b90506060020180360381019061066f9190611adb565b61067a60018061072c565b61084890919063ffffffff16565b6108949092919063ffffffff16565b60400151915050949350505050565b6107278363095ea7b360e01b84846040516024016106c5929190611b08565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610932565b505050565b610734610c68565b60008367ffffffffffffffff8111156107505761074f611574565b5b60405190808252806020026020018201604052801561078957816020015b610776610c8f565b81526020019060019003908161076e5790505b50905060008367ffffffffffffffff8111156107a8576107a7611574565b5b6040519080825280602002602001820160405280156107e157816020015b6107ce610c8f565b8152602001906001900390816107c65790505b5090506040518060600160405280600081526020016000815260200160405180606001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b8152508152509250505092915050565b610850610c68565b8183604001516000015184600001805180919061086c90611b31565b815250815181106108805761087f611303565b5b602002602001018190525082905092915050565b61089c610c68565b60405180604001604052806040518060400160405280600160028111156108c6576108c561104b565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061090990611b31565b8152508151811061091d5761091c611303565b5b60200260200101819052508390509392505050565b6000610994826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109f99092919063ffffffff16565b90506000815111156109f457808060200190518101906109b49190611bb1565b6109f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ea90611c50565b60405180910390fd5b5b505050565b6060610a088484600085610a11565b90509392505050565b606082471015610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90611ce2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a7f9190611d73565b60006040518083038185875af1925050503d8060008114610abc576040519150601f19603f3d011682016040523d82523d6000602084013e610ac1565b606091505b5091509150610ad287838387610ade565b92505050949350505050565b60608315610b40576000835103610b3857610af885610b53565b610b37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2e90611dd6565b60405180910390fd5b5b829050610b4b565b610b4a8383610b76565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610b895781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd9190611e3a565b60405180910390fd5b60405180606001604052806060815260200160608152602001600060010b81525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001610c62610caf565b81525090565b60405180606001604052806000815260200160008152602001610c89610bc6565b81525090565b6040518060400160405280610ca2610e1e565b8152602001600081525090565b604051806101e00160405280610cc3610e60565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806040016040528060006002811115610e3d57610e3c61104b565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9e82610e73565b9050919050565b610eae81610e93565b82525050565b6000602082019050610ec96000830184610ea5565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610f0857610f07610ee3565b5b8235905067ffffffffffffffff811115610f2557610f24610ee8565b5b602083019150836060820283011115610f4157610f40610eed565b5b9250929050565b60008083601f840112610f5e57610f5d610ee3565b5b8235905067ffffffffffffffff811115610f7b57610f7a610ee8565b5b602083019150836001820283011115610f9757610f96610eed565b5b9250929050565b60008060008060408587031215610fb857610fb7610ed9565b5b600085013567ffffffffffffffff811115610fd657610fd5610ede565b5b610fe287828801610ef2565b9450945050602085013567ffffffffffffffff81111561100557611004610ede565b5b61101187828801610f48565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061108b5761108a61104b565b5b50565b600081905061109c8261107a565b919050565b60006110ac8261108e565b9050919050565b6110bc816110a1565b82525050565b6110cb81610e93565b82525050565b6040820160008201516110e760008501826110b3565b5060208201516110fa60208501826110c2565b50505050565b6000819050919050565b61111381611100565b82525050565b60608201600082015161112f60008501826110d1565b506020820151611142604085018261110a565b50505050565b60006111548383611119565b60608301905092915050565b6000602082019050919050565b60006111788261101f565b611182818561102a565b935061118d8361103b565b8060005b838110156111be5781516111a58882611148565b97506111b083611160565b925050600181019050611191565b5085935050505092915050565b60008160010b9050919050565b6111e1816111cb565b82525050565b60006060830160008301518482036000860152611204828261116d565b9150506020830151848203602086015261121e828261116d565b915050604083015161123360408601826111d8565b508091505092915050565b6000602082019050818103600083015261125881846111e7565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b60006112cd602383611260565b91506112d882611271565b604082019050919050565b600060208201905081810360008301526112fc816112c0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6003811061133f57600080fd5b50565b60008135905061135181611332565b92915050565b60006020828403121561136d5761136c610ed9565b5b600061137b84828501611342565b91505092915050565b7f74686520696e707574206173736574206d75737420626520616e204552433230600082015250565b60006113ba602083611260565b91506113c582611384565b602082019050919050565b600060208201905081810360008301526113e9816113ad565b9050919050565b600082905092915050565b600061140a6020840184611342565b905092915050565b61141b81610e93565b811461142657600080fd5b50565b60008135905061143881611412565b92915050565b600061144d6020840184611429565b905092915050565b6040820161146660008301836113fb565b61147360008501826110b3565b50611481602083018361143e565b61148e60208501826110c2565b50505050565b61149d81611100565b81146114a857600080fd5b50565b6000813590506114ba81611494565b92915050565b60006114cf60208401846114ab565b905092915050565b606082016114e860008301836113f0565b6114f56000850182611455565b5061150360408301836114c0565b611510604085018261110a565b50505050565b600060608201905061152b60008301846114d7565b92915050565b60006020828403121561154757611546610ed9565b5b600061155584828501611429565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115ac82611563565b810181811067ffffffffffffffff821117156115cb576115ca611574565b5b80604052505050565b60006115de610ecf565b90506115ea82826115a3565b919050565b6000815190506115fe81611494565b92915050565b60006020828403121561161a5761161961155e565b5b61162460206115d4565b90506000611634848285016115ef565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61166581611640565b811461167057600080fd5b50565b6000815190506116828161165c565b92915050565b600064ffffffffff82169050919050565b6116a281611688565b81146116ad57600080fd5b50565b6000815190506116bf81611699565b92915050565b600061ffff82169050919050565b6116dc816116c5565b81146116e757600080fd5b50565b6000815190506116f9816116d3565b92915050565b60008151905061170e81611412565b92915050565b60006101e0828403121561172b5761172a61155e565b5b6117366101e06115d4565b9050600061174684828501611604565b600083015250602061175a84828501611673565b602083015250604061176e84828501611673565b604083015250606061178284828501611673565b606083015250608061179684828501611673565b60808301525060a06117aa84828501611673565b60a08301525060c06117be848285016116b0565b60c08301525060e06117d2848285016116ea565b60e0830152506101006117e7848285016116ff565b610100830152506101206117fd848285016116ff565b61012083015250610140611813848285016116ff565b61014083015250610160611829848285016116ff565b6101608301525061018061183f84828501611673565b610180830152506101a061185584828501611673565b6101a0830152506101c061186b84828501611673565b6101c08301525092915050565b60006101e0828403121561188f5761188e610ed9565b5b600061189d84828501611714565b91505092915050565b6000602082840312156118bc576118bb610ed9565b5b60006118ca848285016115ef565b91505092915050565b6118dc81611100565b82525050565b6000819050919050565b6000819050919050565b600061191161190c611907846118e2565b6118ec565b6116c5565b9050919050565b611921816118f6565b82525050565b600060808201905061193c6000830187610ea5565b61194960208301866118d3565b6119566040830185610ea5565b6119636060830184611918565b95945050505050565b7f61546f6b656e2062616c616e636520646964206e6f7420696e63726561736500600082015250565b60006119a2601f83611260565b91506119ad8261196c565b602082019050919050565b600060208201905081810360008301526119d181611995565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a1282611100565b9150611a1d83611100565b9250828203905081811115611a3557611a346119d8565b5b92915050565b600060408284031215611a5157611a5061155e565b5b611a5b60406115d4565b90506000611a6b84828501611342565b6000830152506020611a7f84828501611429565b60208301525092915050565b600060608284031215611aa157611aa061155e565b5b611aab60406115d4565b90506000611abb84828501611a3b565b6000830152506040611acf848285016114ab565b60208301525092915050565b600060608284031215611af157611af0610ed9565b5b6000611aff84828501611a8b565b91505092915050565b6000604082019050611b1d6000830185610ea5565b611b2a60208301846118d3565b9392505050565b6000611b3c82611100565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b6e57611b6d6119d8565b5b600182019050919050565b60008115159050919050565b611b8e81611b79565b8114611b9957600080fd5b50565b600081519050611bab81611b85565b92915050565b600060208284031215611bc757611bc6610ed9565b5b6000611bd584828501611b9c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c3a602a83611260565b9150611c4582611bde565b604082019050919050565b60006020820190508181036000830152611c6981611c2d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ccc602683611260565b9150611cd782611c70565b604082019050919050565b60006020820190508181036000830152611cfb81611cbf565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611d36578082015181840152602081019050611d1b565b60008484015250505050565b6000611d4d82611d02565b611d578185611d0d565b9350611d67818560208601611d18565b80840191505092915050565b6000611d7f8284611d42565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611dc0601d83611260565b9150611dcb82611d8a565b602082019050919050565b60006020820190508181036000830152611def81611db3565b9050919050565b600081519050919050565b6000611e0c82611df6565b611e168185611260565b9350611e26818560208601611d18565b611e2f81611563565b840191505092915050565b60006020820190508181036000830152611e548184611e01565b90509291505056fea2646970667358221220135b71efb548d6553866e527b1dd17888ee6a976fa01d2fbc63f772b3fece25764736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80631755ff211461002e5780637bb26ca714610059575b600080fd5b34801561003a57600080fd5b50610043610089565b6040516100509190610eb4565b60405180910390f35b610073600480360381019061006e9190610f9e565b6100ad565b604051610080919061123e565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100b5610bc6565b600185859050146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f2906112e3565b60405180910390fd5b6001600281111561010f5761010e61104b565b5b8585600081811061012357610122611303565b5b905060600201600001600001602081019061013e9190611357565b60028111156101505761014f61104b565b5b14610190576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610187906113d0565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b9858560008181106101c5576101c4611303565b5b9050606002016040516101d89190611516565b60405180910390a16101e8610bea565b858560008181106101fc576101fb611303565b5b90506060020160000160200160208101906102179190611531565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102ba7f00000000000000000000000000000000000000000000000000000000000000008787600081811061028657610285611303565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff166106a69092919063ffffffff16565b7f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806020015173ffffffffffffffffffffffffffffffffffffffff166335ea6a758787600081811061034657610345611303565b5b90506060020160000160200160208101906103619190611531565b6040518263ffffffff1660e01b815260040161037d9190610eb4565b6101e060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf9190611878565b8160a001819052508060a001516101000151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104459190610eb4565b602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048691906118a6565b816060018181525050806020015173ffffffffffffffffffffffffffffffffffffffff1663617ba037878760008181106104c3576104c2611303565b5b90506060020160000160200160208101906104de9190611531565b888860008181106104f2576104f1611303565b5b905060600201604001353060006040518563ffffffff1660e01b815260040161051e9493929190611927565b600060405180830381600087803b15801561053857600080fd5b505af115801561054c573d6000803e3d6000fd5b50505050806040015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161058d9190610eb4565b602060405180830381865afa1580156105aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ce91906118a6565b8160800181815250508060600151816080015111610621576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610618906119b8565b60405180910390fd5b6106978160a001516101000151826060015183608001516106429190611a07565b6106888989600081811061065957610658611303565b5b90506060020180360381019061066f9190611adb565b61067a60018061072c565b61084890919063ffffffff16565b6108949092919063ffffffff16565b60400151915050949350505050565b6107278363095ea7b360e01b84846040516024016106c5929190611b08565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610932565b505050565b610734610c68565b60008367ffffffffffffffff8111156107505761074f611574565b5b60405190808252806020026020018201604052801561078957816020015b610776610c8f565b81526020019060019003908161076e5790505b50905060008367ffffffffffffffff8111156107a8576107a7611574565b5b6040519080825280602002602001820160405280156107e157816020015b6107ce610c8f565b8152602001906001900390816107c65790505b5090506040518060600160405280600081526020016000815260200160405180606001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b8152508152509250505092915050565b610850610c68565b8183604001516000015184600001805180919061086c90611b31565b815250815181106108805761087f611303565b5b602002602001018190525082905092915050565b61089c610c68565b60405180604001604052806040518060400160405280600160028111156108c6576108c561104b565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681525081526020018381525084604001516020015185602001805180919061090990611b31565b8152508151811061091d5761091c611303565b5b60200260200101819052508390509392505050565b6000610994826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109f99092919063ffffffff16565b90506000815111156109f457808060200190518101906109b49190611bb1565b6109f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ea90611c50565b60405180910390fd5b5b505050565b6060610a088484600085610a11565b90509392505050565b606082471015610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90611ce2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a7f9190611d73565b60006040518083038185875af1925050503d8060008114610abc576040519150601f19603f3d011682016040523d82523d6000602084013e610ac1565b606091505b5091509150610ad287838387610ade565b92505050949350505050565b60608315610b40576000835103610b3857610af885610b53565b610b37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2e90611dd6565b60405180910390fd5b5b829050610b4b565b610b4a8383610b76565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610b895781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd9190611e3a565b60405180910390fd5b60405180606001604052806060815260200160608152602001600060010b81525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001610c62610caf565b81525090565b60405180606001604052806000815260200160008152602001610c89610bc6565b81525090565b6040518060400160405280610ca2610e1e565b8152602001600081525090565b604051806101e00160405280610cc3610e60565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806040016040528060006002811115610e3d57610e3c61104b565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e9e82610e73565b9050919050565b610eae81610e93565b82525050565b6000602082019050610ec96000830184610ea5565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610f0857610f07610ee3565b5b8235905067ffffffffffffffff811115610f2557610f24610ee8565b5b602083019150836060820283011115610f4157610f40610eed565b5b9250929050565b60008083601f840112610f5e57610f5d610ee3565b5b8235905067ffffffffffffffff811115610f7b57610f7a610ee8565b5b602083019150836001820283011115610f9757610f96610eed565b5b9250929050565b60008060008060408587031215610fb857610fb7610ed9565b5b600085013567ffffffffffffffff811115610fd657610fd5610ede565b5b610fe287828801610ef2565b9450945050602085013567ffffffffffffffff81111561100557611004610ede565b5b61101187828801610f48565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061108b5761108a61104b565b5b50565b600081905061109c8261107a565b919050565b60006110ac8261108e565b9050919050565b6110bc816110a1565b82525050565b6110cb81610e93565b82525050565b6040820160008201516110e760008501826110b3565b5060208201516110fa60208501826110c2565b50505050565b6000819050919050565b61111381611100565b82525050565b60608201600082015161112f60008501826110d1565b506020820151611142604085018261110a565b50505050565b60006111548383611119565b60608301905092915050565b6000602082019050919050565b60006111788261101f565b611182818561102a565b935061118d8361103b565b8060005b838110156111be5781516111a58882611148565b97506111b083611160565b925050600181019050611191565b5085935050505092915050565b60008160010b9050919050565b6111e1816111cb565b82525050565b60006060830160008301518482036000860152611204828261116d565b9150506020830151848203602086015261121e828261116d565b915050604083015161123360408601826111d8565b508091505092915050565b6000602082019050818103600083015261125881846111e7565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b60006112cd602383611260565b91506112d882611271565b604082019050919050565b600060208201905081810360008301526112fc816112c0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6003811061133f57600080fd5b50565b60008135905061135181611332565b92915050565b60006020828403121561136d5761136c610ed9565b5b600061137b84828501611342565b91505092915050565b7f74686520696e707574206173736574206d75737420626520616e204552433230600082015250565b60006113ba602083611260565b91506113c582611384565b602082019050919050565b600060208201905081810360008301526113e9816113ad565b9050919050565b600082905092915050565b600061140a6020840184611342565b905092915050565b61141b81610e93565b811461142657600080fd5b50565b60008135905061143881611412565b92915050565b600061144d6020840184611429565b905092915050565b6040820161146660008301836113fb565b61147360008501826110b3565b50611481602083018361143e565b61148e60208501826110c2565b50505050565b61149d81611100565b81146114a857600080fd5b50565b6000813590506114ba81611494565b92915050565b60006114cf60208401846114ab565b905092915050565b606082016114e860008301836113f0565b6114f56000850182611455565b5061150360408301836114c0565b611510604085018261110a565b50505050565b600060608201905061152b60008301846114d7565b92915050565b60006020828403121561154757611546610ed9565b5b600061155584828501611429565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115ac82611563565b810181811067ffffffffffffffff821117156115cb576115ca611574565b5b80604052505050565b60006115de610ecf565b90506115ea82826115a3565b919050565b6000815190506115fe81611494565b92915050565b60006020828403121561161a5761161961155e565b5b61162460206115d4565b90506000611634848285016115ef565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61166581611640565b811461167057600080fd5b50565b6000815190506116828161165c565b92915050565b600064ffffffffff82169050919050565b6116a281611688565b81146116ad57600080fd5b50565b6000815190506116bf81611699565b92915050565b600061ffff82169050919050565b6116dc816116c5565b81146116e757600080fd5b50565b6000815190506116f9816116d3565b92915050565b60008151905061170e81611412565b92915050565b60006101e0828403121561172b5761172a61155e565b5b6117366101e06115d4565b9050600061174684828501611604565b600083015250602061175a84828501611673565b602083015250604061176e84828501611673565b604083015250606061178284828501611673565b606083015250608061179684828501611673565b60808301525060a06117aa84828501611673565b60a08301525060c06117be848285016116b0565b60c08301525060e06117d2848285016116ea565b60e0830152506101006117e7848285016116ff565b610100830152506101206117fd848285016116ff565b61012083015250610140611813848285016116ff565b61014083015250610160611829848285016116ff565b6101608301525061018061183f84828501611673565b610180830152506101a061185584828501611673565b6101a0830152506101c061186b84828501611673565b6101c08301525092915050565b60006101e0828403121561188f5761188e610ed9565b5b600061189d84828501611714565b91505092915050565b6000602082840312156118bc576118bb610ed9565b5b60006118ca848285016115ef565b91505092915050565b6118dc81611100565b82525050565b6000819050919050565b6000819050919050565b600061191161190c611907846118e2565b6118ec565b6116c5565b9050919050565b611921816118f6565b82525050565b600060808201905061193c6000830187610ea5565b61194960208301866118d3565b6119566040830185610ea5565b6119636060830184611918565b95945050505050565b7f61546f6b656e2062616c616e636520646964206e6f7420696e63726561736500600082015250565b60006119a2601f83611260565b91506119ad8261196c565b602082019050919050565b600060208201905081810360008301526119d181611995565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a1282611100565b9150611a1d83611100565b9250828203905081811115611a3557611a346119d8565b5b92915050565b600060408284031215611a5157611a5061155e565b5b611a5b60406115d4565b90506000611a6b84828501611342565b6000830152506020611a7f84828501611429565b60208301525092915050565b600060608284031215611aa157611aa061155e565b5b611aab60406115d4565b90506000611abb84828501611a3b565b6000830152506040611acf848285016114ab565b60208301525092915050565b600060608284031215611af157611af0610ed9565b5b6000611aff84828501611a8b565b91505092915050565b6000604082019050611b1d6000830185610ea5565b611b2a60208301846118d3565b9392505050565b6000611b3c82611100565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b6e57611b6d6119d8565b5b600182019050919050565b60008115159050919050565b611b8e81611b79565b8114611b9957600080fd5b50565b600081519050611bab81611b85565b92915050565b600060208284031215611bc757611bc6610ed9565b5b6000611bd584828501611b9c565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c3a602a83611260565b9150611c4582611bde565b604082019050919050565b60006020820190508181036000830152611c6981611c2d565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ccc602683611260565b9150611cd782611c70565b604082019050919050565b60006020820190508181036000830152611cfb81611cbf565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611d36578082015181840152602081019050611d1b565b60008484015250505050565b6000611d4d82611d02565b611d578185611d0d565b9350611d67818560208601611d18565b80840191505092915050565b6000611d7f8284611d42565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611dc0601d83611260565b9150611dcb82611d8a565b602082019050919050565b60006020820190508181036000830152611def81611db3565b9050919050565b600081519050919050565b6000611e0c82611df6565b611e168185611260565b9350611e26818560208601611d18565b611e2f81611563565b840191505092915050565b60006020820190508181036000830152611e548184611e01565b90509291505056fea2646970667358221220135b71efb548d6553866e527b1dd17888ee6a976fa01d2fbc63f772b3fece25764736f6c63430008120033",
  "devdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "params": {
          "inputAssetAmount": "the asset and amout being supplied to Aave."
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "notice": "This event is emitted when an Aave 'supply' action is executed."
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}