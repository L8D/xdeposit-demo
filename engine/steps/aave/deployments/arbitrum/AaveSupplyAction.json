{
  "address": "0x5cd858794f88196A8D6339FA256cEf06fd6108A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aavePoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount",
          "name": "inputAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "AaveSupplyActionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "assetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a6b8da1b845edbfcfbe7d0b7c260ab53a404bd5cdfba9a120ed8d6d7651bdaa",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x5cd858794f88196A8D6339FA256cEf06fd6108A3",
    "transactionIndex": 2,
    "gasUsed": "20288344",
    "logsBloom": "0x
    "blockHash": "0x63e1432adc8440149da04bbcca73292d850f547a79c3dcc5e55ea78c353f4352",
    "transactionHash": "0x0a6b8da1b845edbfcfbe7d0b7c260ab53a404bd5cdfba9a120ed8d6d7651bdaa",
    "logs": [],
    "blockNumber": 96786053,
    "cumulativeGasUsed": "21371613",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x794a61358D6845594F94dc1DB02A252b5b4814aD",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"
  ],
  "numDeployments": 1,
  "solcInputHash": "2d3cf33d35c60b6fd7d393f81bbd2c2e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aavePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount\",\"name\":\"inputAssetAmount\",\"type\":\"tuple\"}],\"name\":\"AaveSupplyActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"assetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"params\":{\"inputAssetAmount\":\"the asset and amout being supplied to Aave.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AaveSupplyActionEvent(((uint8,address),uint256))\":{\"notice\":\"This event is emitted when an Aave 'supply' action is executed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveSupplyAction.sol\":\"AaveSupplyAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/IWeth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IWeth {\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xe00c4f29d37fcfa230bcd8a33dab24923b4da32bf943e6e33741c9d8ececc938\",\"license\":\"UNLICENSED\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nlibrary LibActionHelpers {\\n  function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    Asset memory asset = Asset(assetType, assetAddress);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n    ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n    return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2, -1);\\n  }\\n\\n  function singleTokenResult(address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n  }\\n\\n  function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.Native, address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x3017f42ec45c2ee13e81220ac9833f47456f6ee9002fbefd9fdb12055ad7e863\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LibErc20 {\\n    using Address for address;\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // forked from openzeppelin but removed the require, just keeping optional return\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57f8763cdc6339c5b248a4226b8392e36fdec46ad8b84aba2326f6ac1025b06\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0xabc9d9235341ee0c69e8834cd227646063bfb6961f4fb509901537076b0e7589\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibWethUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport './IWeth.sol';\\n\\nlibrary LibWethUtils {\\n  function wrapIfNecessary(AssetAmount memory assetAmount, address wethAddress) internal returns (address) {\\n    if (assetAmount.asset.assetType == AssetType.Native) {\\n      require(wethAddress != address(0), 'weth not supported on this chain');\\n      IWeth(wethAddress).deposit{value: assetAmount.amount}();\\n      return wethAddress;\\n    }\\n    return assetAmount.asset.assetAddress;\\n  }\\n}\\n\",\"keccak256\":\"0x0ba11ae39845c71566504ace7b0c1425562457380c83c061d99d8a74693f87b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/AaveSupplyAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\nimport '@freemarket/step-sdk/contracts/LibActionHelpers.sol';\\nimport './IAaveV3Pool.sol';\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\\nimport '@freemarket/step-sdk/contracts/LibErc20.sol';\\nimport '@freemarket/step-sdk/contracts/LibWethUtils.sol';\\n\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing LibErc20 for IERC20;\\n\\ncontract AaveSupplyAction is IWorkflowStep {\\n  address public immutable poolAddress;\\n  address public immutable wethAddress;\\n\\n  /// @notice This event is emitted when an Aave 'supply' action is executed.\\n  /// @param inputAssetAmount the asset and amout being supplied to Aave.\\n  event AaveSupplyActionEvent(AssetAmount inputAssetAmount);\\n\\n  constructor(address _aavePoolAddress, address _wethAddress) {\\n    poolAddress = _aavePoolAddress;\\n    wethAddress = _wethAddress;\\n  }\\n\\n  struct Locals {\\n    IERC20 inputToken;\\n    address inputTokenAddress;\\n    IAaveV3Pool pool;\\n    IERC20 aToken;\\n    uint256 aTokenBalanceBefore;\\n    uint256 aTokenBalanceAfter;\\n    ReserveData reserveData;\\n  }\\n\\n  function execute(AssetAmount[] calldata assetAmounts, bytes calldata) public payable returns (WorkflowStepResult memory) {\\n    // validate\\n    require(assetAmounts.length == 1, 'there must be exactly 1 input asset');\\n    // require(assetAmounts[0].asset.assetType == AssetType.ERC20, 'the input asset must be an ERC20');\\n\\n    emit AaveSupplyActionEvent(assetAmounts[0]);\\n    Locals memory locals;\\n\\n\\n\\n\\n    locals.inputTokenAddress = LibWethUtils.wrapIfNecessary(assetAmounts[0], wethAddress);\\n\\n\\n    // approve aave to take the asset\\n    locals.inputToken = IERC20(locals.inputTokenAddress);\\n    locals.inputToken.safeApprove(poolAddress, assetAmounts[0].amount);\\n\\n    // get the aToken\\n    locals.pool = IAaveV3Pool(poolAddress);\\n    locals.reserveData = locals.pool.getReserveData(locals.inputTokenAddress);\\n    locals.aToken = IERC20(locals.reserveData.aTokenAddress);\\n\\n    // take note of the before balance\\n    locals.aTokenBalanceBefore = locals.aToken.balanceOf(address(this));\\n\\n    // invoke supply\\n    locals.pool.supply(locals.inputTokenAddress, assetAmounts[0].amount, address(this), 0);\\n\\n    locals.aTokenBalanceAfter = locals.aToken.balanceOf(address(this));\\n    require(locals.aTokenBalanceAfter > locals.aTokenBalanceBefore, 'aToken balance did not increase');\\n\\n    return\\n      LibStepResultBuilder\\n        .create(1, 1)\\n        .addInputAssetAmount(assetAmounts[0])\\n        .addOutputToken(locals.reserveData.aTokenAddress, locals.aTokenBalanceAfter - locals.aTokenBalanceBefore)\\n        .result;\\n  }\\n}\\n\",\"keccak256\":\"0x87987b28942b8abd39d60874cf376e6602f06e479921c30b8d660f923d683479\",\"license\":\"MIT\"},\"contracts/IAaveV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nstruct ReserveConfigurationMap {\\n  //bit 0-15: LTV\\n  //bit 16-31: Liq. threshold\\n  //bit 32-47: Liq. bonus\\n  //bit 48-55: Decimals\\n  //bit 56: reserve is active\\n  //bit 57: reserve is frozen\\n  //bit 58: borrowing is enabled\\n  //bit 59: stable rate borrowing enabled\\n  //bit 60: asset is paused\\n  //bit 61: borrowing in isolation mode is enabled\\n  //bit 62-63: reserved\\n  //bit 64-79: reserve factor\\n  //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n  //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n  //bit 152-167 liquidation protocol fee\\n  //bit 168-175 eMode category\\n  //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n  //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n  //bit 252-255 unused\\n\\n  uint256 data;\\n}\\n\\nstruct ReserveData {\\n  //stores the reserve configuration\\n  ReserveConfigurationMap configuration;\\n  //the liquidity index. Expressed in ray\\n  uint128 liquidityIndex;\\n  //the current supply rate. Expressed in ray\\n  uint128 currentLiquidityRate;\\n  //variable borrow index. Expressed in ray\\n  uint128 variableBorrowIndex;\\n  //the current variable borrow rate. Expressed in ray\\n  uint128 currentVariableBorrowRate;\\n  //the current stable borrow rate. Expressed in ray\\n  uint128 currentStableBorrowRate;\\n  //timestamp of last update\\n  uint40 lastUpdateTimestamp;\\n  //the id of the reserve. Represents the position in the list of the active reserves\\n  uint16 id;\\n  //aToken address\\n  address aTokenAddress;\\n  //stableDebtToken address\\n  address stableDebtTokenAddress;\\n  //variableDebtToken address\\n  address variableDebtTokenAddress;\\n  //address of the interest rate strategy\\n  address interestRateStrategyAddress;\\n  //the current treasury balance, scaled\\n  uint128 accruedToTreasury;\\n  //the outstanding unbacked aTokens minted through the bridging feature\\n  uint128 unbacked;\\n  //the outstanding debt borrowed against this asset in isolation mode\\n  uint128 isolationModeTotalDebt;\\n}\\n\\n/**\\n * @title IAaveV3Pool\\n * @author FreeMarketProtocol\\n * @notice This is a _partial_ interface with only the supply method used by AaveSupplyAction.\\n */\\ninterface IAaveV3Pool {\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referralCode);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (ReserveData memory);\\n}\\n\",\"keccak256\":\"0xf0ef438e4c74f3f2e3a68dba30e6c161ca149ba804abb7b25a71ad2d8e809feb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200213c3803806200213c833981810160405281019062000037919062000111565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000158565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d982620000ac565b9050919050565b620000eb81620000cc565b8114620000f757600080fd5b50565b6000815190506200010b81620000e0565b92915050565b600080604083850312156200012b576200012a620000a7565b5b60006200013b85828601620000fa565b92505060206200014e85828601620000fa565b9150509250929050565b60805160a051611fab620001916000396000818160e501526101dc01526000818160c10152818161027801526102e10152611fab6000f3fe6080604052600436106100345760003560e01c80631755ff21146100395780634f0e0ef3146100645780637bb26ca71461008f575b600080fd5b34801561004557600080fd5b5061004e6100bf565b60405161005b9190610ff8565b60405180910390f35b34801561007057600080fd5b506100796100e3565b6040516100869190610ff8565b60405180910390f35b6100a960048036038101906100a491906110e2565b610107565b6040516100b691906113b1565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61010f610ce3565b60018585905014610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c90611456565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b98585600081811061018a57610189611476565b5b90506060020160405161019d91906115f0565b60405180910390a16101ad610d11565b610200868660008181106101c4576101c3611476565b5b9050606002018036038101906101da919061173c565b7f0000000000000000000000000000000000000000000000000000000000000000610677565b816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060200151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102df7f0000000000000000000000000000000000000000000000000000000000000000878760008181106102ab576102aa611476565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff1661079a9092919063ffffffff16565b7f0000000000000000000000000000000000000000000000000000000000000000816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166335ea6a7582602001516040518263ffffffff1660e01b81526004016103789190610ff8565b6101e060405180830381865afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba91906119f2565b8160c001819052508060c001516101000151816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104409190610ff8565b602060405180830381865afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104819190611a20565b816080018181525050806040015173ffffffffffffffffffffffffffffffffffffffff1663617ba0378260200151888860008181106104c3576104c2611476565b5b905060600201604001353060006040518563ffffffff1660e01b81526004016104ef9493929190611aa1565b600060405180830381600087803b15801561050957600080fd5b505af115801561051d573d6000803e3d6000fd5b50505050806060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161055e9190610ff8565b602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190611a20565b8160a001818152505080608001518160a00151116105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e990611b32565b60405180910390fd5b6106688160c00151610100015182608001518360a001516106139190611b81565b6106598989600081811061062a57610629611476565b5b905060600201803603810190610640919061173c565b61064b600180610820565b61096590919063ffffffff16565b6109b19092919063ffffffff16565b60400151915050949350505050565b600080600281111561068c5761068b61118f565b5b83600001516000015160028111156106a7576106a661118f565b5b0361078857600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290611c01565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663d0e30db084602001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b5050505050819050610794565b82600001516020015190505b92915050565b61081b8363095ea7b360e01b84846040516024016107b9929190611c21565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a4f565b505050565b610828610dac565b60008367ffffffffffffffff81111561084457610843611621565b5b60405190808252806020026020018201604052801561087d57816020015b61086a610dd3565b8152602001906001900390816108625790505b50905060008367ffffffffffffffff81111561089c5761089b611621565b5b6040519080825280602002602001820160405280156108d557816020015b6108c2610dd3565b8152602001906001900390816108ba5790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b61096d610dac565b8183604001516000015184600001805180919061098990611c4a565b8152508151811061099d5761099c611476565b5b602002602001018190525082905092915050565b6109b9610dac565b60405180604001604052806040518060400160405280600160028111156109e3576109e261118f565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815250815260200183815250846040015160200151856020018051809190610a2690611c4a565b81525081518110610a3a57610a39611476565b5b60200260200101819052508390509392505050565b6000610ab1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b169092919063ffffffff16565b9050600081511115610b115780806020019051810190610ad19190611cca565b610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790611d69565b60405180910390fd5b5b505050565b6060610b258484600085610b2e565b90509392505050565b606082471015610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90611dfb565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b9c9190611e8c565b60006040518083038185875af1925050503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150610bef87838387610bfb565b92505050949350505050565b60608315610c5d576000835103610c5557610c1585610c70565b610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b90611eef565b60405180910390fd5b5b829050610c68565b610c678383610c93565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610ca65781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda9190611f53565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001610da6610df3565b81525090565b60405180606001604052806000815260200160008152602001610dcd610ce3565b81525090565b6040518060400160405280610de6610f62565b8152602001600081525090565b604051806101e00160405280610e07610fa4565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806040016040528060006002811115610f8157610f8061118f565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe282610fb7565b9050919050565b610ff281610fd7565b82525050565b600060208201905061100d6000830184610fe9565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261104c5761104b611027565b5b8235905067ffffffffffffffff8111156110695761106861102c565b5b60208301915083606082028301111561108557611084611031565b5b9250929050565b60008083601f8401126110a2576110a1611027565b5b8235905067ffffffffffffffff8111156110bf576110be61102c565b5b6020830191508360018202830111156110db576110da611031565b5b9250929050565b600080600080604085870312156110fc576110fb61101d565b5b600085013567ffffffffffffffff81111561111a57611119611022565b5b61112687828801611036565b9450945050602085013567ffffffffffffffff81111561114957611148611022565b5b6111558782880161108c565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106111cf576111ce61118f565b5b50565b60008190506111e0826111be565b919050565b60006111f0826111d2565b9050919050565b611200816111e5565b82525050565b61120f81610fd7565b82525050565b60408201600082015161122b60008501826111f7565b50602082015161123e6020850182611206565b50505050565b6000819050919050565b61125781611244565b82525050565b6060820160008201516112736000850182611215565b506020820151611286604085018261124e565b50505050565b6000611298838361125d565b60608301905092915050565b6000602082019050919050565b60006112bc82611163565b6112c6818561116e565b93506112d18361117f565b8060005b838110156113025781516112e9888261128c565b97506112f4836112a4565b9250506001810190506112d5565b5085935050505092915050565b60008160010b9050919050565b6113258161130f565b82525050565b60008160020b9050919050565b6113418161132b565b82525050565b6000608083016000830151848203600086015261136482826112b1565b9150506020830151848203602086015261137e82826112b1565b9150506040830151611393604086018261131c565b5060608301516113a66060860182611338565b508091505092915050565b600060208201905081810360008301526113cb8184611347565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b60006114406023836113d3565b915061144b826113e4565b604082019050919050565b6000602082019050818103600083015261146f81611433565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082905092915050565b600381106114bd57600080fd5b50565b6000813590506114cf816114b0565b92915050565b60006114e460208401846114c0565b905092915050565b6114f581610fd7565b811461150057600080fd5b50565b600081359050611512816114ec565b92915050565b60006115276020840184611503565b905092915050565b6040820161154060008301836114d5565b61154d60008501826111f7565b5061155b6020830183611518565b6115686020850182611206565b50505050565b61157781611244565b811461158257600080fd5b50565b6000813590506115948161156e565b92915050565b60006115a96020840184611585565b905092915050565b606082016115c260008301836114a5565b6115cf600085018261152f565b506115dd604083018361159a565b6115ea604085018261124e565b50505050565b600060608201905061160560008301846115b1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61165982611610565b810181811067ffffffffffffffff8211171561167857611677611621565b5b80604052505050565b600061168b611013565b90506116978282611650565b919050565b6000604082840312156116b2576116b161160b565b5b6116bc6040611681565b905060006116cc848285016114c0565b60008301525060206116e084828501611503565b60208301525092915050565b6000606082840312156117025761170161160b565b5b61170c6040611681565b9050600061171c8482850161169c565b600083015250604061173084828501611585565b60208301525092915050565b6000606082840312156117525761175161101d565b5b6000611760848285016116ec565b91505092915050565b6000815190506117788161156e565b92915050565b6000602082840312156117945761179361160b565b5b61179e6020611681565b905060006117ae84828501611769565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6117df816117ba565b81146117ea57600080fd5b50565b6000815190506117fc816117d6565b92915050565b600064ffffffffff82169050919050565b61181c81611802565b811461182757600080fd5b50565b60008151905061183981611813565b92915050565b600061ffff82169050919050565b6118568161183f565b811461186157600080fd5b50565b6000815190506118738161184d565b92915050565b600081519050611888816114ec565b92915050565b60006101e082840312156118a5576118a461160b565b5b6118b06101e0611681565b905060006118c08482850161177e565b60008301525060206118d4848285016117ed565b60208301525060406118e8848285016117ed565b60408301525060606118fc848285016117ed565b6060830152506080611910848285016117ed565b60808301525060a0611924848285016117ed565b60a08301525060c06119388482850161182a565b60c08301525060e061194c84828501611864565b60e08301525061010061196184828501611879565b6101008301525061012061197784828501611879565b6101208301525061014061198d84828501611879565b610140830152506101606119a384828501611879565b610160830152506101806119b9848285016117ed565b610180830152506101a06119cf848285016117ed565b6101a0830152506101c06119e5848285016117ed565b6101c08301525092915050565b60006101e08284031215611a0957611a0861101d565b5b6000611a178482850161188e565b91505092915050565b600060208284031215611a3657611a3561101d565b5b6000611a4484828501611769565b91505092915050565b611a5681611244565b82525050565b6000819050919050565b6000819050919050565b6000611a8b611a86611a8184611a5c565b611a66565b61183f565b9050919050565b611a9b81611a70565b82525050565b6000608082019050611ab66000830187610fe9565b611ac36020830186611a4d565b611ad06040830185610fe9565b611add6060830184611a92565b95945050505050565b7f61546f6b656e2062616c616e636520646964206e6f7420696e63726561736500600082015250565b6000611b1c601f836113d3565b9150611b2782611ae6565b602082019050919050565b60006020820190508181036000830152611b4b81611b0f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b8c82611244565b9150611b9783611244565b9250828203905081811115611baf57611bae611b52565b5b92915050565b7f77657468206e6f7420737570706f72746564206f6e207468697320636861696e600082015250565b6000611beb6020836113d3565b9150611bf682611bb5565b602082019050919050565b60006020820190508181036000830152611c1a81611bde565b9050919050565b6000604082019050611c366000830185610fe9565b611c436020830184611a4d565b9392505050565b6000611c5582611244565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c8757611c86611b52565b5b600182019050919050565b60008115159050919050565b611ca781611c92565b8114611cb257600080fd5b50565b600081519050611cc481611c9e565b92915050565b600060208284031215611ce057611cdf61101d565b5b6000611cee84828501611cb5565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611d53602a836113d3565b9150611d5e82611cf7565b604082019050919050565b60006020820190508181036000830152611d8281611d46565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611de56026836113d3565b9150611df082611d89565b604082019050919050565b60006020820190508181036000830152611e1481611dd8565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611e4f578082015181840152602081019050611e34565b60008484015250505050565b6000611e6682611e1b565b611e708185611e26565b9350611e80818560208601611e31565b80840191505092915050565b6000611e988284611e5b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611ed9601d836113d3565b9150611ee482611ea3565b602082019050919050565b60006020820190508181036000830152611f0881611ecc565b9050919050565b600081519050919050565b6000611f2582611f0f565b611f2f81856113d3565b9350611f3f818560208601611e31565b611f4881611610565b840191505092915050565b60006020820190508181036000830152611f6d8184611f1a565b90509291505056fea26469706673582212203c02270dcb8ed611c50ad528fa7e5fb61bb432edd50e15403ae02f9daf96b71864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80631755ff21146100395780634f0e0ef3146100645780637bb26ca71461008f575b600080fd5b34801561004557600080fd5b5061004e6100bf565b60405161005b9190610ff8565b60405180910390f35b34801561007057600080fd5b506100796100e3565b6040516100869190610ff8565b60405180910390f35b6100a960048036038101906100a491906110e2565b610107565b6040516100b691906113b1565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61010f610ce3565b60018585905014610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c90611456565b60405180910390fd5b7f46fe748530bbf7d655d836d8ce67684c4e9122a23e9d988ca820b9d8e50958b98585600081811061018a57610189611476565b5b90506060020160405161019d91906115f0565b60405180910390a16101ad610d11565b610200868660008181106101c4576101c3611476565b5b9050606002018036038101906101da919061173c565b7f0000000000000000000000000000000000000000000000000000000000000000610677565b816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060200151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102df7f0000000000000000000000000000000000000000000000000000000000000000878760008181106102ab576102aa611476565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff1661079a9092919063ffffffff16565b7f0000000000000000000000000000000000000000000000000000000000000000816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806040015173ffffffffffffffffffffffffffffffffffffffff166335ea6a7582602001516040518263ffffffff1660e01b81526004016103789190610ff8565b6101e060405180830381865afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba91906119f2565b8160c001819052508060c001516101000151816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104409190610ff8565b602060405180830381865afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104819190611a20565b816080018181525050806040015173ffffffffffffffffffffffffffffffffffffffff1663617ba0378260200151888860008181106104c3576104c2611476565b5b905060600201604001353060006040518563ffffffff1660e01b81526004016104ef9493929190611aa1565b600060405180830381600087803b15801561050957600080fd5b505af115801561051d573d6000803e3d6000fd5b50505050806060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161055e9190610ff8565b602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190611a20565b8160a001818152505080608001518160a00151116105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e990611b32565b60405180910390fd5b6106688160c00151610100015182608001518360a001516106139190611b81565b6106598989600081811061062a57610629611476565b5b905060600201803603810190610640919061173c565b61064b600180610820565b61096590919063ffffffff16565b6109b19092919063ffffffff16565b60400151915050949350505050565b600080600281111561068c5761068b61118f565b5b83600001516000015160028111156106a7576106a661118f565b5b0361078857600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290611c01565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663d0e30db084602001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b5050505050819050610794565b82600001516020015190505b92915050565b61081b8363095ea7b360e01b84846040516024016107b9929190611c21565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a4f565b505050565b610828610dac565b60008367ffffffffffffffff81111561084457610843611621565b5b60405190808252806020026020018201604052801561087d57816020015b61086a610dd3565b8152602001906001900390816108625790505b50905060008367ffffffffffffffff81111561089c5761089b611621565b5b6040519080825280602002602001820160405280156108d557816020015b6108c2610dd3565b8152602001906001900390816108ba5790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b61096d610dac565b8183604001516000015184600001805180919061098990611c4a565b8152508151811061099d5761099c611476565b5b602002602001018190525082905092915050565b6109b9610dac565b60405180604001604052806040518060400160405280600160028111156109e3576109e261118f565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815250815260200183815250846040015160200151856020018051809190610a2690611c4a565b81525081518110610a3a57610a39611476565b5b60200260200101819052508390509392505050565b6000610ab1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b169092919063ffffffff16565b9050600081511115610b115780806020019051810190610ad19190611cca565b610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790611d69565b60405180910390fd5b5b505050565b6060610b258484600085610b2e565b90509392505050565b606082471015610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a90611dfb565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b9c9190611e8c565b60006040518083038185875af1925050503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5091509150610bef87838387610bfb565b92505050949350505050565b60608315610c5d576000835103610c5557610c1585610c70565b610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b90611eef565b60405180910390fd5b5b829050610c68565b610c678383610c93565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610ca65781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda9190611f53565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001610da6610df3565b81525090565b60405180606001604052806000815260200160008152602001610dcd610ce3565b81525090565b6040518060400160405280610de6610f62565b8152602001600081525090565b604051806101e00160405280610e07610fa4565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b604051806040016040528060006002811115610f8157610f8061118f565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe282610fb7565b9050919050565b610ff281610fd7565b82525050565b600060208201905061100d6000830184610fe9565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261104c5761104b611027565b5b8235905067ffffffffffffffff8111156110695761106861102c565b5b60208301915083606082028301111561108557611084611031565b5b9250929050565b60008083601f8401126110a2576110a1611027565b5b8235905067ffffffffffffffff8111156110bf576110be61102c565b5b6020830191508360018202830111156110db576110da611031565b5b9250929050565b600080600080604085870312156110fc576110fb61101d565b5b600085013567ffffffffffffffff81111561111a57611119611022565b5b61112687828801611036565b9450945050602085013567ffffffffffffffff81111561114957611148611022565b5b6111558782880161108c565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106111cf576111ce61118f565b5b50565b60008190506111e0826111be565b919050565b60006111f0826111d2565b9050919050565b611200816111e5565b82525050565b61120f81610fd7565b82525050565b60408201600082015161122b60008501826111f7565b50602082015161123e6020850182611206565b50505050565b6000819050919050565b61125781611244565b82525050565b6060820160008201516112736000850182611215565b506020820151611286604085018261124e565b50505050565b6000611298838361125d565b60608301905092915050565b6000602082019050919050565b60006112bc82611163565b6112c6818561116e565b93506112d18361117f565b8060005b838110156113025781516112e9888261128c565b97506112f4836112a4565b9250506001810190506112d5565b5085935050505092915050565b60008160010b9050919050565b6113258161130f565b82525050565b60008160020b9050919050565b6113418161132b565b82525050565b6000608083016000830151848203600086015261136482826112b1565b9150506020830151848203602086015261137e82826112b1565b9150506040830151611393604086018261131c565b5060608301516113a66060860182611338565b508091505092915050565b600060208201905081810360008301526113cb8184611347565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b60006114406023836113d3565b915061144b826113e4565b604082019050919050565b6000602082019050818103600083015261146f81611433565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082905092915050565b600381106114bd57600080fd5b50565b6000813590506114cf816114b0565b92915050565b60006114e460208401846114c0565b905092915050565b6114f581610fd7565b811461150057600080fd5b50565b600081359050611512816114ec565b92915050565b60006115276020840184611503565b905092915050565b6040820161154060008301836114d5565b61154d60008501826111f7565b5061155b6020830183611518565b6115686020850182611206565b50505050565b61157781611244565b811461158257600080fd5b50565b6000813590506115948161156e565b92915050565b60006115a96020840184611585565b905092915050565b606082016115c260008301836114a5565b6115cf600085018261152f565b506115dd604083018361159a565b6115ea604085018261124e565b50505050565b600060608201905061160560008301846115b1565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61165982611610565b810181811067ffffffffffffffff8211171561167857611677611621565b5b80604052505050565b600061168b611013565b90506116978282611650565b919050565b6000604082840312156116b2576116b161160b565b5b6116bc6040611681565b905060006116cc848285016114c0565b60008301525060206116e084828501611503565b60208301525092915050565b6000606082840312156117025761170161160b565b5b61170c6040611681565b9050600061171c8482850161169c565b600083015250604061173084828501611585565b60208301525092915050565b6000606082840312156117525761175161101d565b5b6000611760848285016116ec565b91505092915050565b6000815190506117788161156e565b92915050565b6000602082840312156117945761179361160b565b5b61179e6020611681565b905060006117ae84828501611769565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6117df816117ba565b81146117ea57600080fd5b50565b6000815190506117fc816117d6565b92915050565b600064ffffffffff82169050919050565b61181c81611802565b811461182757600080fd5b50565b60008151905061183981611813565b92915050565b600061ffff82169050919050565b6118568161183f565b811461186157600080fd5b50565b6000815190506118738161184d565b92915050565b600081519050611888816114ec565b92915050565b60006101e082840312156118a5576118a461160b565b5b6118b06101e0611681565b905060006118c08482850161177e565b60008301525060206118d4848285016117ed565b60208301525060406118e8848285016117ed565b60408301525060606118fc848285016117ed565b6060830152506080611910848285016117ed565b60808301525060a0611924848285016117ed565b60a08301525060c06119388482850161182a565b60c08301525060e061194c84828501611864565b60e08301525061010061196184828501611879565b6101008301525061012061197784828501611879565b6101208301525061014061198d84828501611879565b610140830152506101606119a384828501611879565b610160830152506101806119b9848285016117ed565b610180830152506101a06119cf848285016117ed565b6101a0830152506101c06119e5848285016117ed565b6101c08301525092915050565b60006101e08284031215611a0957611a0861101d565b5b6000611a178482850161188e565b91505092915050565b600060208284031215611a3657611a3561101d565b5b6000611a4484828501611769565b91505092915050565b611a5681611244565b82525050565b6000819050919050565b6000819050919050565b6000611a8b611a86611a8184611a5c565b611a66565b61183f565b9050919050565b611a9b81611a70565b82525050565b6000608082019050611ab66000830187610fe9565b611ac36020830186611a4d565b611ad06040830185610fe9565b611add6060830184611a92565b95945050505050565b7f61546f6b656e2062616c616e636520646964206e6f7420696e63726561736500600082015250565b6000611b1c601f836113d3565b9150611b2782611ae6565b602082019050919050565b60006020820190508181036000830152611b4b81611b0f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b8c82611244565b9150611b9783611244565b9250828203905081811115611baf57611bae611b52565b5b92915050565b7f77657468206e6f7420737570706f72746564206f6e207468697320636861696e600082015250565b6000611beb6020836113d3565b9150611bf682611bb5565b602082019050919050565b60006020820190508181036000830152611c1a81611bde565b9050919050565b6000604082019050611c366000830185610fe9565b611c436020830184611a4d565b9392505050565b6000611c5582611244565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c8757611c86611b52565b5b600182019050919050565b60008115159050919050565b611ca781611c92565b8114611cb257600080fd5b50565b600081519050611cc481611c9e565b92915050565b600060208284031215611ce057611cdf61101d565b5b6000611cee84828501611cb5565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611d53602a836113d3565b9150611d5e82611cf7565b604082019050919050565b60006020820190508181036000830152611d8281611d46565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611de56026836113d3565b9150611df082611d89565b604082019050919050565b60006020820190508181036000830152611e1481611dd8565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611e4f578082015181840152602081019050611e34565b60008484015250505050565b6000611e6682611e1b565b611e708185611e26565b9350611e80818560208601611e31565b80840191505092915050565b6000611e988284611e5b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611ed9601d836113d3565b9150611ee482611ea3565b602082019050919050565b60006020820190508181036000830152611f0881611ecc565b9050919050565b600081519050919050565b6000611f2582611f0f565b611f2f81856113d3565b9350611f3f818560208601611e31565b611f4881611610565b840191505092915050565b60006020820190508181036000830152611f6d8184611f1a565b90509291505056fea26469706673582212203c02270dcb8ed611c50ad528fa7e5fb61bb432edd50e15403ae02f9daf96b71864736f6c63430008120033",
  "devdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "params": {
          "inputAssetAmount": "the asset and amout being supplied to Aave."
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "AaveSupplyActionEvent(((uint8,address),uint256))": {
        "notice": "This event is emitted when an Aave 'supply' action is executed."
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}