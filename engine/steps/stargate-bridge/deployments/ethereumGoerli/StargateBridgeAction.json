{
  "address": "0x1Ca714971e3A3856FE6875D92c7E45089BE800d5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_frontDoorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "workflowRunnerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "uint16",
                      "name": "stepTypeId",
                      "type": "uint16"
                    },
                    {
                      "internalType": "address",
                      "name": "stepAddress",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bool",
                          "name": "sourceIsCaller",
                          "type": "bool"
                        },
                        {
                          "internalType": "bool",
                          "name": "amountIsPercent",
                          "type": "bool"
                        },
                        {
                          "components": [
                            {
                              "internalType": "enum AssetType",
                              "name": "assetType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "address",
                              "name": "assetAddress",
                              "type": "address"
                            }
                          ],
                          "internalType": "struct Asset",
                          "name": "asset",
                          "type": "tuple"
                        },
                        {
                          "internalType": "uint256",
                          "name": "amount",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct WorkflowStepInputAsset[]",
                      "name": "inputAssets",
                      "type": "tuple[]"
                    },
                    {
                      "internalType": "bytes",
                      "name": "argData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "int16",
                      "name": "nextStepIndex",
                      "type": "int16"
                    }
                  ],
                  "internalType": "struct WorkflowStep[]",
                  "name": "steps",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Workflow",
              "name": "workflow",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct BridgePayload",
          "name": "bridgePayload",
          "type": "tuple"
        }
      ],
      "name": "SgReceiveCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstActionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcPoolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstPoolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstGasForCall",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstNativeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "continuationWorkflow",
          "type": "bytes"
        }
      ],
      "name": "StargateBridgeParamsEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "bridgeName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct AssetAmount[]",
          "name": "expectedAssets",
          "type": "tuple[]"
        }
      ],
      "name": "WorkflowBridged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "argData",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frontDoorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sgReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x69e50f2c4210ade2b408d0fae006a49d631ead979649027cee63ba2ccb45c566",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x1Ca714971e3A3856FE6875D92c7E45089BE800d5",
    "transactionIndex": 25,
    "gasUsed": "2690036",
    "logsBloom": "0x
    "blockHash": "0x413bbeeb9439138b0c17b42a5aa7ca37717e05bc7a1afe67138712b561d5e1d9",
    "transactionHash": "0x69e50f2c4210ade2b408d0fae006a49d631ead979649027cee63ba2ccb45c566",
    "logs": [],
    "blockNumber": 9127900,
    "cumulativeGasUsed": "7146973",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfE3d6A2a8d053098bABe41CBa0e95D45E28FE741",
    "0x7612aE2a34E5A363E137De748801FB4c86499152"
  ],
  "numDeployments": 2,
  "solcInputHash": "a16d1d130fbc8decfb62d80090c5d326",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frontDoorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"workflowRunnerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"stepTypeId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"stepAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"sourceIsCaller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"amountIsPercent\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct WorkflowStepInputAsset[]\",\"name\":\"inputAssets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Workflow\",\"name\":\"workflow\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct BridgePayload\",\"name\":\"bridgePayload\",\"type\":\"tuple\"}],\"name\":\"SgReceiveCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstActionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"continuationWorkflow\",\"type\":\"bytes\"}],\"name\":\"StargateBridgeParamsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bridgeName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct AssetAmount[]\",\"name\":\"expectedAssets\",\"type\":\"tuple[]\"}],\"name\":\"WorkflowBridged\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frontDoorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"SgReceiveCalled(address,uint256,(address,uint256,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[])))\":{\"params\":{\"bridgePayload\":\"the payload that was sent along with the erc20.\",\"tokenAddress\":\"the address of the erc20 that was transfered from the source chain to this chain.abi\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"SgReceiveCalled(address,uint256,(address,uint256,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[])))\":{\"notice\":\"This event is emitted on the destination chain when Stargate invokes our sgReceive method\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StargateBridgeAction.sol\":\"StargateBridgeAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowRunner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './model/AssetAmount.sol';\\nimport './model/Workflow.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/// @notice An interface defining the entry point to the engine for executing workflows.\\ninterface IWorkflowRunner {\\n  /// @notice Initiate the execution of a workflow.\\n  /// @param workflow The workflow to execute.\\n  function executeWorkflow(Workflow calldata workflow) external payable;\\n\\n  /// @notice Continue a workflow that started on a different chain.\\n  /// @notice This is not callable by 3rd parties, only approved bridge integrations call this method.\\n  function continueWorkflow(\\n    address userAddress,\\n    uint256 nonce,\\n    Workflow memory workflow,\\n    AssetAmount[] memory startingAssets\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xef6461c7c07007e97af766fc8d2e338c457d13faf0f88d495ffcd39d232d6749\",\"license\":\"MIT\"},\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/BridgePayload.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './Workflow.sol';\\n\\n// The payload passed form the source chain to the destination chains to continue a multi-chain workflow\\nstruct BridgePayload {\\n  // the end user's address on the destination chain\\n  address userAddress;\\n  // a (statistically) unique id to correlate the sending chain's workflow segment with the target chain's workflow segment\\n  uint256 nonce;\\n  // the 'continuation' workflow that executes on the target chain\\n  Workflow workflow;\\n}\\n\",\"keccak256\":\"0xac79004ae00205b53dcc3ee6b39f767d7705992d91ee9c618c78987d90f4b720\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Workflow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './WorkflowStep.sol';\\n\\n// The main workflow data structure.\\nstruct Workflow {\\n  // The address of the WorkflowRunner contract, allowing the caller to specify an older version of the runner.\\n  // If this is the zero address, the most current version of the runner will be used.\\n  // If a non-zero address is specified, it must be a whitelisted address of a previous WorkflowRunner contract.\\n  address workflowRunnerAddress;\\n  // The nodes in the directed graph of steps.\\n  // The start step is defined to be at index 0.\\n  // The 'edges' in the graph are defined within each WorkflowStep,\\n  // but can be overriden in the return value of a step.\\n  WorkflowStep[] steps;\\n}\\n\",\"keccak256\":\"0x072a08c653c65ca63534905aabbffe989c8749cefb2ef7d8cd9c12e0d92094af\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./WorkflowStepInputAsset.sol\\\";\\n\\n// Parameters for a workflow step\\nstruct WorkflowStep {\\n    // The logical identifer of the step (e.g., 10 represents WrapEtherStep).\\n    uint16 stepTypeId;\\n    // The contract address of a specific version of the action.\\n    // Individual step contracts may be upgraded over time, and this allows\\n    // workflows 'freeze' the version of contract for this step\\n    // A value of address(0) means use the latest and greatest version  of\\n    // this step based only on stepTypeId.\\n    address stepAddress;\\n    // The input assets to this step.\\n    WorkflowStepInputAsset[] inputAssets;\\n    // Additional step-specific parameters for this step, typically serialized in standard abi encoding.\\n    bytes argData;\\n    // The index of the next step in the directed graph of steps. (see the Workflow.steps array)\\n    int16 nextStepIndex;\\n}\\n\",\"keccak256\":\"0x6441da101e655b2593b54896d8698dad0efe3458e2ec5a28db65f264913d12c0\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepInputAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\n// an input asset to a WorkflowStep\\nstruct WorkflowStepInputAsset {\\n  // if true, the source of the asset is the caller of the workflow, otherwise it is the output of some previous step\\n  bool sourceIsCaller;\\n  // if true 'amount' is treated as a percent, with 4 decimals of precision (1000000 represents 100%)\\n  bool amountIsPercent;\\n  // the input asset\\n  Asset asset;\\n  // the amount of the input asset\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x2a478c09e1deb0268eba6ba5f3721d2e2a4b666b9f0735cfa0735dc9ebe70c4b\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nlibrary LibActionHelpers {\\n  function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    Asset memory asset = Asset(assetType, assetAddress);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n    ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n    return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2, -1);\\n  }\\n\\n  function singleTokenResult(address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n  }\\n\\n  function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.Native, address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x3017f42ec45c2ee13e81220ac9833f47456f6ee9002fbefd9fdb12055ad7e863\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0xabc9d9235341ee0c69e8834cd227646063bfb6961f4fb509901537076b0e7589\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BridgeBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\n\\nabstract contract BridgeBase is IWorkflowStep {\\n  event WorkflowBridged(string bridgeName, uint256 targetChainId, uint256 nonce, AssetAmount[] expectedAssets);\\n}\\n\",\"keccak256\":\"0xa5b8c487f3003c649748c15427a5ff535daf9a75fff5cb02444fce840fb4ef78\",\"license\":\"MIT\"},\"contracts/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\ninterface IStargateReceiver {\\n  function sgReceive(\\n    uint16 _srcChainId, // the remote chainId sending the tokens\\n    bytes memory _srcAddress, // the remote Bridge address\\n    uint256 _nonce,\\n    address _token, // the token contract on the local chain\\n    uint256 amountLD, // the qty of local _token contract tokens\\n    bytes memory payload\\n  ) external;\\n}\\n\",\"keccak256\":\"0x26033fad335fad67a88b8f1d3d761b595ff882ba513cf759926d4c2fab2ef4b4\",\"license\":\"BUSL-1.1\"},\"contracts/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.13;\\n\\n// abicoder v2 is enabled by default: https://docs.soliditylang.org/en/v0.8.0/080-breaking-changes.html\\n// pragma abicoder v2;\\n\\ninterface IStargateRouter {\\n  function factory() external view returns (address);\\n\\n  struct lzTxObj {\\n    uint256 dstGasForCall;\\n    uint256 dstNativeAmount;\\n    bytes dstNativeAddr;\\n  }\\n\\n  function addLiquidity(\\n    uint256 _poolId,\\n    uint256 _amountLD,\\n    address _to\\n  ) external;\\n\\n  function swap(\\n    uint16 _dstChainId,\\n    uint256 _srcPoolId,\\n    uint256 _dstPoolId,\\n    address payable _refundAddress,\\n    uint256 _amountLD,\\n    uint256 _minAmountLD,\\n    lzTxObj memory _lzTxParams,\\n    bytes calldata _to,\\n    bytes calldata _payload\\n  ) external payable;\\n\\n  function redeemRemote(\\n    uint16 _dstChainId,\\n    uint256 _srcPoolId,\\n    uint256 _dstPoolId,\\n    address payable _refundAddress,\\n    uint256 _amountLP,\\n    uint256 _minAmountLD,\\n    bytes calldata _to,\\n    lzTxObj memory _lzTxParams\\n  ) external payable;\\n\\n  function instantRedeemLocal(\\n    uint16 _srcPoolId,\\n    uint256 _amountLP,\\n    address _to\\n  ) external returns (uint256);\\n\\n  function redeemLocal(\\n    uint16 _dstChainId,\\n    uint256 _srcPoolId,\\n    uint256 _dstPoolId,\\n    address payable _refundAddress,\\n    uint256 _amountLP,\\n    bytes calldata _to,\\n    lzTxObj memory _lzTxParams\\n  ) external payable;\\n\\n  function sendCredits(\\n    uint16 _dstChainId,\\n    uint256 _srcPoolId,\\n    uint256 _dstPoolId,\\n    address payable _refundAddress\\n  ) external payable;\\n\\n  function quoteLayerZeroFee(\\n    uint16 _dstChainId,\\n    uint8 _functionType,\\n    bytes calldata _toAddress,\\n    bytes calldata _transferAndCallPayload,\\n    lzTxObj memory _lzTxParams\\n  ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xb2cc74a6db000da1443cc79d48c843f57e233a4dfd542bbce3a43748fffae32a\",\"license\":\"BUSL-1.1\"},\"contracts/StargateBridgeAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './BridgeBase.sol';\\nimport '@freemarket/core/contracts/model/Asset.sol';\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport '@freemarket/core/contracts/model/BridgePayload.sol';\\nimport '@freemarket/core/contracts/IWorkflowRunner.sol';\\nimport '@freemarket/step-sdk/contracts/LibActionHelpers.sol';\\nimport './IStargateRouter.sol';\\nimport './IStargateReceiver.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\n\\n// StargateBridgeAction specific arguments\\nstruct StargateBridgeActionArgs {\\n  //  addr of the StargateSwapAction on the target chain.\\n  address dstActionAddress;\\n  // addr of the user (caller on the source chain)\\n  address dstUserAddress;\\n  // stargate destination chain\\n  uint16 dstChainId;\\n  // stargate source pool (implies source asset)\\n  uint256 srcPoolId;\\n  // stargate destination pool (implies destination asset)\\n  uint256 dstPoolId;\\n  // gas to execute workflow continuation on destination chain\\n  uint256 dstGasForCall;\\n  // amount of native asset to send to dstUserAddress\\n  uint256 dstNativeAmount;\\n  // minimum amount of output asset (else the tx on the source chain will revert)\\n  uint256 minAmountOut;\\n  // if true, minAmountOut passed to stargate\\n  bool minAmountOutIsPercent;\\n  // the abi-encoded workflow that will execute on the destination chain\\n  bytes continuationWorkflow;\\n  // the value used to correlate the source chain transaction with the target chain transaction\\n  uint256 nonce;\\n}\\n\\ncontract StargateBridgeAction is BridgeBase, IStargateReceiver {\\n  address public immutable frontDoorAddress;\\n  address public immutable stargateRouterAddress;\\n\\n  /// @notice This event is emitted on the destination chain when Stargate invokes our sgReceive method\\n  /// @param tokenAddress the address of the erc20 that was transfered from the source chain to this chain.abi\\n  /// @param bridgePayload the payload that was sent along with the erc20.\\n  event SgReceiveCalled(address tokenAddress, uint256 amount, BridgePayload bridgePayload);\\n\\n  event StargateBridgeParamsEvent(\\n    uint256 nativeAmount,\\n    uint256 assetAmount,\\n    address dstActionAddress,\\n    uint16 dstChainId,\\n    uint256 srcPoolId,\\n    uint256 dstPoolId,\\n    uint256 dstGasForCall,\\n    uint256 dstNativeAmount,\\n    uint256 minAmountOut,\\n    bytes continuationWorkflow\\n  );\\n\\n  constructor(address _frontDoorAddress, address _stargateRouterAddress) {\\n    frontDoorAddress = _frontDoorAddress;\\n    stargateRouterAddress = _stargateRouterAddress;\\n  }\\n\\n  //  need to gather things up into a struct to prevent 'Stack too deep'\\n  struct Locals {\\n    uint256 lengthPrefix;\\n    StargateBridgeActionArgs args;\\n    bytes dstActionAddressEncoded;\\n    uint256 minAmountOut;\\n    AssetAmount nativeInputAsset;\\n    AssetAmount erc20InputAsset;\\n  }\\n\\n  function execute(AssetAmount[] calldata inputAssetAmounts, bytes calldata argData) public payable returns (WorkflowStepResult memory) {\\n    Locals memory locals;\\n    require(inputAssetAmounts.length == 2, 'there must be 2 input assets');\\n    if (inputAssetAmounts[0].asset.assetType == AssetType.Native) {\\n      require(inputAssetAmounts[1].asset.assetType == AssetType.ERC20, 'one input asset must be an ERC20');\\n      locals.nativeInputAsset = inputAssetAmounts[0];\\n      locals.erc20InputAsset = inputAssetAmounts[1];\\n    } else if (inputAssetAmounts[1].asset.assetType == AssetType.Native) {\\n      require(inputAssetAmounts[0].asset.assetType == AssetType.ERC20, 'one input asset must be an ERC20');\\n      locals.nativeInputAsset = inputAssetAmounts[1];\\n      locals.erc20InputAsset = inputAssetAmounts[0];\\n    } else {\\n      revert('one input asset must be native');\\n    }\\n    require(\\n      inputAssetAmounts[0].asset.assetType == AssetType.ERC20 || inputAssetAmounts[0].asset.assetType == AssetType.Native,\\n      'the input asset must be an ERC20 or Native'\\n    );\\n\\n    // approve sg to take the token\\n    if (inputAssetAmounts[0].asset.assetType == AssetType.ERC20) {\\n      approveErc20(inputAssetAmounts[0].asset.assetAddress, inputAssetAmounts[0].amount);\\n    }\\n\\n    locals.args = abi.decode(argData, (StargateBridgeActionArgs));\\n\\n    // address payable refundAddress = payable(msg.sender);\\n    locals.dstActionAddressEncoded = abi.encodePacked(locals.args.dstActionAddress);\\n    if (locals.args.minAmountOutIsPercent) {\\n      locals.minAmountOut = (inputAssetAmounts[0].amount * locals.args.minAmountOut) / 100_000;\\n    } else {\\n      locals.minAmountOut = locals.args.minAmountOut;\\n    }\\n\\n    emit StargateBridgeParamsEvent(\\n      locals.nativeInputAsset.amount, // native amount\\n      locals.erc20InputAsset.amount, // token amount\\n      locals.args.dstActionAddress, // dest addr for money and sgReceive\\n      locals.args.dstChainId,\\n      locals.args.srcPoolId,\\n      locals.args.dstPoolId,\\n      locals.args.dstGasForCall,\\n      locals.args.dstNativeAmount,\\n      locals.minAmountOut,\\n      locals.args.continuationWorkflow\\n    );\\n\\n    IStargateRouter(stargateRouterAddress).swap{value: locals.nativeInputAsset.amount}(\\n      locals.args.dstChainId,\\n      locals.args.srcPoolId,\\n      locals.args.dstPoolId,\\n      payable(msg.sender), // refundAddreess\\n      locals.erc20InputAsset.amount,\\n      locals.minAmountOut,\\n      IStargateRouter.lzTxObj(locals.args.dstGasForCall, locals.args.dstNativeAmount, abi.encodePacked(locals.args.dstUserAddress)),\\n      locals.dstActionAddressEncoded,\\n      locals.args.continuationWorkflow\\n    );\\n    if (locals.args.continuationWorkflow.length > 0) {\\n      AssetAmount[] memory expectedAssets = new AssetAmount[](1);\\n      expectedAssets[0] = locals.erc20InputAsset;\\n      emit WorkflowBridged('Stargate', locals.args.dstChainId, locals.args.nonce, expectedAssets);\\n    }\\n\\n    return WorkflowStepResult(inputAssetAmounts, new AssetAmount[](0), -2, -1);\\n  }\\n\\n  function approveErc20(address tokenAddress, uint256 amount) internal {\\n    IERC20 inputToken = IERC20(tokenAddress);\\n    inputToken.approve(stargateRouterAddress, amount);\\n  }\\n\\n  function sgReceive(\\n    uint16, // the remote chainId sending the tokens\\n    bytes memory, // the remote Bridge address\\n    uint256, // stargate nonce, use unknown\\n    address tokenAddress, // the token contract on the local chain\\n    uint256 amount, // the qty of local token contract tokens\\n    bytes memory payload\\n  ) external {\\n    require(msg.sender == stargateRouterAddress, 'only Stargate is permitted to call sgReceive');\\n    BridgePayload memory bridgePayload = abi.decode(payload, (BridgePayload));\\n    emit SgReceiveCalled(tokenAddress, amount, bridgePayload);\\n\\n    IERC20 startingToken = IERC20(tokenAddress);\\n    SafeERC20.safeTransfer(startingToken, frontDoorAddress, amount);\\n\\n    AssetAmount[] memory startingAssets = new AssetAmount[](1);\\n    startingAssets[0] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    IWorkflowRunner runner = IWorkflowRunner(frontDoorAddress);\\n    try runner.continueWorkflow(bridgePayload.userAddress, bridgePayload.nonce, bridgePayload.workflow, startingAssets) {\\n      // if the workflow succeeds, we're done\\n    } catch {\\n      // if the workflow fails, we need to return the tokens to the user\\n      SafeERC20.safeTransfer(startingToken, bridgePayload.userAddress, amount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x80005137afec8d96be3ca8c2ceacc6d7cd4a34e2a9e3669392b484bba21aa875\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80631d2091bf1461004457806350fd910e1461006f5780637bb26ca71461009a578063ab8236f3146100ca575b600080fd5b34801561005057600080fd5b506100596100f3565b604051610066919061128e565b60405180910390f35b34801561007b57600080fd5b50610084610117565b604051610091919061128e565b60405180910390f35b6100b460048036038101906100af9190611378565b61013b565b6040516100c19190611647565b60405180910390f35b3480156100d657600080fd5b506100f160048036038101906100ec919061183c565b610a8b565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6101436110e9565b61014b611117565b60028686905014610191576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101889061195e565b60405180910390fd5b600060028111156101a5576101a4611425565b5b868660008181106101b9576101b861197e565b5b90506060020160000160000160208101906101d491906119d2565b60028111156101e6576101e5611425565b5b036102e957600160028111156101ff576101fe611425565b5b868660018181106102135761021261197e565b5b905060600201600001600001602081019061022e91906119d2565b60028111156102405761023f611425565b5b14610280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027790611a4b565b60405180910390fd5b858560008181106102945761029361197e565b5b9050606002018036038101906102aa9190611b15565b8160800181905250858560018181106102c6576102c561197e565b5b9050606002018036038101906102dc9190611b15565b8160a0018190525061047d565b600060028111156102fd576102fc611425565b5b868660018181106103115761031061197e565b5b905060600201600001600001602081019061032c91906119d2565b600281111561033e5761033d611425565b5b03610441576001600281111561035757610356611425565b5b8686600081811061036b5761036a61197e565b5b905060600201600001600001602081019061038691906119d2565b600281111561039857610397611425565b5b146103d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cf90611a4b565b60405180910390fd5b858560018181106103ec576103eb61197e565b5b9050606002018036038101906104029190611b15565b81608001819052508585600081811061041e5761041d61197e565b5b9050606002018036038101906104349190611b15565b8160a0018190525061047c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047390611b8e565b60405180910390fd5b5b6001600281111561049157610490611425565b5b868660008181106104a5576104a461197e565b5b90506060020160000160000160208101906104c091906119d2565b60028111156104d2576104d1611425565b5b14806105305750600060028111156104ed576104ec611425565b5b868660008181106105015761050061197e565b5b905060600201600001600001602081019061051c91906119d2565b600281111561052e5761052d611425565b5b145b61056f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056690611c20565b60405180910390fd5b6001600281111561058357610582611425565b5b868660008181106105975761059661197e565b5b90506060020160000160000160208101906105b291906119d2565b60028111156105c4576105c3611425565b5b0361061f5761061e868660008181106105e0576105df61197e565b5b90506060020160000160200160208101906105fb9190611c40565b8787600081811061060f5761060e61197e565b5b90506060020160400135610d26565b5b838381019061062e9190611dcd565b816020018190525080602001516000015160405160200161064f9190611e5e565b604051602081830303815290604052816040018190525080602001516101000151156106c257620186a0816020015160e00151878760008181106106965761069561197e565b5b905060600201604001356106aa9190611ea8565b6106b49190611f19565b8160600181815250506106d5565b806020015160e001518160600181815250505b7fc919a44972f2a555d7b70313ba420f3ece86780db879b0e70e766c61ae84ad5c8160800151602001518260a0015160200151836020015160000151846020015160400151856020015160600151866020015160800151876020015160a00151886020015160c0015189606001518a6020015161012001516040516107639a99989796959493929190611fe7565b60405180910390a17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639fbf10fc826080015160200151836020015160400151846020015160600151856020015160800151338760a0015160200151886060015160405180606001604052808b6020015160a0015181526020018b6020015160c0015181526020018b602001516020015160405160200161081a9190611e5e565b6040516020818303038152906040528152508a604001518b6020015161012001516040518b63ffffffff1660e01b815260040161085f99989796959493929190612145565b6000604051808303818588803b15801561087857600080fd5b505af115801561088c573d6000803e3d6000fd5b505050505060008160200151610120015151111561096f576000600167ffffffffffffffff8111156108c1576108c06116b9565b5b6040519080825280602002602001820160405280156108fa57816020015b6108e761115f565b8152602001906001900390816108df5790505b5090508160a00151816000815181106109165761091561197e565b5b60200260200101819052507f70c1cbb5b5f48082c91191449ff272513ca7f5fe6e15effabf5183d43d0e6a518260200151604001518360200151610140015183604051610965939291906122dd565b60405180910390a1505b60405180608001604052808787808060200260200160405190810160405280939291908181526020016000905b828210156109cc578484839050606002018036038101906109bd9190611b15565b8152602001906001019061099c565b50505050508152602001600067ffffffffffffffff8111156109f1576109f06116b9565b5b604051908082528060200260200182016040528015610a2a57816020015b610a1761115f565b815260200190600190039081610a0f5790505b5081526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b815250915050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b10906123a0565b60405180910390fd5b600081806020019051810190610b2f91906128e1565b90507f068d4646b1f017626e64e0ec01e0509c83002732d5599a1b5ccacd00d5a3d4ea848483604051610b6493929190612c18565b60405180910390a16000849050610b9c817f000000000000000000000000000000000000000000000000000000000000000086610dcf565b6000600167ffffffffffffffff811115610bb957610bb86116b9565b5b604051908082528060200260200182016040528015610bf257816020015b610bdf61115f565b815260200190600190039081610bd75790505b5090506040518060400160405280604051806040016040528060016002811115610c1f57610c1e611425565b5b81526020018973ffffffffffffffffffffffffffffffffffffffff1681525081526020018681525081600081518110610c5b57610c5a61197e565b5b602002602001018190525060007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663f92b3d15856000015186602001518760400151866040518563ffffffff1660e01b8152600401610cd69493929190612c93565b600060405180830381600087803b158015610cf057600080fd5b505af1925050508015610d01575060015b610d1957610d1483856000015188610dcf565b610d1a565b5b50505050505050505050565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610d86929190612ce6565b6020604051808303816000875af1158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190612d0f565b50505050565b610e508363a9059cbb60e01b8484604051602401610dee929190612ce6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e55565b505050565b6000610eb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f1c9092919063ffffffff16565b9050600081511115610f175780806020019051810190610ed79190612d0f565b610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d90612dae565b60405180910390fd5b5b505050565b6060610f2b8484600085610f34565b90509392505050565b606082471015610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7090612e40565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fa29190612e9c565b60006040518083038185875af1925050503d8060008114610fdf576040519150601f19603f3d011682016040523d82523d6000602084013e610fe4565b606091505b5091509150610ff587838387611001565b92505050949350505050565b6060831561106357600083510361105b5761101b85611076565b61105a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105190612eff565b60405180910390fd5b5b82905061106e565b61106d8383611099565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156110ac5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e09190612f63565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060c001604052806000815260200161113161117f565b8152602001606081526020016000815260200161114c61115f565b815260200161115961115f565b81525090565b604051806040016040528061117261120b565b8152602001600081525090565b604051806101600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600061ffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160608152602001600081525090565b60405180604001604052806000600281111561122a57611229611425565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112788261124d565b9050919050565b6112888161126d565b82525050565b60006020820190506112a3600083018461127f565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126112e2576112e16112bd565b5b8235905067ffffffffffffffff8111156112ff576112fe6112c2565b5b60208301915083606082028301111561131b5761131a6112c7565b5b9250929050565b60008083601f840112611338576113376112bd565b5b8235905067ffffffffffffffff811115611355576113546112c2565b5b602083019150836001820283011115611371576113706112c7565b5b9250929050565b60008060008060408587031215611392576113916112b3565b5b600085013567ffffffffffffffff8111156113b0576113af6112b8565b5b6113bc878288016112cc565b9450945050602085013567ffffffffffffffff8111156113df576113de6112b8565b5b6113eb87828801611322565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061146557611464611425565b5b50565b600081905061147682611454565b919050565b600061148682611468565b9050919050565b6114968161147b565b82525050565b6114a58161126d565b82525050565b6040820160008201516114c1600085018261148d565b5060208201516114d4602085018261149c565b50505050565b6000819050919050565b6114ed816114da565b82525050565b60608201600082015161150960008501826114ab565b50602082015161151c60408501826114e4565b50505050565b600061152e83836114f3565b60608301905092915050565b6000602082019050919050565b6000611552826113f9565b61155c8185611404565b935061156783611415565b8060005b8381101561159857815161157f8882611522565b975061158a8361153a565b92505060018101905061156b565b5085935050505092915050565b60008160010b9050919050565b6115bb816115a5565b82525050565b60008160020b9050919050565b6115d7816115c1565b82525050565b600060808301600083015184820360008601526115fa8282611547565b915050602083015184820360208601526116148282611547565b915050604083015161162960408601826115b2565b50606083015161163c60608601826115ce565b508091505092915050565b6000602082019050818103600083015261166181846115dd565b905092915050565b600061ffff82169050919050565b61168081611669565b811461168b57600080fd5b50565b60008135905061169d81611677565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116f1826116a8565b810181811067ffffffffffffffff821117156117105761170f6116b9565b5b80604052505050565b60006117236112a9565b905061172f82826116e8565b919050565b600067ffffffffffffffff82111561174f5761174e6116b9565b5b611758826116a8565b9050602081019050919050565b82818337600083830152505050565b600061178761178284611734565b611719565b9050828152602081018484840111156117a3576117a26116a3565b5b6117ae848285611765565b509392505050565b600082601f8301126117cb576117ca6112bd565b5b81356117db848260208601611774565b91505092915050565b6117ed816114da565b81146117f857600080fd5b50565b60008135905061180a816117e4565b92915050565b6118198161126d565b811461182457600080fd5b50565b60008135905061183681611810565b92915050565b60008060008060008060c08789031215611859576118586112b3565b5b600061186789828a0161168e565b965050602087013567ffffffffffffffff811115611888576118876112b8565b5b61189489828a016117b6565b95505060406118a589828a016117fb565b94505060606118b689828a01611827565b93505060806118c789828a016117fb565b92505060a087013567ffffffffffffffff8111156118e8576118e76112b8565b5b6118f489828a016117b6565b9150509295509295509295565b600082825260208201905092915050565b7f7468657265206d757374206265203220696e7075742061737365747300000000600082015250565b6000611948601c83611901565b915061195382611912565b602082019050919050565b600060208201905081810360008301526119778161193b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600381106119ba57600080fd5b50565b6000813590506119cc816119ad565b92915050565b6000602082840312156119e8576119e76112b3565b5b60006119f6848285016119bd565b91505092915050565b7f6f6e6520696e707574206173736574206d75737420626520616e204552433230600082015250565b6000611a35602083611901565b9150611a40826119ff565b602082019050919050565b60006020820190508181036000830152611a6481611a28565b9050919050565b600080fd5b600080fd5b600060408284031215611a8b57611a8a611a6b565b5b611a956040611719565b90506000611aa5848285016119bd565b6000830152506020611ab984828501611827565b60208301525092915050565b600060608284031215611adb57611ada611a6b565b5b611ae56040611719565b90506000611af584828501611a75565b6000830152506040611b09848285016117fb565b60208301525092915050565b600060608284031215611b2b57611b2a6112b3565b5b6000611b3984828501611ac5565b91505092915050565b7f6f6e6520696e707574206173736574206d757374206265206e61746976650000600082015250565b6000611b78601e83611901565b9150611b8382611b42565b602082019050919050565b60006020820190508181036000830152611ba781611b6b565b9050919050565b7f74686520696e707574206173736574206d75737420626520616e20455243323060008201527f206f72204e617469766500000000000000000000000000000000000000000000602082015250565b6000611c0a602a83611901565b9150611c1582611bae565b604082019050919050565b60006020820190508181036000830152611c3981611bfd565b9050919050565b600060208284031215611c5657611c556112b3565b5b6000611c6484828501611827565b91505092915050565b60008115159050919050565b611c8281611c6d565b8114611c8d57600080fd5b50565b600081359050611c9f81611c79565b92915050565b60006101608284031215611cbc57611cbb611a6b565b5b611cc7610160611719565b90506000611cd784828501611827565b6000830152506020611ceb84828501611827565b6020830152506040611cff8482850161168e565b6040830152506060611d13848285016117fb565b6060830152506080611d27848285016117fb565b60808301525060a0611d3b848285016117fb565b60a08301525060c0611d4f848285016117fb565b60c08301525060e0611d63848285016117fb565b60e083015250610100611d7884828501611c90565b6101008301525061012082013567ffffffffffffffff811115611d9e57611d9d611a70565b5b611daa848285016117b6565b61012083015250610140611dc0848285016117fb565b6101408301525092915050565b600060208284031215611de357611de26112b3565b5b600082013567ffffffffffffffff811115611e0157611e006112b8565b5b611e0d84828501611ca5565b91505092915050565b60008160601b9050919050565b6000611e2e82611e16565b9050919050565b6000611e4082611e23565b9050919050565b611e58611e538261126d565b611e35565b82525050565b6000611e6a8284611e47565b60148201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611eb3826114da565b9150611ebe836114da565b9250828202611ecc816114da565b91508282048414831517611ee357611ee2611e79565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f24826114da565b9150611f2f836114da565b925082611f3f57611f3e611eea565b5b828204905092915050565b611f53816114da565b82525050565b611f6281611669565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fa2578082015181840152602081019050611f87565b60008484015250505050565b6000611fb982611f68565b611fc38185611f73565b9350611fd3818560208601611f84565b611fdc816116a8565b840191505092915050565b600061014082019050611ffd600083018d611f4a565b61200a602083018c611f4a565b612017604083018b61127f565b612024606083018a611f59565b6120316080830189611f4a565b61203e60a0830188611f4a565b61204b60c0830187611f4a565b61205860e0830186611f4a565b612066610100830185611f4a565b8181036101208301526120798184611fae565b90509b9a5050505050505050505050565b60006120958261124d565b9050919050565b6120a58161208a565b82525050565b600082825260208201905092915050565b60006120c782611f68565b6120d181856120ab565b93506120e1818560208601611f84565b6120ea816116a8565b840191505092915050565b600060608301600083015161210d60008601826114e4565b50602083015161212060208601826114e4565b506040830151848203604086015261213882826120bc565b9150508091505092915050565b60006101208201905061215b600083018c611f59565b612168602083018b611f4a565b612175604083018a611f4a565b612182606083018961209c565b61218f6080830188611f4a565b61219c60a0830187611f4a565b81810360c08301526121ae81866120f5565b905081810360e08301526121c28185611fae565b90508181036101008301526121d78184611fae565b90509a9950505050505050505050565b7f5374617267617465000000000000000000000000000000000000000000000000600082015250565b600061221d600883611901565b9150612228826121e7565b602082019050919050565b6000819050919050565b600061225861225361224e84611669565b612233565b6114da565b9050919050565b6122688161223d565b82525050565b600082825260208201905092915050565b600061228a826113f9565b612294818561226e565b935061229f83611415565b8060005b838110156122d05781516122b78882611522565b97506122c28361153a565b9250506001810190506122a3565b5085935050505092915050565b600060808201905081810360008301526122f681612210565b9050612305602083018661225f565b6123126040830185611f4a565b8181036060830152612324818461227f565b9050949350505050565b7f6f6e6c79205374617267617465206973207065726d697474656420746f20636160008201527f6c6c207367526563656976650000000000000000000000000000000000000000602082015250565b600061238a602c83611901565b91506123958261232e565b604082019050919050565b600060208201905081810360008301526123b98161237d565b9050919050565b6000815190506123cf81611810565b92915050565b6000815190506123e4816117e4565b92915050565b600067ffffffffffffffff821115612405576124046116b9565b5b602082029050602081019050919050565b60008151905061242581611677565b92915050565b600067ffffffffffffffff821115612446576124456116b9565b5b602082029050602081019050919050565b60008151905061246681611c79565b92915050565b60008151905061247b816119ad565b92915050565b60006040828403121561249757612496611a6b565b5b6124a16040611719565b905060006124b18482850161246c565b60008301525060206124c5848285016123c0565b60208301525092915050565b600060a082840312156124e7576124e6611a6b565b5b6124f16080611719565b9050600061250184828501612457565b600083015250602061251584828501612457565b602083015250604061252984828501612481565b604083015250608061253d848285016123d5565b60608301525092915050565b600061255c6125578461242b565b611719565b90508083825260208201905060a0840283018581111561257f5761257e6112c7565b5b835b818110156125a8578061259488826124d1565b84526020840193505060a081019050612581565b5050509392505050565b600082601f8301126125c7576125c66112bd565b5b81516125d7848260208601612549565b91505092915050565b60006125f36125ee84611734565b611719565b90508281526020810184848401111561260f5761260e6116a3565b5b61261a848285611f84565b509392505050565b600082601f830112612637576126366112bd565b5b81516126478482602086016125e0565b91505092915050565b612659816115a5565b811461266457600080fd5b50565b60008151905061267681612650565b92915050565b600060a0828403121561269257612691611a6b565b5b61269c60a0611719565b905060006126ac84828501612416565b60008301525060206126c0848285016123c0565b602083015250604082015167ffffffffffffffff8111156126e4576126e3611a70565b5b6126f0848285016125b2565b604083015250606082015167ffffffffffffffff81111561271457612713611a70565b5b61272084828501612622565b606083015250608061273484828501612667565b60808301525092915050565b600061275361274e846123ea565b611719565b90508083825260208201905060208402830185811115612776576127756112c7565b5b835b818110156127bd57805167ffffffffffffffff81111561279b5761279a6112bd565b5b8086016127a8898261267c565b85526020850194505050602081019050612778565b5050509392505050565b600082601f8301126127dc576127db6112bd565b5b81516127ec848260208601612740565b91505092915050565b60006040828403121561280b5761280a611a6b565b5b6128156040611719565b90506000612825848285016123c0565b600083015250602082015167ffffffffffffffff81111561284957612848611a70565b5b612855848285016127c7565b60208301525092915050565b60006060828403121561287757612876611a6b565b5b6128816060611719565b90506000612891848285016123c0565b60008301525060206128a5848285016123d5565b602083015250604082015167ffffffffffffffff8111156128c9576128c8611a70565b5b6128d5848285016127f5565b60408301525092915050565b6000602082840312156128f7576128f66112b3565b5b600082015167ffffffffffffffff811115612915576129146112b8565b5b61292184828501612861565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61295f81611669565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61299a81611c6d565b82525050565b60a0820160008201516129b66000850182612991565b5060208201516129c96020850182612991565b5060408201516129dc60408501826114ab565b5060608201516129ef60808501826114e4565b50505050565b6000612a0183836129a0565b60a08301905092915050565b6000602082019050919050565b6000612a2582612965565b612a2f8185612970565b9350612a3a83612981565b8060005b83811015612a6b578151612a5288826129f5565b9750612a5d83612a0d565b925050600181019050612a3e565b5085935050505092915050565b600060a083016000830151612a906000860182612956565b506020830151612aa3602086018261149c565b5060408301518482036040860152612abb8282612a1a565b91505060608301518482036060860152612ad582826120bc565b9150506080830151612aea60808601826115b2565b508091505092915050565b6000612b018383612a78565b905092915050565b6000602082019050919050565b6000612b218261292a565b612b2b8185612935565b935083602082028501612b3d85612946565b8060005b85811015612b795784840389528151612b5a8582612af5565b9450612b6583612b09565b925060208a01995050600181019050612b41565b50829750879550505050505092915050565b6000604083016000830151612ba3600086018261149c565b5060208301518482036020860152612bbb8282612b16565b9150508091505092915050565b6000606083016000830151612be0600086018261149c565b506020830151612bf360208601826114e4565b5060408301518482036040860152612c0b8282612b8b565b9150508091505092915050565b6000606082019050612c2d600083018661127f565b612c3a6020830185611f4a565b8181036040830152612c4c8184612bc8565b9050949350505050565b6000604083016000830151612c6e600086018261149c565b5060208301518482036020860152612c868282612b16565b9150508091505092915050565b6000608082019050612ca8600083018761127f565b612cb56020830186611f4a565b8181036040830152612cc78185612c56565b90508181036060830152612cdb818461227f565b905095945050505050565b6000604082019050612cfb600083018561127f565b612d086020830184611f4a565b9392505050565b600060208284031215612d2557612d246112b3565b5b6000612d3384828501612457565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612d98602a83611901565b9150612da382612d3c565b604082019050919050565b60006020820190508181036000830152612dc781612d8b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612e2a602683611901565b9150612e3582612dce565b604082019050919050565b60006020820190508181036000830152612e5981612e1d565b9050919050565b600081905092915050565b6000612e7682611f68565b612e808185612e60565b9350612e90818560208601611f84565b80840191505092915050565b6000612ea88284612e6b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612ee9601d83611901565b9150612ef482612eb3565b602082019050919050565b60006020820190508181036000830152612f1881612edc565b9050919050565b600081519050919050565b6000612f3582612f1f565b612f3f8185611901565b9350612f4f818560208601611f84565b612f58816116a8565b840191505092915050565b60006020820190508181036000830152612f7d8184612f2a565b90509291505056fea264697066735822122000451e14c0518c0771bbef3a7ebb81d18967d4b9b628c170f4852ed1b2dda94064736f6c63430008120033",
  "devdoc": {
    "events": {
      "SgReceiveCalled(address,uint256,(address,uint256,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[])))": {
        "params": {
          "bridgePayload": "the payload that was sent along with the erc20.",
          "tokenAddress": "the address of the erc20 that was transfered from the source chain to this chain.abi"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "SgReceiveCalled(address,uint256,(address,uint256,(address,(uint16,address,(bool,bool,(uint8,address),uint256)[],bytes,int16)[])))": {
        "notice": "This event is emitted on the destination chain when Stargate invokes our sgReceive method"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}