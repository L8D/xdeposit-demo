{
  "address": "0x6f2E42BB4176e9A7352a8bF8886255Be9F3D2d13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_triCryptoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "enum AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triCryptoAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fca9174ce5a8363dfde38dcfb4a1bca08fbab45b7d85be5fea5f97631358f93",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x6f2E42BB4176e9A7352a8bF8886255Be9F3D2d13",
    "transactionIndex": 0,
    "gasUsed": "464035",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x03251895527b368b7fad2241ce4800b0a4567e2e6684f4d410daf051ae57cad7",
    "transactionHash": "0x4fca9174ce5a8363dfde38dcfb4a1bca08fbab45b7d85be5fea5f97631358f93",
    "logs": [],
    "blockNumber": 16886499,
    "cumulativeGasUsed": "464035",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd51a44d3fae010294c616388b506acda1bfaae46"
  ],
  "numDeployments": 1,
  "solcInputHash": "c36f01cc572dab71710d5f25cf760322",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_triCryptoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triCryptoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CurveTriCrypto2SwapAction.sol\":\"CurveTriCrypto2SwapAction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './model/Asset.sol';\\nimport './model/AssetAmount.sol';\\nimport './model/WorkflowStepResult.sol';\\n\\ninterface IWorkflowStep {\\n  function execute(\\n    // input assets paired with amounts of each\\n    AssetAmount[] calldata inputAssetAmounts,\\n    // expected output assets (amounts not known yet)\\n    Asset[] calldata outputAssets,\\n    // additional arguments specific to this step\\n    bytes calldata data\\n  ) external payable returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0x53b58fac525aec076ad1de6039ba1cb7606d9fb3aca85cf3179d70f203386e16\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetType.sol';\\n\\nstruct Asset {\\n  AssetType assetType;\\n  address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0xac7144606c56f85fa77f79e9241c8763920dc22dde6e1a1d364e23e2aa12774c\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n  Native,\\n  ERC20,\\n  ERC721\\n}\\n\",\"keccak256\":\"0xf00733a4c359c53b8ebcbee41e43df50ce94d1d3d15e799e9b1c8928c0fd94d9\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n}\\n\",\"keccak256\":\"0x313819947033da240f033808e0251cdd091176504d7d0893b6097d8b4697d2a0\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/AssetType.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/WorkflowStepResult.sol\\\";\\n\\nlibrary LibActionHelpers {\\n    function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        Asset memory asset = Asset(assetType, assetAddress);\\n        AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n        ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n        return WorkflowStepResult(ouputAssetAmounts, -1);\\n    }\\n\\n    function singleTokenResult(address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n    }\\n\\n    function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n        return singleAssetResult(AssetType.Native, address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0xbe9f0b2395af24ac9d18eaafd0a104dbb91b936ca43264fda4f937bc9252be69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/CurveTriCrypto2SwapAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct CurveTriCryptoSwapArgs {\\n    uint256 fromIndex;\\n    uint256 toIndex;\\n}\\n\\ncontract CurveTriCrypto2SwapAction is IWorkflowStep {\\n    address public immutable triCryptoAddress;\\n\\n    constructor(address _triCryptoAddress) {\\n        triCryptoAddress = _triCryptoAddress;\\n    }\\n\\n    function execute(AssetAmount[] calldata inputAssetAmounts, Asset[] calldata, bytes calldata)\\n        public\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n        // // validate\\n        // require(inputAssetAmounts.length == 1, \\\"there must be exactly 1 input asset\\\");\\n        // require(inputAssetAmounts[0].asset.assetType == AssetType.ERC20, \\\"the input asset must be an ERC20\\\");\\n        // // require(outputAssets.length == 1, 'there must be exactly 1 output asset when keeping the aToken in the engine');\\n\\n        // emit AaveSupplyActionEvent(inputAssetAmounts[0]);\\n\\n        // // approve aave to take the asset\\n        // IERC20(inputAssetAmounts[0].asset.assetAddress).approve(poolAddress, inputAssetAmounts[0].amount);\\n\\n        // // get the aToken\\n        // IAaveV3Pool pool = IAaveV3Pool(poolAddress);\\n        // ReserveData memory reserveData = pool.getReserveData(inputAssetAmounts[0].asset.assetAddress);\\n        // IERC20 aToken = IERC20(reserveData.aTokenAddress);\\n\\n        // // take note of the before balance\\n        // uint256 aTokenBalanceBefore = aToken.balanceOf(address(this));\\n\\n        // // invoke supply\\n        // pool.supply(inputAssetAmounts[0].asset.assetAddress, inputAssetAmounts[0].amount, address(this), 0);\\n        // uint256 aTokenBalanceAfter = aToken.balanceOf(address(this));\\n        // require(aTokenBalanceAfter > aTokenBalanceBefore, \\\"aToken balance did not increase\\\");\\n\\n        return LibActionHelpers.noOutputAssetsResult();\\n    }\\n}\\n\",\"keccak256\":\"0x1d484765591bc52dacf76be12020802efe3a56d8b0ad6a951d39805ed7289a74\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610877380380610877833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610761610116600039600060a701526107616000f3fe6080604052600436106100295760003560e01c80632b5350131461002e578063cb8e44d71461005e575b600080fd5b61004860048036038101906100439190610396565b610089565b6040516100559190610681565b60405180910390f35b34801561006a57600080fd5b506100736100a5565b60405161008091906106b2565b60405180910390f35b6100916101fc565b6100996100c9565b90509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6100d16101fc565b6100de60008060006100e3565b905090565b6100eb6101fc565b6000604051806040016040528086600281111561010b5761010a610476565b5b81526020018573ffffffffffffffffffffffffffffffffffffffff1681525090506000600167ffffffffffffffff811115610149576101486106cd565b5b60405190808252806020026020018201604052801561018257816020015b61016f610219565b8152602001906001900390816101675790505b509050604051806040016040528083815260200185815250816000815181106101ae576101ad6106fc565b5b602002602001018190525060405180604001604052808281526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60010b815250925050509392505050565b604051806040016040528060608152602001600060010b81525090565b604051806040016040528061022c610239565b8152602001600081525090565b60405180604001604052806000600281111561025857610257610476565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126102aa576102a9610285565b5b8235905067ffffffffffffffff8111156102c7576102c661028a565b5b6020830191508360608202830111156102e3576102e261028f565b5b9250929050565b60008083601f840112610300576102ff610285565b5b8235905067ffffffffffffffff81111561031d5761031c61028a565b5b6020830191508360408202830111156103395761033861028f565b5b9250929050565b60008083601f84011261035657610355610285565b5b8235905067ffffffffffffffff8111156103735761037261028a565b5b60208301915083600182028301111561038f5761038e61028f565b5b9250929050565b600080600080600080606087890312156103b3576103b261027b565b5b600087013567ffffffffffffffff8111156103d1576103d0610280565b5b6103dd89828a01610294565b9650965050602087013567ffffffffffffffff811115610400576103ff610280565b5b61040c89828a016102ea565b9450945050604087013567ffffffffffffffff81111561042f5761042e610280565b5b61043b89828a01610340565b92509250509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106104b6576104b5610476565b5b50565b60008190506104c7826104a5565b919050565b60006104d7826104b9565b9050919050565b6104e7816104cc565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610518826104ed565b9050919050565b6105288161050d565b82525050565b60408201600082015161054460008501826104de565b506020820151610557602085018261051f565b50505050565b6000819050919050565b6105708161055d565b82525050565b60608201600082015161058c600085018261052e565b50602082015161059f6040850182610567565b50505050565b60006105b18383610576565b60608301905092915050565b6000602082019050919050565b60006105d58261044a565b6105df8185610455565b93506105ea83610466565b8060005b8381101561061b57815161060288826105a5565b975061060d836105bd565b9250506001810190506105ee565b5085935050505092915050565b60008160010b9050919050565b61063e81610628565b82525050565b6000604083016000830151848203600086015261066182826105ca565b91505060208301516106766020860182610635565b508091505092915050565b6000602082019050818103600083015261069b8184610644565b905092915050565b6106ac8161050d565b82525050565b60006020820190506106c760008301846106a3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212201a280b2da8e28469c9a2a7f1c89a01b99c8d53ecdf79c8d47ed47778c121947564736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80632b5350131461002e578063cb8e44d71461005e575b600080fd5b61004860048036038101906100439190610396565b610089565b6040516100559190610681565b60405180910390f35b34801561006a57600080fd5b506100736100a5565b60405161008091906106b2565b60405180910390f35b6100916101fc565b6100996100c9565b90509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6100d16101fc565b6100de60008060006100e3565b905090565b6100eb6101fc565b6000604051806040016040528086600281111561010b5761010a610476565b5b81526020018573ffffffffffffffffffffffffffffffffffffffff1681525090506000600167ffffffffffffffff811115610149576101486106cd565b5b60405190808252806020026020018201604052801561018257816020015b61016f610219565b8152602001906001900390816101675790505b509050604051806040016040528083815260200185815250816000815181106101ae576101ad6106fc565b5b602002602001018190525060405180604001604052808281526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60010b815250925050509392505050565b604051806040016040528060608152602001600060010b81525090565b604051806040016040528061022c610239565b8152602001600081525090565b60405180604001604052806000600281111561025857610257610476565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126102aa576102a9610285565b5b8235905067ffffffffffffffff8111156102c7576102c661028a565b5b6020830191508360608202830111156102e3576102e261028f565b5b9250929050565b60008083601f840112610300576102ff610285565b5b8235905067ffffffffffffffff81111561031d5761031c61028a565b5b6020830191508360408202830111156103395761033861028f565b5b9250929050565b60008083601f84011261035657610355610285565b5b8235905067ffffffffffffffff8111156103735761037261028a565b5b60208301915083600182028301111561038f5761038e61028f565b5b9250929050565b600080600080600080606087890312156103b3576103b261027b565b5b600087013567ffffffffffffffff8111156103d1576103d0610280565b5b6103dd89828a01610294565b9650965050602087013567ffffffffffffffff811115610400576103ff610280565b5b61040c89828a016102ea565b9450945050604087013567ffffffffffffffff81111561042f5761042e610280565b5b61043b89828a01610340565b92509250509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106104b6576104b5610476565b5b50565b60008190506104c7826104a5565b919050565b60006104d7826104b9565b9050919050565b6104e7816104cc565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610518826104ed565b9050919050565b6105288161050d565b82525050565b60408201600082015161054460008501826104de565b506020820151610557602085018261051f565b50505050565b6000819050919050565b6105708161055d565b82525050565b60608201600082015161058c600085018261052e565b50602082015161059f6040850182610567565b50505050565b60006105b18383610576565b60608301905092915050565b6000602082019050919050565b60006105d58261044a565b6105df8185610455565b93506105ea83610466565b8060005b8381101561061b57815161060288826105a5565b975061060d836105bd565b9250506001810190506105ee565b5085935050505092915050565b60008160010b9050919050565b61063e81610628565b82525050565b6000604083016000830151848203600086015261066182826105ca565b91505060208301516106766020860182610635565b508091505092915050565b6000602082019050818103600083015261069b8184610644565b905092915050565b6106ac8161050d565b82525050565b60006020820190506106c760008301846106a3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212201a280b2da8e28469c9a2a7f1c89a01b99c8d53ecdf79c8d47ed47778c121947564736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}