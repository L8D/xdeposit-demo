{
  "address": "0xa31F4c0eF2935Af25370D9AE275169CCd9793DA3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogNewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldUpstream",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newUpstream",
          "type": "address"
        }
      ],
      "name": "UpstreamChanged",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "eternalStorageAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpstream",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUserProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUpstream",
          "type": "address"
        }
      ],
      "name": "setUpstream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upstreamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf57251b652301c3c1717dc2cb4a6968cff92c87cabf397f22dcd7c8d016cc126",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa31F4c0eF2935Af25370D9AE275169CCd9793DA3",
    "transactionIndex": 0,
    "gasUsed": "3996680",
    "logsBloom": "0x
    "blockHash": "0xf4ba66071e22966afe57b754e3a19337db1bee65ebce0ee6ff7c05013a62d07f",
    "transactionHash": "0xf57251b652301c3c1717dc2cb4a6968cff92c87cabf397f22dcd7c8d016cc126",
    "logs": [],
    "blockNumber": 16886494,
    "cumulativeGasUsed": "3996680",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "746126b9d022b1de33e7027b6f623556",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldUpstream\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUpstream\",\"type\":\"address\"}],\"name\":\"UpstreamChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"eternalStorageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpstream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUserProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUpstream\",\"type\":\"address\"}],\"name\":\"setUpstream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upstreamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FrontDoor.sol\":\"FrontDoor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key), errorMessage));\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToUintMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/EternalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport '@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\n\\nimport './Ownable.sol';\\n\\ncontract EternalStorage is Ownable {\\n  address internal writer;\\n\\n  modifier onlyWriter() {\\n    require(msg.sender == writer);\\n    _;\\n  }\\n\\n  constructor(address owner, address initialWriter) Ownable(owner) {\\n    writer = initialWriter;\\n  }\\n\\n  event StorageWriterChanged(address oldWriter, address newWriter);\\n\\n  function getWriter() public view returns (address) {\\n    return writer;\\n  }\\n\\n  function setWriter(address newWriter) public onlyOwner {\\n    emit StorageWriterChanged(writer, newWriter);\\n    writer = newWriter;\\n  }\\n\\n  mapping(bytes32 => uint256) uIntStorage;\\n  mapping(bytes32 => string) stringStorage;\\n  mapping(bytes32 => address) addressStorage;\\n  mapping(bytes32 => bytes) bytesStorage;\\n  mapping(bytes32 => bool) boolStorage;\\n  mapping(bytes32 => int256) intStorage;\\n\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n  using EnumerableMap for EnumerableMap.AddressToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n  using EnumerableMap for EnumerableMap.UintToUintMap;\\n  using EnumerableMap for EnumerableMap.Bytes32ToUintMap;\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) enumerableMapUintToAddressMapStorage;\\n  mapping(bytes32 => EnumerableMap.AddressToUintMap) enumerableMapAddressToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToBytes32Map) enumerableMapBytes32ToBytes32MapStorage;\\n  mapping(bytes32 => EnumerableMap.UintToUintMap) enumerableMapUintToUintMapStorage;\\n  mapping(bytes32 => EnumerableMap.Bytes32ToUintMap) enumerableMapBytes32ToUintMapStorage;\\n\\n  // *** Getter Methods ***\\n  function getUint(bytes32 _key) external view returns (uint256) {\\n    return uIntStorage[_key];\\n  }\\n\\n  function getString(bytes32 _key) external view returns (string memory) {\\n    return stringStorage[_key];\\n  }\\n\\n  function getAddress(bytes32 _key) external view returns (address) {\\n    return addressStorage[_key];\\n  }\\n\\n  function getBytes(bytes32 _key) external view returns (bytes memory) {\\n    return bytesStorage[_key];\\n  }\\n\\n  function getBool(bytes32 _key) external view returns (bool) {\\n    return boolStorage[_key];\\n  }\\n\\n  function getInt(bytes32 _key) external view returns (int256) {\\n    return intStorage[_key];\\n  }\\n\\n  // *** Setter Methods ***\\n  function setUint(bytes32 _key, uint256 _value) external onlyWriter {\\n    uIntStorage[_key] = _value;\\n  }\\n\\n  function setString(bytes32 _key, string memory _value) external onlyWriter {\\n    stringStorage[_key] = _value;\\n  }\\n\\n  function setAddress(bytes32 _key, address _value) external {\\n    addressStorage[_key] = _value;\\n  }\\n\\n  function setBytes(bytes32 _key, bytes memory _value) external onlyWriter {\\n    bytesStorage[_key] = _value;\\n  }\\n\\n  function setBool(bytes32 _key, bool _value) external onlyWriter {\\n    boolStorage[_key] = _value;\\n  }\\n\\n  function setInt(bytes32 _key, int256 _value) external onlyWriter {\\n    intStorage[_key] = _value;\\n  }\\n\\n  // *** Delete Methods ***\\n  function deleteUint(bytes32 _key) external onlyWriter {\\n    delete uIntStorage[_key];\\n  }\\n\\n  function deleteString(bytes32 _key) external onlyWriter {\\n    delete stringStorage[_key];\\n  }\\n\\n  function deleteAddress(bytes32 _key) external onlyWriter {\\n    delete addressStorage[_key];\\n  }\\n\\n  function deleteBytes(bytes32 _key) external onlyWriter {\\n    delete bytesStorage[_key];\\n  }\\n\\n  function deleteBool(bytes32 _key) external onlyWriter {\\n    delete boolStorage[_key];\\n  }\\n\\n  function deleteInt(bytes32 _key) external onlyWriter {\\n    delete intStorage[_key];\\n  }\\n\\n  // enumerable get\\n\\n  function getEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToBytes32Map(bytes32 _key1, bytes32 _key2) external view returns (bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapUintToUintMap(bytes32 _key1, uint256 _key2) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  function getEnumerableMapBytes32ToUintMap(bytes32 _key1, bytes32 _key2) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].get(_key2);\\n  }\\n\\n  // enumerable tryGet\\n\\n  function tryGetEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToBytes32Map(bytes32 _key1, bytes32 _key2) external view returns (bool, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapUintToUintMap(bytes32 _key1, uint256 _key2) external view returns (bool, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  function tryGetEnumerableMapBytes32ToUintMap(bytes32 _key1, bytes32 _key2) external view returns (bool, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].tryGet(_key2);\\n  }\\n\\n  // enumerable set\\n\\n  function setEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2, address _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapAddressToUint(bytes32 _key1, address _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToBytes32Map(bytes32 _key1, bytes32 _key2, bytes32 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapUintToUintMap(bytes32 _key1, uint256 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  function setEnumerableMapBytes32ToUintMap(bytes32 _key1, bytes32 _key2, uint256 _value) external onlyWriter returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].set(_key2, _value);\\n  }\\n\\n  // enumerable remove\\n\\n  function removeEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToAddressMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapAddressToUint(bytes32 _key1, address _key2) external onlyWriter {\\n    enumerableMapAddressToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToBytes32Map(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToBytes32MapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapUintToUintMap(bytes32 _key1, uint256 _key2) external onlyWriter {\\n    enumerableMapUintToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  function removeEnumerableMapBytes32ToUintMap(bytes32 _key1, bytes32 _key2) external onlyWriter {\\n    enumerableMapBytes32ToUintMapStorage[_key1].remove(_key2);\\n  }\\n\\n  // enumerable contains\\n\\n  function containsEnumerableMapUintToAddress(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToAddressMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapAddressToUint(bytes32 _key1, address _key2) external view returns (bool) {\\n    return enumerableMapAddressToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToBytes32Map(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapUintToUintMap(bytes32 _key1, uint256 _key2) external view returns (bool) {\\n    return enumerableMapUintToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  function containsEnumerableMapBytes32ToUintMap(bytes32 _key1, bytes32 _key2) external view returns (bool) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].contains(_key2);\\n  }\\n\\n  // enumerable length\\n\\n  function lengthEnumerableMapUintToAddress(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToAddressMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapAddressToUint(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToBytes32Map(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapUintToUintMap(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].length();\\n  }\\n\\n  function lengthEnumerableMapBytes32ToUintMap(bytes32 _key1) external view returns (uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].length();\\n  }\\n\\n  // enumerable at\\n\\n  function atEnumerableMapUintToAddress(bytes32 _key1, uint256 _index) external view returns (uint256, address) {\\n    return enumerableMapUintToAddressMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapAddressToUint(bytes32 _key1, uint256 _index) external view returns (address, uint256) {\\n    return enumerableMapAddressToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToBytes32Map(bytes32 _key1, uint256 _index) external view returns (bytes32, bytes32) {\\n    return enumerableMapBytes32ToBytes32MapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapUintToUintMap(bytes32 _key1, uint256 _index) external view returns (uint256, uint256) {\\n    return enumerableMapUintToUintMapStorage[_key1].at(_index);\\n  }\\n\\n  function atEnumerableMapBytes32ToUintMap(bytes32 _key1, uint256 _index) external view returns (bytes32, uint256) {\\n    return enumerableMapBytes32ToUintMapStorage[_key1].at(_index);\\n  }\\n}\\n\",\"keccak256\":\"0xa73c121179eeea2a29855a69e806fb8fce4e8adcb94004f8caf9fb121fab7840\",\"license\":\"MIT\"},\"contracts/FreeMarketBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './Ownable.sol';\\n\\ncontract FreeMarketBase is Ownable {\\n  // TODO create getters\\n  address public eternalStorageAddress;\\n  address public upstreamAddress;\\n  bool public isUserProxy;\\n\\n  constructor(\\n    address owner,\\n    address eternalStorage,\\n    address upstream,\\n    bool userProxy\\n  ) Ownable(owner) {\\n    eternalStorageAddress = eternalStorage;\\n    upstreamAddress = upstream;\\n    isUserProxy = userProxy;\\n  }\\n}\\n\",\"keccak256\":\"0xeeac9b86b1e934d1a84316e3f006abb32375088cef75fe0a56e74e2e1e38b87e\",\"license\":\"MIT\"},\"contracts/FrontDoor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './EternalStorage.sol';\\nimport './Proxy.sol';\\nimport './LibStorageWriter.sol';\\n\\ncontract FrontDoor is Proxy {\\n  constructor() Proxy(msg.sender, address(new EternalStorage(msg.sender, address(this))), address(0x0), false) {\\n    bytes32 key = keccak256(abi.encodePacked('frontDoor'));\\n    StorageWriter.setAddress(eternalStorageAddress, key, address(this));\\n  }\\n\\n  event UpstreamChanged(address oldUpstream, address newUpstream);\\n\\n  function setUpstream(address newUpstream) public onlyOwner {\\n    address oldUpstream = upstreamAddress;\\n    upstreamAddress = newUpstream;\\n    emit UpstreamChanged(oldUpstream, newUpstream);\\n  }\\n}\\n\",\"keccak256\":\"0x9fa3a6624445500fb7e2d60dd76d8387ea3d26f70970b16753877cdd298b8d22\",\"license\":\"MIT\"},\"contracts/IHasUpstream.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IHasUpstream {\\n  function getUpstream() external view returns (address);\\n}\\n\",\"keccak256\":\"0xef83d78a64e9c3cbd2b9238523af2a9a03abc8c42890e57a1ffeefddd7999be3\",\"license\":\"MIT\"},\"contracts/LibStorageWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary StorageWriter {\\n  // *** Setter Methods ***\\n  function setUint(\\n    address storageAddr,\\n    bytes32 key,\\n    uint256 value\\n  ) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setUint(bytes32,uint256)', key, value));\\n    require(success, string(returnData));\\n  }\\n\\n  function setString(\\n    address storageAddr,\\n    bytes32 key,\\n    string memory value\\n  ) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(\\n      abi.encodeWithSignature('setString(bytes32,string memory)', key, value)\\n    );\\n    require(success, string(returnData));\\n  }\\n\\n  function setAddress(\\n    address storageAddr,\\n    bytes32 key,\\n    address value\\n  ) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setAddress(bytes32,address)', key, value));\\n    require(success, string(returnData));\\n  }\\n\\n  function setBytes(\\n    address storageAddr,\\n    bytes32 key,\\n    bytes memory value\\n  ) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(\\n      abi.encodeWithSignature('setBytes(bytes32,bytes memory)', key, value)\\n    );\\n    require(success, string(returnData));\\n  }\\n\\n  function setBool(\\n    address storageAddr,\\n    bytes32 key,\\n    bool value\\n  ) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setBool(bytes32,bool)', key, value));\\n    require(success, string(returnData));\\n  }\\n\\n  function setInt(\\n    address storageAddr,\\n    bytes32 key,\\n    int256 value\\n  ) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setInt(bytes32,int256)', key, value));\\n    require(success, string(returnData));\\n  }\\n\\n  // *** Delete Methods ***\\n  function deleteUint(address storageAddr, bytes32 key) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('deleteUint(bytes32,string memory)', key));\\n    require(success, string(returnData));\\n  }\\n\\n  function deleteString(address storageAddr, bytes32 key) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setString(bytes32,string memory)', key));\\n    require(success, string(returnData));\\n  }\\n\\n  function deleteAddress(address storageAddr, bytes32 key) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setString(bytes32,string memory)', key));\\n    require(success, string(returnData));\\n  }\\n\\n  function deleteBytes(address storageAddr, bytes32 key) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setString(bytes32,string memory)', key));\\n    require(success, string(returnData));\\n  }\\n\\n  function deleteBool(address storageAddr, bytes32 key) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setString(bytes32,string memory)', key));\\n    require(success, string(returnData));\\n  }\\n\\n  function deleteInt(address storageAddr, bytes32 key) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(abi.encodeWithSignature('setString(bytes32,string memory)', key));\\n    require(success, string(returnData));\\n  }\\n\\n  function setStepAddress(\\n    address storageAddr,\\n    uint16 stepId,\\n    address stepAddress\\n  ) internal {\\n    (bool success, bytes memory returnData) = storageAddr.delegatecall(\\n      abi.encodeWithSignature('setStepAddress(uint16,address)', stepId, stepAddress)\\n    );\\n    require(success, string(returnData));\\n  }\\n}\\n\",\"keccak256\":\"0x5f809d4acae38486847941461b22522ea64400abab083f7ca6249f79d37df49a\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ncontract Ownable {\\n  address payable public owner;\\n\\n  constructor(address initialOwner) {\\n    owner = payable(initialOwner);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  event LogNewOwner(address sender, address newOwner);\\n\\n  function setOwner(address payable newOwner) external onlyOwner {\\n    require(newOwner != address(0));\\n    owner = newOwner;\\n    emit LogNewOwner(msg.sender, newOwner);\\n  }\\n}\\n\",\"keccak256\":\"0xa798ec89af451652edfa77d05689d3330f503ed4bf9e01d6620d6b2c6a617544\",\"license\":\"MIT\"},\"contracts/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport './IHasUpstream.sol';\\nimport './FreeMarketBase.sol';\\n\\ncontract Proxy is FreeMarketBase, IHasUpstream {\\n  constructor(\\n    address owner,\\n    address storageAddress,\\n    address upstream,\\n    bool userProxy\\n  ) FreeMarketBase(owner, storageAddress, upstream, userProxy) {}\\n\\n  function getUpstream() external view virtual returns (address) {\\n    return upstreamAddress;\\n  }\\n\\n  /// @dev this forwards all calls generically to upstream, only the owner can invoke this\\n  fallback() external payable {\\n    // enforce owner authz in upstream\\n    // require(owner == msg.sender);\\n    _delegate(this.getUpstream());\\n  }\\n\\n  /// @dev this allows this contract to receive ETH\\n  receive() external payable {\\n    // noop\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * This is a low level function that doesn't return to its internal call site.\\n   * It will return to the external caller whatever the implementation returns.\\n   */\\n  function _delegate(address upstr) internal {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), upstr, 0, calldatasize(), 0, 0)\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n      // let ptr := mload(0x40)\\n      // calldatacopy(ptr, 0, calldatasize())\\n      // let result := delegatecall(gas(), implementation, ptr, calldatasize(), 0, 0)\\n      // let size := returndatasize()\\n      // returndatacopy(ptr, 0, size)\\n      // switch result\\n      // case 0 {\\n      //   revert(ptr, size)\\n      // }\\n      // default {\\n      //   return(ptr, size)\\n      // }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6e3297682417054f05fa8b9fd35868cc375d466f2652a884262211c15e0b1688\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c806356dececb1161004e57806356dececb14610173578063742ec6661461019e5780638da5cb5b146101c7578063ff05c2a8146101f25761007b565b806313af4035146100f457806332b56aaf1461011d578063384782fe146101485761007b565b3661007b57005b6100f23073ffffffffffffffffffffffffffffffffffffffff166356dececb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ed91906106a4565b61021d565b005b34801561010057600080fd5b5061011b6004803603810190610116919061070f565b610243565b005b34801561012957600080fd5b50610132610350565b60405161013f919061074b565b60405180910390f35b34801561015457600080fd5b5061015d610376565b60405161016a919061074b565b60405180910390f35b34801561017f57600080fd5b5061018861039c565b604051610195919061074b565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c0919061077b565b6103c6565b005b3480156101d357600080fd5b506101dc6104c3565b6040516101e991906107b7565b60405180910390f35b3480156101fe57600080fd5b506102076104e7565b60405161021491906107ed565b60405180910390f35b3660008037600080366000845af43d6000803e806000811461023e573d6000f35b3d6000fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102d457600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd93382604051610345929190610867565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041e57600080fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f44046d68f1959a9a0df452473181c07837a948176bf1a8a05c24b69c58c806c581836040516104b7929190610890565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff1681565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516024016105279291906108d2565b6040516020818303038152906040527fca446dd9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105b1919061096c565b600060405180830381855af49150503d80600081146105ec576040519150601f19603f3d011682016040523d82523d6000602084013e6105f1565b606091505b5091509150818190610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063091906109e9565b60405180910390fd5b505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061067182610646565b9050919050565b61068181610666565b811461068c57600080fd5b50565b60008151905061069e81610678565b92915050565b6000602082840312156106ba576106b9610641565b5b60006106c88482850161068f565b91505092915050565b60006106dc82610646565b9050919050565b6106ec816106d1565b81146106f757600080fd5b50565b600081359050610709816106e3565b92915050565b60006020828403121561072557610724610641565b5b6000610733848285016106fa565b91505092915050565b61074581610666565b82525050565b6000602082019050610760600083018461073c565b92915050565b60008135905061077581610678565b92915050565b60006020828403121561079157610790610641565b5b600061079f84828501610766565b91505092915050565b6107b1816106d1565b82525050565b60006020820190506107cc60008301846107a8565b92915050565b60008115159050919050565b6107e7816107d2565b82525050565b600060208201905061080260008301846107de565b92915050565b6000819050919050565b600061082d61082861082384610646565b610808565b610646565b9050919050565b600061083f82610812565b9050919050565b600061085182610834565b9050919050565b61086181610846565b82525050565b600060408201905061087c600083018561073c565b6108896020830184610858565b9392505050565b60006040820190506108a5600083018561073c565b6108b2602083018461073c565b9392505050565b6000819050919050565b6108cc816108b9565b82525050565b60006040820190506108e760008301856108c3565b6108f4602083018461073c565b9392505050565b600081519050919050565b600081905092915050565b60005b8381101561092f578082015181840152602081019050610914565b60008484015250505050565b6000610946826108fb565b6109508185610906565b9350610960818560208601610911565b80840191505092915050565b6000610978828461093b565b915081905092915050565b600081519050919050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b60006109bb82610983565b6109c5818561098e565b93506109d5818560208601610911565b6109de8161099f565b840191505092915050565b60006020820190508181036000830152610a0381846109b0565b90509291505056fea264697066735822122081a828f46cf03c824ed55ed6eae4af406aed778122536cbdb95f828747755f5a64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6258,
        "contract": "contracts/FrontDoor.sol:FrontDoor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 5024,
        "contract": "contracts/FrontDoor.sol:FrontDoor",
        "label": "eternalStorageAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5026,
        "contract": "contracts/FrontDoor.sol:FrontDoor",
        "label": "upstreamAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5028,
        "contract": "contracts/FrontDoor.sol:FrontDoor",
        "label": "isUserProxy",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}