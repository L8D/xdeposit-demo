{
  "address": "0x696358bBb1a743052E0E87BeD78AAd9d18f0e1F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_triCryptoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        }
      ],
      "name": "TriCryptoSwap2Event",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "coin0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coin1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coin2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "assetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "argData",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triCryptoAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6386f036fc640a4100e6309eb3e1ff19ca8093451c5544c9b017925465702a5a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x696358bBb1a743052E0E87BeD78AAd9d18f0e1F4",
    "transactionIndex": 0,
    "gasUsed": "1740274",
    "logsBloom": "0x
    "blockHash": "0xa48f8220d92b036d4b2502584e42c7e166b751c476973e9adf1eeff1607da297",
    "transactionHash": "0x6386f036fc640a4100e6309eb3e1ff19ca8093451c5544c9b017925465702a5a",
    "logs": [],
    "blockNumber": 16889319,
    "cumulativeGasUsed": "1740274",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd51a44d3fae010294c616388b506acda1bfaae46"
  ],
  "numDeployments": 1,
  "solcInputHash": "7ca63d0c714c32a39aba008146528996",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_triCryptoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"}],\"name\":\"TriCryptoSwap2Event\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"coin0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"assetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triCryptoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute(((uint8,address),uint256)[],bytes)\":{\"params\":{\"argData\":\"Step specific arguments in ABI encoding\",\"assetAmounts\":\"AssetAmounts to be used by the step\"},\"returns\":{\"_0\":\"the outcome of the step invocation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(((uint8,address),uint256)[],bytes)\":{\"notice\":\"called by WorkflowRunner to execute a workflow step.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CurveTriCrypto2SwapAction.sol\":\"CurveTriCrypto2SwapAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetAmount.sol\\\";\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n    // The amounts of each input asset that resulted from the step execution.\\n    AssetAmount[] inputAssetAmounts;\\n    // The amounts of each output asset that resulted from the step execution.\\n    AssetAmount[] outputAssetAmounts;\\n    // The index of the next step in a workflow.\\n    // This value allows the step to override the default nextStepIndex\\n    // statically defined\\n    // -1 means terminate the workflow\\n    // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n    int16 nextStepIndex;\\n}\\n\",\"keccak256\":\"0xf533dd649e5cc237552e8f6054ad120d92cea47e3ad5970cfdacef901414624f\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/AssetType.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/WorkflowStepResult.sol\\\";\\n\\nlibrary LibActionHelpers {\\n    function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        Asset memory asset = Asset(assetType, assetAddress);\\n        AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n        ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n        return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2);\\n    }\\n\\n    function singleTokenResult(address assetAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (WorkflowStepResult memory)\\n    {\\n        return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n    }\\n\\n    function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n        return singleAssetResult(AssetType.Native, address(0), 0);\\n    }\\n}\\n\",\"keccak256\":\"0x70d61ca9349780d000babacf0153f0d8a94e27cd153403e26cbf639a73e10b29\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LibErc20 {\\n    using Address for address;\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // forked from openzeppelin but removed the require, just keeping optional return\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57f8763cdc6339c5b248a4226b8392e36fdec46ad8b84aba2326f6ac1025b06\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/model/AssetType.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/WorkflowStepResult.sol\\\";\\n\\nstruct StepResultBuilder {\\n    uint256 inputIndex;\\n    uint256 outputIndex;\\n    WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n    function create(uint256 inputAssetCount, uint256 outputAssetCount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n        AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n        return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2));\\n    }\\n\\n    function addInputToken(StepResultBuilder memory builder, address tokenAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.inputAssetAmounts[builder.inputIndex++] =\\n            AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n        return builder;\\n    }\\n\\n    function addInputAssetAmount(StepResultBuilder memory builder, AssetAmount memory assetAmount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n        return builder;\\n    }\\n\\n    function addOutputToken(StepResultBuilder memory builder, address tokenAddress, uint256 amount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.outputAssetAmounts[builder.outputIndex++] =\\n            AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n        return builder;\\n    }\\n\\n    function addInputNative(StepResultBuilder memory builder, uint256 amount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n        return builder;\\n    }\\n\\n    function addOutputNative(StepResultBuilder memory builder, uint256 amount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.outputAssetAmounts[builder.outputIndex++] =\\n            AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n        return builder;\\n    }\\n\\n    function addOutputAssetAmount(StepResultBuilder memory builder, AssetAmount memory assetAmount)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n        return builder;\\n    }\\n\\n    function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex)\\n        internal\\n        pure\\n        returns (StepResultBuilder memory)\\n    {\\n        builder.result.nextStepIndex = nextStepIndex;\\n        return builder;\\n    }\\n}\\n\",\"keccak256\":\"0xbf7e5a6c06d4a71832bd5ac7f456bdb30fc3d3330cb1d88fe5eec6d6d714b83f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/CurveTriCrypto2SwapAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibErc20.sol\\\";\\n\\n\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing LibErc20 for IERC20;\\n\\nimport {ITriCrypto2} from \\\"./ITriCrypto2.sol\\\";\\n\\nstruct CurveTriCryptoSwapParams {\\n    Asset toAsset;\\n}\\n\\ncontract CurveTriCrypto2SwapAction is IWorkflowStep {\\n    event TriCryptoSwap2Event(address from, address to, uint256 amount, bool useNative);\\n\\n    address public immutable triCryptoAddress;\\n    address public immutable coin0;\\n    address public immutable coin1;\\n    address public immutable coin2;\\n\\n    constructor(address _triCryptoAddress) {\\n        triCryptoAddress = _triCryptoAddress;\\n        ITriCrypto2 iTriCrypto = ITriCrypto2(triCryptoAddress);\\n        coin0 = iTriCrypto.coins(0);\\n        coin1 = iTriCrypto.coins(1);\\n        coin2 = iTriCrypto.coins(2);\\n    }\\n\\n    struct Locals {\\n        address inputTokenAddress;\\n        address outputTokenAddress;\\n        uint256 i;\\n        uint256 j;\\n        IERC20 outputToken;\\n        uint256 outputAmountBefore;\\n        uint256 outputAmountAfter;\\n        uint256 outputAmountDelta;\\n        bool useNative;\\n        uint256 nativeInputAmount;\\n    }\\n\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        public\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n        // validate\\n        require(assetAmounts.length == 1, \\\"there must be exactly 1 input asset\\\");\\n\\n        // decode arguments\\n        CurveTriCryptoSwapParams memory args = abi.decode(argData, (CurveTriCryptoSwapParams));\\n\\n        Locals memory locals;\\n        locals.useNative = false;\\n\\n        locals.inputTokenAddress = assetAmounts[0].asset.assetAddress;\\n        locals.outputTokenAddress = args.toAsset.assetAddress;\\n        if (assetAmounts[0].asset.assetType == AssetType.Native) {\\n            locals.inputTokenAddress = coin2;\\n            locals.i = 2;\\n            locals.useNative = true;\\n            locals.nativeInputAmount = assetAmounts[0].amount;\\n        } else {\\n            locals.inputTokenAddress = assetAmounts[0].asset.assetAddress;\\n            IERC20(locals.inputTokenAddress).safeApprove(triCryptoAddress, assetAmounts[0].amount);\\n            locals.i = getTokenIndex(locals.inputTokenAddress);\\n        }\\n\\n        if (args.toAsset.assetType == AssetType.Native) {\\n            locals.outputTokenAddress = coin2;\\n            locals.useNative = true;\\n            locals.j = 2;\\n            locals.outputAmountBefore = address(this).balance;\\n        } else {\\n            locals.outputTokenAddress = args.toAsset.assetAddress;\\n            locals.j = getTokenIndex(locals.outputTokenAddress);\\n            locals.outputAmountBefore = IERC20(locals.outputTokenAddress).balanceOf(address(this));\\n        }\\n\\n        emit TriCryptoSwap2Event(\\n            locals.inputTokenAddress, locals.outputTokenAddress, assetAmounts[0].amount, locals.useNative\\n            );\\n\\n        // TODO allow user to provide minOut as absolute or relative\\n\\n\\n\\n\\n\\n\\n        // do the swap\\n        ITriCrypto2(triCryptoAddress).exchange{value: locals.nativeInputAmount}(\\n            locals.i, locals.j, assetAmounts[0].amount, 1, locals.useNative\\n        );\\n\\n        // deal with output\\n        if (args.toAsset.assetType == AssetType.Native) {\\n            locals.outputAmountAfter = address(this).balance;\\n        } else {\\n            locals.outputAmountAfter = IERC20(locals.outputTokenAddress).balanceOf(address(this));\\n        }\\n        locals.outputAmountDelta = locals.outputAmountAfter - locals.outputAmountBefore;\\n        require(locals.outputAmountDelta > 0, \\\"output balance did not increase\\\");\\n\\n        return LibStepResultBuilder.create(1, 1).addInputAssetAmount(assetAmounts[0]).addOutputToken(\\n            locals.outputTokenAddress, locals.outputAmountDelta\\n        ).result;\\n        // return WorkflowStepResult(new AssetAmount[](0), new AssetAmount[](0), -2);\\n    }\\n\\n    function getTokenIndex(address tokenAddress) internal view returns (uint256) {\\n        if (tokenAddress == coin0) {\\n            return 0;\\n        }\\n        if (tokenAddress == coin1) {\\n            return 1;\\n        }\\n        if (tokenAddress == coin2) {\\n            return 2;\\n        }\\n        revert(\\\"unknown token address\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd8cccd658335f906a1a6fbed9e843cb78cae8f2c79c2f76458c252bcf7282288\",\"license\":\"MIT\"},\"contracts/ITriCrypto2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ITriCrypto2 {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth) external payable;\\n}\\n\",\"keccak256\":\"0xfc49f276431a9db251e3057c8f20861ae7200ac776c0173235b6f0269f12df49\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200230b3803806200230b8339818101604052810190620000389190620002fe565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050600060805190508073ffffffffffffffffffffffffffffffffffffffff1663c661065760006040518263ffffffff1660e01b8152600401620000af919062000387565b602060405180830381865afa158015620000cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f39190620002fe565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1663c661065760016040518263ffffffff1660e01b8152600401620001629190620003e7565b602060405180830381865afa15801562000180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a69190620002fe565b73ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1663c661065760026040518263ffffffff1660e01b815260040162000215919062000447565b602060405180830381865afa15801562000233573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002599190620002fe565b73ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000464565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002c68262000299565b9050919050565b620002d881620002b9565b8114620002e457600080fd5b50565b600081519050620002f881620002cd565b92915050565b60006020828403121562000317576200031662000294565b5b60006200032784828501620002e7565b91505092915050565b6000819050919050565b6000819050919050565b6000819050919050565b60006200036f62000369620003638462000330565b62000344565b6200033a565b9050919050565b62000381816200034e565b82525050565b60006020820190506200039e600083018462000376565b92915050565b6000819050919050565b6000620003cf620003c9620003c384620003a4565b62000344565b6200033a565b9050919050565b620003e181620003ae565b82525050565b6000602082019050620003fe6000830184620003d6565b92915050565b6000819050919050565b60006200042f62000429620004238462000404565b62000344565b6200033a565b9050919050565b62000441816200040e565b82525050565b60006020820190506200045e600083018462000436565b92915050565b60805160a05160c05160e051611e3c620004cf600039600081816102a801528181610467015281816108950152610a650152600081816109010152610a090152600081816108dd01526109ad0152600081816103b30152818161063001526108b90152611e3c6000f3fe60806040526004361061004a5760003560e01c80637bb26ca71461004f5780638a24d36d1461007f578063cb8e44d7146100aa578063d8699636146100d5578063dfed17b914610100575b600080fd5b610069600480360381019061006491906111ac565b61012b565b604051610076919061147e565b60405180910390f35b34801561008b57600080fd5b50610094610893565b6040516100a191906114af565b60405180910390f35b3480156100b657600080fd5b506100bf6108b7565b6040516100cc91906114af565b60405180910390f35b3480156100e157600080fd5b506100ea6108db565b6040516100f791906114af565b60405180910390f35b34801561010c57600080fd5b506101156108ff565b60405161012291906114af565b60405180910390f35b610133610f99565b60018585905014610179576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101709061154d565b60405180910390fd5b6000838381019061018a91906116db565b9050610194610fbd565b600081610100019015159081151581525050868660008181106101ba576101b9611708565b5b90506060020160000160200160208101906101d59190611737565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816000015160200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600060028111156102605761025f611259565b5b8787600081811061027457610273611708565b5b905060600201600001600001602081019061028f9190611764565b60028111156102a1576102a0611259565b5b03610348577f0000000000000000000000000000000000000000000000000000000000000000816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060028160400181815250506001816101000190151590811515815250508686600081811061032f5761032e611708565b5b9050606002016040013581610120018181525050610431565b8686600081811061035c5761035b611708565b5b90506060020160000160200160208101906103779190611737565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061041a7f0000000000000000000000000000000000000000000000000000000000000000888860008181106103e6576103e5611708565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff166109239092919063ffffffff16565b61042781600001516109a9565b8160400181815250505b6000600281111561044557610444611259565b5b82600001516000015160028111156104605761045f611259565b5b036104e9577f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001816101000190151590811515815250506002816060018181525050478160a00181815250506105c7565b816000015160200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061053681602001516109a9565b816060018181525050806020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161057c91906114af565b602060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd91906117bd565b8160a00181815250505b7fc82e8da4c5c0a7dfea592cd1e86ee6712424f7d75c4427524d403ccefe12d33c816000015182602001518989600081811061060657610605611708565b5b905060600201604001358461010001516040516106269493929190611814565b60405180910390a17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663394747c5826101200151836040015184606001518b8b600081811061068e5761068d611708565b5b9050606002016040013560018761010001516040518763ffffffff1660e01b81526004016106c095949392919061189e565b6000604051808303818588803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b50505050506000600281111561070657610705611259565b5b826000015160000151600281111561072157610720611259565b5b0361073557478160c00181815250506107bd565b806020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161077291906114af565b602060405180830381865afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b391906117bd565b8160c00181815250505b8060a001518160c001516107d19190611920565b8160e001818152505060008160e0015111610821576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610818906119a0565b60405180910390fd5b61088381602001518260e001516108748a8a600081811061084557610844611708565b5b90506060020180360381019061085b9190611a25565b610866600180610aff565b610c1b90919063ffffffff16565b610c679092919063ffffffff16565b6040015192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109a48363095ea7b360e01b8484604051602401610942929190611a52565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d05565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a075760009050610afa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a635760019050610afa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610abf5760029050610afa565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190611ac7565b60405180910390fd5b919050565b610b07611054565b60008367ffffffffffffffff811115610b2357610b22611583565b5b604051908082528060200260200182016040528015610b5c57816020015b610b4961107b565b815260200190600190039081610b415790505b50905060008367ffffffffffffffff811115610b7b57610b7a611583565b5b604051908082528060200260200182016040528015610bb457816020015b610ba161107b565b815260200190600190039081610b995790505b5090506040518060600160405280600081526020016000815260200160405180606001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b8152508152509250505092915050565b610c23611054565b81836040015160000151846000018051809190610c3f90611ae7565b81525081518110610c5357610c52611708565b5b602002602001018190525082905092915050565b610c6f611054565b6040518060400160405280604051806040016040528060016002811115610c9957610c98611259565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815250815260200183815250846040015160200151856020018051809190610cdc90611ae7565b81525081518110610cf057610cef611708565b5b60200260200101819052508390509392505050565b6000610d67826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610dcc9092919063ffffffff16565b9050600081511115610dc75780806020019051810190610d879190611b5b565b610dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbd90611bfa565b60405180910390fd5b5b505050565b6060610ddb8484600085610de4565b90509392505050565b606082471015610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2090611c8c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e529190611d1d565b60006040518083038185875af1925050503d8060008114610e8f576040519150601f19603f3d011682016040523d82523d6000602084013e610e94565b606091505b5091509150610ea587838387610eb1565b92505050949350505050565b60608315610f13576000835103610f0b57610ecb85610f26565b610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0190611d80565b60405180910390fd5b5b829050610f1e565b610f1d8383610f49565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610f5c5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f909190611de4565b60405180910390fd5b60405180606001604052806060815260200160608152602001600060010b81525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b60405180606001604052806000815260200160008152602001611075610f99565b81525090565b604051806040016040528061108e61109b565b8152602001600081525090565b6040518060400160405280600060028111156110ba576110b9611259565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611116576111156110f1565b5b8235905067ffffffffffffffff811115611133576111326110f6565b5b60208301915083606082028301111561114f5761114e6110fb565b5b9250929050565b60008083601f84011261116c5761116b6110f1565b5b8235905067ffffffffffffffff811115611189576111886110f6565b5b6020830191508360018202830111156111a5576111a46110fb565b5b9250929050565b600080600080604085870312156111c6576111c56110e7565b5b600085013567ffffffffffffffff8111156111e4576111e36110ec565b5b6111f087828801611100565b9450945050602085013567ffffffffffffffff811115611213576112126110ec565b5b61121f87828801611156565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061129957611298611259565b5b50565b60008190506112aa82611288565b919050565b60006112ba8261129c565b9050919050565b6112ca816112af565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112fb826112d0565b9050919050565b61130b816112f0565b82525050565b60408201600082015161132760008501826112c1565b50602082015161133a6020850182611302565b50505050565b6000819050919050565b61135381611340565b82525050565b60608201600082015161136f6000850182611311565b506020820151611382604085018261134a565b50505050565b60006113948383611359565b60608301905092915050565b6000602082019050919050565b60006113b88261122d565b6113c28185611238565b93506113cd83611249565b8060005b838110156113fe5781516113e58882611388565b97506113f0836113a0565b9250506001810190506113d1565b5085935050505092915050565b60008160010b9050919050565b6114218161140b565b82525050565b6000606083016000830151848203600086015261144482826113ad565b9150506020830151848203602086015261145e82826113ad565b91505060408301516114736040860182611418565b508091505092915050565b600060208201905081810360008301526114988184611427565b905092915050565b6114a9816112f0565b82525050565b60006020820190506114c460008301846114a0565b92915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b60006115376023836114ca565b9150611542826114db565b604082019050919050565b600060208201905081810360008301526115668161152a565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115bb82611572565b810181811067ffffffffffffffff821117156115da576115d9611583565b5b80604052505050565b60006115ed6110dd565b90506115f982826115b2565b919050565b6003811061160b57600080fd5b50565b60008135905061161d816115fe565b92915050565b61162c816112f0565b811461163757600080fd5b50565b60008135905061164981611623565b92915050565b6000604082840312156116655761166461156d565b5b61166f60406115e3565b9050600061167f8482850161160e565b60008301525060206116938482850161163a565b60208301525092915050565b6000604082840312156116b5576116b461156d565b5b6116bf60206115e3565b905060006116cf8482850161164f565b60008301525092915050565b6000604082840312156116f1576116f06110e7565b5b60006116ff8482850161169f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561174d5761174c6110e7565b5b600061175b8482850161163a565b91505092915050565b60006020828403121561177a576117796110e7565b5b60006117888482850161160e565b91505092915050565b61179a81611340565b81146117a557600080fd5b50565b6000815190506117b781611791565b92915050565b6000602082840312156117d3576117d26110e7565b5b60006117e1848285016117a8565b91505092915050565b6117f381611340565b82525050565b60008115159050919050565b61180e816117f9565b82525050565b600060808201905061182960008301876114a0565b61183660208301866114a0565b61184360408301856117ea565b6118506060830184611805565b95945050505050565b6000819050919050565b6000819050919050565b600061188861188361187e84611859565b611863565b611340565b9050919050565b6118988161186d565b82525050565b600060a0820190506118b360008301886117ea565b6118c060208301876117ea565b6118cd60408301866117ea565b6118da606083018561188f565b6118e76080830184611805565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061192b82611340565b915061193683611340565b925082820390508181111561194e5761194d6118f1565b5b92915050565b7f6f75747075742062616c616e636520646964206e6f7420696e63726561736500600082015250565b600061198a601f836114ca565b915061199582611954565b602082019050919050565b600060208201905081810360008301526119b98161197d565b9050919050565b6000813590506119cf81611791565b92915050565b6000606082840312156119eb576119ea61156d565b5b6119f560406115e3565b90506000611a058482850161164f565b6000830152506040611a19848285016119c0565b60208301525092915050565b600060608284031215611a3b57611a3a6110e7565b5b6000611a49848285016119d5565b91505092915050565b6000604082019050611a6760008301856114a0565b611a7460208301846117ea565b9392505050565b7f756e6b6e6f776e20746f6b656e20616464726573730000000000000000000000600082015250565b6000611ab16015836114ca565b9150611abc82611a7b565b602082019050919050565b60006020820190508181036000830152611ae081611aa4565b9050919050565b6000611af282611340565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b2457611b236118f1565b5b600182019050919050565b611b38816117f9565b8114611b4357600080fd5b50565b600081519050611b5581611b2f565b92915050565b600060208284031215611b7157611b706110e7565b5b6000611b7f84828501611b46565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611be4602a836114ca565b9150611bef82611b88565b604082019050919050565b60006020820190508181036000830152611c1381611bd7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611c766026836114ca565b9150611c8182611c1a565b604082019050919050565b60006020820190508181036000830152611ca581611c69565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611ce0578082015181840152602081019050611cc5565b60008484015250505050565b6000611cf782611cac565b611d018185611cb7565b9350611d11818560208601611cc2565b80840191505092915050565b6000611d298284611cec565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611d6a601d836114ca565b9150611d7582611d34565b602082019050919050565b60006020820190508181036000830152611d9981611d5d565b9050919050565b600081519050919050565b6000611db682611da0565b611dc081856114ca565b9350611dd0818560208601611cc2565b611dd981611572565b840191505092915050565b60006020820190508181036000830152611dfe8184611dab565b90509291505056fea26469706673582212200752dfe15d610e8c6e4bc887338f58a1275e682bb582dc4404f90596cd64725464736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80637bb26ca71461004f5780638a24d36d1461007f578063cb8e44d7146100aa578063d8699636146100d5578063dfed17b914610100575b600080fd5b610069600480360381019061006491906111ac565b61012b565b604051610076919061147e565b60405180910390f35b34801561008b57600080fd5b50610094610893565b6040516100a191906114af565b60405180910390f35b3480156100b657600080fd5b506100bf6108b7565b6040516100cc91906114af565b60405180910390f35b3480156100e157600080fd5b506100ea6108db565b6040516100f791906114af565b60405180910390f35b34801561010c57600080fd5b506101156108ff565b60405161012291906114af565b60405180910390f35b610133610f99565b60018585905014610179576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101709061154d565b60405180910390fd5b6000838381019061018a91906116db565b9050610194610fbd565b600081610100019015159081151581525050868660008181106101ba576101b9611708565b5b90506060020160000160200160208101906101d59190611737565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816000015160200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600060028111156102605761025f611259565b5b8787600081811061027457610273611708565b5b905060600201600001600001602081019061028f9190611764565b60028111156102a1576102a0611259565b5b03610348577f0000000000000000000000000000000000000000000000000000000000000000816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060028160400181815250506001816101000190151590811515815250508686600081811061032f5761032e611708565b5b9050606002016040013581610120018181525050610431565b8686600081811061035c5761035b611708565b5b90506060020160000160200160208101906103779190611737565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061041a7f0000000000000000000000000000000000000000000000000000000000000000888860008181106103e6576103e5611708565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff166109239092919063ffffffff16565b61042781600001516109a9565b8160400181815250505b6000600281111561044557610444611259565b5b82600001516000015160028111156104605761045f611259565b5b036104e9577f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001816101000190151590811515815250506002816060018181525050478160a00181815250506105c7565b816000015160200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061053681602001516109a9565b816060018181525050806020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161057c91906114af565b602060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd91906117bd565b8160a00181815250505b7fc82e8da4c5c0a7dfea592cd1e86ee6712424f7d75c4427524d403ccefe12d33c816000015182602001518989600081811061060657610605611708565b5b905060600201604001358461010001516040516106269493929190611814565b60405180910390a17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663394747c5826101200151836040015184606001518b8b600081811061068e5761068d611708565b5b9050606002016040013560018761010001516040518763ffffffff1660e01b81526004016106c095949392919061189e565b6000604051808303818588803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b50505050506000600281111561070657610705611259565b5b826000015160000151600281111561072157610720611259565b5b0361073557478160c00181815250506107bd565b806020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161077291906114af565b602060405180830381865afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b391906117bd565b8160c00181815250505b8060a001518160c001516107d19190611920565b8160e001818152505060008160e0015111610821576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610818906119a0565b60405180910390fd5b61088381602001518260e001516108748a8a600081811061084557610844611708565b5b90506060020180360381019061085b9190611a25565b610866600180610aff565b610c1b90919063ffffffff16565b610c679092919063ffffffff16565b6040015192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109a48363095ea7b360e01b8484604051602401610942929190611a52565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d05565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a075760009050610afa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a635760019050610afa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610abf5760029050610afa565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190611ac7565b60405180910390fd5b919050565b610b07611054565b60008367ffffffffffffffff811115610b2357610b22611583565b5b604051908082528060200260200182016040528015610b5c57816020015b610b4961107b565b815260200190600190039081610b415790505b50905060008367ffffffffffffffff811115610b7b57610b7a611583565b5b604051908082528060200260200182016040528015610bb457816020015b610ba161107b565b815260200190600190039081610b995790505b5090506040518060600160405280600081526020016000815260200160405180606001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b8152508152509250505092915050565b610c23611054565b81836040015160000151846000018051809190610c3f90611ae7565b81525081518110610c5357610c52611708565b5b602002602001018190525082905092915050565b610c6f611054565b6040518060400160405280604051806040016040528060016002811115610c9957610c98611259565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815250815260200183815250846040015160200151856020018051809190610cdc90611ae7565b81525081518110610cf057610cef611708565b5b60200260200101819052508390509392505050565b6000610d67826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610dcc9092919063ffffffff16565b9050600081511115610dc75780806020019051810190610d879190611b5b565b610dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbd90611bfa565b60405180910390fd5b5b505050565b6060610ddb8484600085610de4565b90509392505050565b606082471015610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2090611c8c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e529190611d1d565b60006040518083038185875af1925050503d8060008114610e8f576040519150601f19603f3d011682016040523d82523d6000602084013e610e94565b606091505b5091509150610ea587838387610eb1565b92505050949350505050565b60608315610f13576000835103610f0b57610ecb85610f26565b610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0190611d80565b60405180910390fd5b5b829050610f1e565b610f1d8383610f49565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610f5c5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f909190611de4565b60405180910390fd5b60405180606001604052806060815260200160608152602001600060010b81525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b60405180606001604052806000815260200160008152602001611075610f99565b81525090565b604051806040016040528061108e61109b565b8152602001600081525090565b6040518060400160405280600060028111156110ba576110b9611259565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611116576111156110f1565b5b8235905067ffffffffffffffff811115611133576111326110f6565b5b60208301915083606082028301111561114f5761114e6110fb565b5b9250929050565b60008083601f84011261116c5761116b6110f1565b5b8235905067ffffffffffffffff811115611189576111886110f6565b5b6020830191508360018202830111156111a5576111a46110fb565b5b9250929050565b600080600080604085870312156111c6576111c56110e7565b5b600085013567ffffffffffffffff8111156111e4576111e36110ec565b5b6111f087828801611100565b9450945050602085013567ffffffffffffffff811115611213576112126110ec565b5b61121f87828801611156565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061129957611298611259565b5b50565b60008190506112aa82611288565b919050565b60006112ba8261129c565b9050919050565b6112ca816112af565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112fb826112d0565b9050919050565b61130b816112f0565b82525050565b60408201600082015161132760008501826112c1565b50602082015161133a6020850182611302565b50505050565b6000819050919050565b61135381611340565b82525050565b60608201600082015161136f6000850182611311565b506020820151611382604085018261134a565b50505050565b60006113948383611359565b60608301905092915050565b6000602082019050919050565b60006113b88261122d565b6113c28185611238565b93506113cd83611249565b8060005b838110156113fe5781516113e58882611388565b97506113f0836113a0565b9250506001810190506113d1565b5085935050505092915050565b60008160010b9050919050565b6114218161140b565b82525050565b6000606083016000830151848203600086015261144482826113ad565b9150506020830151848203602086015261145e82826113ad565b91505060408301516114736040860182611418565b508091505092915050565b600060208201905081810360008301526114988184611427565b905092915050565b6114a9816112f0565b82525050565b60006020820190506114c460008301846114a0565b92915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b60006115376023836114ca565b9150611542826114db565b604082019050919050565b600060208201905081810360008301526115668161152a565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115bb82611572565b810181811067ffffffffffffffff821117156115da576115d9611583565b5b80604052505050565b60006115ed6110dd565b90506115f982826115b2565b919050565b6003811061160b57600080fd5b50565b60008135905061161d816115fe565b92915050565b61162c816112f0565b811461163757600080fd5b50565b60008135905061164981611623565b92915050565b6000604082840312156116655761166461156d565b5b61166f60406115e3565b9050600061167f8482850161160e565b60008301525060206116938482850161163a565b60208301525092915050565b6000604082840312156116b5576116b461156d565b5b6116bf60206115e3565b905060006116cf8482850161164f565b60008301525092915050565b6000604082840312156116f1576116f06110e7565b5b60006116ff8482850161169f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561174d5761174c6110e7565b5b600061175b8482850161163a565b91505092915050565b60006020828403121561177a576117796110e7565b5b60006117888482850161160e565b91505092915050565b61179a81611340565b81146117a557600080fd5b50565b6000815190506117b781611791565b92915050565b6000602082840312156117d3576117d26110e7565b5b60006117e1848285016117a8565b91505092915050565b6117f381611340565b82525050565b60008115159050919050565b61180e816117f9565b82525050565b600060808201905061182960008301876114a0565b61183660208301866114a0565b61184360408301856117ea565b6118506060830184611805565b95945050505050565b6000819050919050565b6000819050919050565b600061188861188361187e84611859565b611863565b611340565b9050919050565b6118988161186d565b82525050565b600060a0820190506118b360008301886117ea565b6118c060208301876117ea565b6118cd60408301866117ea565b6118da606083018561188f565b6118e76080830184611805565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061192b82611340565b915061193683611340565b925082820390508181111561194e5761194d6118f1565b5b92915050565b7f6f75747075742062616c616e636520646964206e6f7420696e63726561736500600082015250565b600061198a601f836114ca565b915061199582611954565b602082019050919050565b600060208201905081810360008301526119b98161197d565b9050919050565b6000813590506119cf81611791565b92915050565b6000606082840312156119eb576119ea61156d565b5b6119f560406115e3565b90506000611a058482850161164f565b6000830152506040611a19848285016119c0565b60208301525092915050565b600060608284031215611a3b57611a3a6110e7565b5b6000611a49848285016119d5565b91505092915050565b6000604082019050611a6760008301856114a0565b611a7460208301846117ea565b9392505050565b7f756e6b6e6f776e20746f6b656e20616464726573730000000000000000000000600082015250565b6000611ab16015836114ca565b9150611abc82611a7b565b602082019050919050565b60006020820190508181036000830152611ae081611aa4565b9050919050565b6000611af282611340565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b2457611b236118f1565b5b600182019050919050565b611b38816117f9565b8114611b4357600080fd5b50565b600081519050611b5581611b2f565b92915050565b600060208284031215611b7157611b706110e7565b5b6000611b7f84828501611b46565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611be4602a836114ca565b9150611bef82611b88565b604082019050919050565b60006020820190508181036000830152611c1381611bd7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611c766026836114ca565b9150611c8182611c1a565b604082019050919050565b60006020820190508181036000830152611ca581611c69565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611ce0578082015181840152602081019050611cc5565b60008484015250505050565b6000611cf782611cac565b611d018185611cb7565b9350611d11818560208601611cc2565b80840191505092915050565b6000611d298284611cec565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611d6a601d836114ca565b9150611d7582611d34565b602082019050919050565b60006020820190508181036000830152611d9981611d5d565b9050919050565b600081519050919050565b6000611db682611da0565b611dc081856114ca565b9350611dd0818560208601611cc2565b611dd981611572565b840191505092915050565b60006020820190508181036000830152611dfe8184611dab565b90509291505056fea26469706673582212200752dfe15d610e8c6e4bc887338f58a1275e682bb582dc4404f90596cd64725464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "execute(((uint8,address),uint256)[],bytes)": {
        "params": {
          "argData": "Step specific arguments in ABI encoding",
          "assetAmounts": "AssetAmounts to be used by the step"
        },
        "returns": {
          "_0": "the outcome of the step invocation"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "execute(((uint8,address),uint256)[],bytes)": {
        "notice": "called by WorkflowRunner to execute a workflow step."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}