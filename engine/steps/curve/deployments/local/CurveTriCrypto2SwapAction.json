{
  "address": "0x3949c97925e5Aa13e34ddb18EAbf0B70ABB0C7d4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_triCryptoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        }
      ],
      "name": "TriCryptoSwap2Event",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "coin0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coin1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coin2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "assetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "argData",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triCryptoAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1da0eb4e6472e5a3fbfc9003d764633ea348f7cf02b052a498a9756cf8e402b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3949c97925e5Aa13e34ddb18EAbf0B70ABB0C7d4",
    "transactionIndex": 0,
    "gasUsed": "1761427",
    "logsBloom": "0x
    "blockHash": "0x1654fb49f927280a961d27ef3101221adae96506aed5d006e6f09314a457db2f",
    "transactionHash": "0xb1da0eb4e6472e5a3fbfc9003d764633ea348f7cf02b052a498a9756cf8e402b",
    "logs": [],
    "blockNumber": 16889325,
    "cumulativeGasUsed": "1761427",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd51a44d3fae010294c616388b506acda1bfaae46"
  ],
  "numDeployments": 1,
  "solcInputHash": "836d13b426c2974f22ea73805814600f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_triCryptoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"}],\"name\":\"TriCryptoSwap2Event\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"coin0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"assetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triCryptoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute(((uint8,address),uint256)[],bytes)\":{\"params\":{\"argData\":\"Step specific arguments in ABI encoding\",\"assetAmounts\":\"AssetAmounts to be used by the step\"},\"returns\":{\"_0\":\"the outcome of the step invocation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(((uint8,address),uint256)[],bytes)\":{\"notice\":\"called by WorkflowRunner to execute a workflow step.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CurveTriCrypto2SwapAction.sol\":\"CurveTriCrypto2SwapAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nlibrary LibActionHelpers {\\n  function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    Asset memory asset = Asset(assetType, assetAddress);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n    ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n    return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2, -1);\\n  }\\n\\n  function singleTokenResult(address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n  }\\n\\n  function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.Native, address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x3017f42ec45c2ee13e81220ac9833f47456f6ee9002fbefd9fdb12055ad7e863\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LibErc20 {\\n    using Address for address;\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // forked from openzeppelin but removed the require, just keeping optional return\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57f8763cdc6339c5b248a4226b8392e36fdec46ad8b84aba2326f6ac1025b06\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x2cfe6c734d98383e76c5f7ae9cf3f6e0eeef790bb4bb3b6049589eae6ed1dd64\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/CurveTriCrypto2SwapAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibErc20.sol\\\";\\n\\n\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing LibErc20 for IERC20;\\n\\nimport {ITriCrypto2} from \\\"./ITriCrypto2.sol\\\";\\n\\nstruct CurveTriCryptoSwapParams {\\n    Asset toAsset;\\n}\\n\\ncontract CurveTriCrypto2SwapAction is IWorkflowStep {\\n    event TriCryptoSwap2Event(address from, address to, uint256 amount, bool useNative);\\n\\n    address public immutable triCryptoAddress;\\n    address public immutable coin0;\\n    address public immutable coin1;\\n    address public immutable coin2;\\n\\n    constructor(address _triCryptoAddress) {\\n        triCryptoAddress = _triCryptoAddress;\\n        ITriCrypto2 iTriCrypto = ITriCrypto2(triCryptoAddress);\\n        coin0 = iTriCrypto.coins(0);\\n        coin1 = iTriCrypto.coins(1);\\n        coin2 = iTriCrypto.coins(2);\\n    }\\n\\n    struct Locals {\\n        address inputTokenAddress;\\n        address outputTokenAddress;\\n        uint256 i;\\n        uint256 j;\\n        IERC20 outputToken;\\n        uint256 outputAmountBefore;\\n        uint256 outputAmountAfter;\\n        uint256 outputAmountDelta;\\n        bool useNative;\\n        uint256 nativeInputAmount;\\n    }\\n\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        public\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n        // validate\\n        require(assetAmounts.length == 1, \\\"there must be exactly 1 input asset\\\");\\n\\n        // decode arguments\\n        CurveTriCryptoSwapParams memory args = abi.decode(argData, (CurveTriCryptoSwapParams));\\n\\n        Locals memory locals;\\n        locals.useNative = false;\\n\\n        locals.inputTokenAddress = assetAmounts[0].asset.assetAddress;\\n        locals.outputTokenAddress = args.toAsset.assetAddress;\\n        if (assetAmounts[0].asset.assetType == AssetType.Native) {\\n            locals.inputTokenAddress = coin2;\\n            locals.i = 2;\\n            locals.useNative = true;\\n            locals.nativeInputAmount = assetAmounts[0].amount;\\n        } else {\\n            locals.inputTokenAddress = assetAmounts[0].asset.assetAddress;\\n            IERC20(locals.inputTokenAddress).safeApprove(triCryptoAddress, assetAmounts[0].amount);\\n            locals.i = getTokenIndex(locals.inputTokenAddress);\\n        }\\n\\n        if (args.toAsset.assetType == AssetType.Native) {\\n            locals.outputTokenAddress = coin2;\\n            locals.useNative = true;\\n            locals.j = 2;\\n            locals.outputAmountBefore = address(this).balance;\\n        } else {\\n            locals.outputTokenAddress = args.toAsset.assetAddress;\\n            locals.j = getTokenIndex(locals.outputTokenAddress);\\n            locals.outputAmountBefore = IERC20(locals.outputTokenAddress).balanceOf(address(this));\\n        }\\n\\n        emit TriCryptoSwap2Event(\\n            locals.inputTokenAddress, locals.outputTokenAddress, assetAmounts[0].amount, locals.useNative\\n            );\\n\\n        // TODO allow user to provide minOut as absolute or relative\\n\\n\\n\\n\\n\\n\\n        // do the swap\\n        ITriCrypto2(triCryptoAddress).exchange{value: locals.nativeInputAmount}(\\n            locals.i, locals.j, assetAmounts[0].amount, 1, locals.useNative\\n        );\\n\\n        // deal with output\\n        if (args.toAsset.assetType == AssetType.Native) {\\n            locals.outputAmountAfter = address(this).balance;\\n        } else {\\n            locals.outputAmountAfter = IERC20(locals.outputTokenAddress).balanceOf(address(this));\\n        }\\n        locals.outputAmountDelta = locals.outputAmountAfter - locals.outputAmountBefore;\\n        require(locals.outputAmountDelta > 0, \\\"output balance did not increase\\\");\\n\\n        return LibStepResultBuilder.create(1, 1).addInputAssetAmount(assetAmounts[0]).addOutputToken(\\n            locals.outputTokenAddress, locals.outputAmountDelta\\n        ).result;\\n        // return WorkflowStepResult(new AssetAmount[](0), new AssetAmount[](0), -2);\\n    }\\n\\n    function getTokenIndex(address tokenAddress) internal view returns (uint256) {\\n        if (tokenAddress == coin0) {\\n            return 0;\\n        }\\n        if (tokenAddress == coin1) {\\n            return 1;\\n        }\\n        if (tokenAddress == coin2) {\\n            return 2;\\n        }\\n        revert(\\\"unknown token address\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd8cccd658335f906a1a6fbed9e843cb78cae8f2c79c2f76458c252bcf7282288\",\"license\":\"MIT\"},\"contracts/ITriCrypto2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ITriCrypto2 {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth) external payable;\\n}\\n\",\"keccak256\":\"0xfc49f276431a9db251e3057c8f20861ae7200ac776c0173235b6f0269f12df49\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200236d3803806200236d8339818101604052810190620000389190620002fe565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050600060805190508073ffffffffffffffffffffffffffffffffffffffff1663c661065760006040518263ffffffff1660e01b8152600401620000af919062000387565b602060405180830381865afa158015620000cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f39190620002fe565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1663c661065760016040518263ffffffff1660e01b8152600401620001629190620003e7565b602060405180830381865afa15801562000180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a69190620002fe565b73ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1663c661065760026040518263ffffffff1660e01b815260040162000215919062000447565b602060405180830381865afa15801562000233573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002599190620002fe565b73ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000464565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002c68262000299565b9050919050565b620002d881620002b9565b8114620002e457600080fd5b50565b600081519050620002f881620002cd565b92915050565b60006020828403121562000317576200031662000294565b5b60006200032784828501620002e7565b91505092915050565b6000819050919050565b6000819050919050565b6000819050919050565b60006200036f62000369620003638462000330565b62000344565b6200033a565b9050919050565b62000381816200034e565b82525050565b60006020820190506200039e600083018462000376565b92915050565b6000819050919050565b6000620003cf620003c9620003c384620003a4565b62000344565b6200033a565b9050919050565b620003e181620003ae565b82525050565b6000602082019050620003fe6000830184620003d6565b92915050565b6000819050919050565b60006200042f62000429620004238462000404565b62000344565b6200033a565b9050919050565b62000441816200040e565b82525050565b60006020820190506200045e600083018462000436565b92915050565b60805160a05160c05160e051611e9e620004cf600039600081816102a801528181610467015281816108950152610a650152600081816109010152610a090152600081816108dd01526109ad0152600081816103b30152818161063001526108b90152611e9e6000f3fe60806040526004361061004a5760003560e01c80637bb26ca71461004f5780638a24d36d1461007f578063cb8e44d7146100aa578063d8699636146100d5578063dfed17b914610100575b600080fd5b610069600480360381019061006491906111df565b61012b565b60405161007691906114e0565b60405180910390f35b34801561008b57600080fd5b50610094610893565b6040516100a19190611511565b60405180910390f35b3480156100b657600080fd5b506100bf6108b7565b6040516100cc9190611511565b60405180910390f35b3480156100e157600080fd5b506100ea6108db565b6040516100f79190611511565b60405180910390f35b34801561010c57600080fd5b506101156108ff565b6040516101229190611511565b60405180910390f35b610133610fc2565b60018585905014610179576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610170906115af565b60405180910390fd5b6000838381019061018a919061173d565b9050610194610ff0565b600081610100019015159081151581525050868660008181106101ba576101b961176a565b5b90506060020160000160200160208101906101d59190611799565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816000015160200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600060028111156102605761025f61128c565b5b878760008181106102745761027361176a565b5b905060600201600001600001602081019061028f91906117c6565b60028111156102a1576102a061128c565b5b03610348577f0000000000000000000000000000000000000000000000000000000000000000816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060028160400181815250506001816101000190151590811515815250508686600081811061032f5761032e61176a565b5b9050606002016040013581610120018181525050610431565b8686600081811061035c5761035b61176a565b5b90506060020160000160200160208101906103779190611799565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061041a7f0000000000000000000000000000000000000000000000000000000000000000888860008181106103e6576103e561176a565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff166109239092919063ffffffff16565b61042781600001516109a9565b8160400181815250505b600060028111156104455761044461128c565b5b82600001516000015160028111156104605761045f61128c565b5b036104e9577f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001816101000190151590811515815250506002816060018181525050478160a00181815250506105c7565b816000015160200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061053681602001516109a9565b816060018181525050806020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161057c9190611511565b602060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd919061181f565b8160a00181815250505b7fc82e8da4c5c0a7dfea592cd1e86ee6712424f7d75c4427524d403ccefe12d33c81600001518260200151898960008181106106065761060561176a565b5b905060600201604001358461010001516040516106269493929190611876565b60405180910390a17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663394747c5826101200151836040015184606001518b8b600081811061068e5761068d61176a565b5b9050606002016040013560018761010001516040518763ffffffff1660e01b81526004016106c0959493929190611900565b6000604051808303818588803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b5050505050600060028111156107065761070561128c565b5b82600001516000015160028111156107215761072061128c565b5b0361073557478160c00181815250506107bd565b806020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107729190611511565b602060405180830381865afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b3919061181f565b8160c00181815250505b8060a001518160c001516107d19190611982565b8160e001818152505060008160e0015111610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890611a02565b60405180910390fd5b61088381602001518260e001516108748a8a60008181106108455761084461176a565b5b90506060020180360381019061085b9190611a87565b610866600180610aff565b610c4490919063ffffffff16565b610c909092919063ffffffff16565b6040015192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109a48363095ea7b360e01b8484604051602401610942929190611ab4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d2e565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a075760009050610afa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a635760019050610afa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610abf5760029050610afa565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190611b29565b60405180910390fd5b919050565b610b07611087565b60008367ffffffffffffffff811115610b2357610b226115e5565b5b604051908082528060200260200182016040528015610b5c57816020015b610b496110ae565b815260200190600190039081610b415790505b50905060008367ffffffffffffffff811115610b7b57610b7a6115e5565b5b604051908082528060200260200182016040528015610bb457816020015b610ba16110ae565b815260200190600190039081610b995790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610c4c611087565b81836040015160000151846000018051809190610c6890611b49565b81525081518110610c7c57610c7b61176a565b5b602002602001018190525082905092915050565b610c98611087565b6040518060400160405280604051806040016040528060016002811115610cc257610cc161128c565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815250815260200183815250846040015160200151856020018051809190610d0590611b49565b81525081518110610d1957610d1861176a565b5b60200260200101819052508390509392505050565b6000610d90826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610df59092919063ffffffff16565b9050600081511115610df05780806020019051810190610db09190611bbd565b610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690611c5c565b60405180910390fd5b5b505050565b6060610e048484600085610e0d565b90509392505050565b606082471015610e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4990611cee565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e7b9190611d7f565b60006040518083038185875af1925050503d8060008114610eb8576040519150601f19603f3d011682016040523d82523d6000602084013e610ebd565b606091505b5091509150610ece87838387610eda565b92505050949350505050565b60608315610f3c576000835103610f3457610ef485610f4f565b610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90611de2565b60405180910390fd5b5b829050610f47565b610f468383610f72565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610f855781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb99190611e46565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b604051806060016040528060008152602001600081526020016110a8610fc2565b81525090565b60405180604001604052806110c16110ce565b8152602001600081525090565b6040518060400160405280600060028111156110ed576110ec61128c565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261114957611148611124565b5b8235905067ffffffffffffffff81111561116657611165611129565b5b6020830191508360608202830111156111825761118161112e565b5b9250929050565b60008083601f84011261119f5761119e611124565b5b8235905067ffffffffffffffff8111156111bc576111bb611129565b5b6020830191508360018202830111156111d8576111d761112e565b5b9250929050565b600080600080604085870312156111f9576111f861111a565b5b600085013567ffffffffffffffff8111156112175761121661111f565b5b61122387828801611133565b9450945050602085013567ffffffffffffffff8111156112465761124561111f565b5b61125287828801611189565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106112cc576112cb61128c565b5b50565b60008190506112dd826112bb565b919050565b60006112ed826112cf565b9050919050565b6112fd816112e2565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061132e82611303565b9050919050565b61133e81611323565b82525050565b60408201600082015161135a60008501826112f4565b50602082015161136d6020850182611335565b50505050565b6000819050919050565b61138681611373565b82525050565b6060820160008201516113a26000850182611344565b5060208201516113b5604085018261137d565b50505050565b60006113c7838361138c565b60608301905092915050565b6000602082019050919050565b60006113eb82611260565b6113f5818561126b565b93506114008361127c565b8060005b8381101561143157815161141888826113bb565b9750611423836113d3565b925050600181019050611404565b5085935050505092915050565b60008160010b9050919050565b6114548161143e565b82525050565b60008160020b9050919050565b6114708161145a565b82525050565b6000608083016000830151848203600086015261149382826113e0565b915050602083015184820360208601526114ad82826113e0565b91505060408301516114c2604086018261144b565b5060608301516114d56060860182611467565b508091505092915050565b600060208201905081810360008301526114fa8184611476565b905092915050565b61150b81611323565b82525050565b60006020820190506115266000830184611502565b92915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b600061159960238361152c565b91506115a48261153d565b604082019050919050565b600060208201905081810360008301526115c88161158c565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61161d826115d4565b810181811067ffffffffffffffff8211171561163c5761163b6115e5565b5b80604052505050565b600061164f611110565b905061165b8282611614565b919050565b6003811061166d57600080fd5b50565b60008135905061167f81611660565b92915050565b61168e81611323565b811461169957600080fd5b50565b6000813590506116ab81611685565b92915050565b6000604082840312156116c7576116c66115cf565b5b6116d16040611645565b905060006116e184828501611670565b60008301525060206116f58482850161169c565b60208301525092915050565b600060408284031215611717576117166115cf565b5b6117216020611645565b90506000611731848285016116b1565b60008301525092915050565b6000604082840312156117535761175261111a565b5b600061176184828501611701565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117af576117ae61111a565b5b60006117bd8482850161169c565b91505092915050565b6000602082840312156117dc576117db61111a565b5b60006117ea84828501611670565b91505092915050565b6117fc81611373565b811461180757600080fd5b50565b600081519050611819816117f3565b92915050565b6000602082840312156118355761183461111a565b5b60006118438482850161180a565b91505092915050565b61185581611373565b82525050565b60008115159050919050565b6118708161185b565b82525050565b600060808201905061188b6000830187611502565b6118986020830186611502565b6118a5604083018561184c565b6118b26060830184611867565b95945050505050565b6000819050919050565b6000819050919050565b60006118ea6118e56118e0846118bb565b6118c5565b611373565b9050919050565b6118fa816118cf565b82525050565b600060a082019050611915600083018861184c565b611922602083018761184c565b61192f604083018661184c565b61193c60608301856118f1565b6119496080830184611867565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061198d82611373565b915061199883611373565b92508282039050818111156119b0576119af611953565b5b92915050565b7f6f75747075742062616c616e636520646964206e6f7420696e63726561736500600082015250565b60006119ec601f8361152c565b91506119f7826119b6565b602082019050919050565b60006020820190508181036000830152611a1b816119df565b9050919050565b600081359050611a31816117f3565b92915050565b600060608284031215611a4d57611a4c6115cf565b5b611a576040611645565b90506000611a67848285016116b1565b6000830152506040611a7b84828501611a22565b60208301525092915050565b600060608284031215611a9d57611a9c61111a565b5b6000611aab84828501611a37565b91505092915050565b6000604082019050611ac96000830185611502565b611ad6602083018461184c565b9392505050565b7f756e6b6e6f776e20746f6b656e20616464726573730000000000000000000000600082015250565b6000611b1360158361152c565b9150611b1e82611add565b602082019050919050565b60006020820190508181036000830152611b4281611b06565b9050919050565b6000611b5482611373565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b8657611b85611953565b5b600182019050919050565b611b9a8161185b565b8114611ba557600080fd5b50565b600081519050611bb781611b91565b92915050565b600060208284031215611bd357611bd261111a565b5b6000611be184828501611ba8565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c46602a8361152c565b9150611c5182611bea565b604082019050919050565b60006020820190508181036000830152611c7581611c39565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611cd860268361152c565b9150611ce382611c7c565b604082019050919050565b60006020820190508181036000830152611d0781611ccb565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611d42578082015181840152602081019050611d27565b60008484015250505050565b6000611d5982611d0e565b611d638185611d19565b9350611d73818560208601611d24565b80840191505092915050565b6000611d8b8284611d4e565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611dcc601d8361152c565b9150611dd782611d96565b602082019050919050565b60006020820190508181036000830152611dfb81611dbf565b9050919050565b600081519050919050565b6000611e1882611e02565b611e22818561152c565b9350611e32818560208601611d24565b611e3b816115d4565b840191505092915050565b60006020820190508181036000830152611e608184611e0d565b90509291505056fea264697066735822122038aac44013f19480cf1d2fb3af829220f241abd0c1fc7d940b68208871bc55c264736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80637bb26ca71461004f5780638a24d36d1461007f578063cb8e44d7146100aa578063d8699636146100d5578063dfed17b914610100575b600080fd5b610069600480360381019061006491906111df565b61012b565b60405161007691906114e0565b60405180910390f35b34801561008b57600080fd5b50610094610893565b6040516100a19190611511565b60405180910390f35b3480156100b657600080fd5b506100bf6108b7565b6040516100cc9190611511565b60405180910390f35b3480156100e157600080fd5b506100ea6108db565b6040516100f79190611511565b60405180910390f35b34801561010c57600080fd5b506101156108ff565b6040516101229190611511565b60405180910390f35b610133610fc2565b60018585905014610179576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610170906115af565b60405180910390fd5b6000838381019061018a919061173d565b9050610194610ff0565b600081610100019015159081151581525050868660008181106101ba576101b961176a565b5b90506060020160000160200160208101906101d59190611799565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816000015160200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600060028111156102605761025f61128c565b5b878760008181106102745761027361176a565b5b905060600201600001600001602081019061028f91906117c6565b60028111156102a1576102a061128c565b5b03610348577f0000000000000000000000000000000000000000000000000000000000000000816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060028160400181815250506001816101000190151590811515815250508686600081811061032f5761032e61176a565b5b9050606002016040013581610120018181525050610431565b8686600081811061035c5761035b61176a565b5b90506060020160000160200160208101906103779190611799565b816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061041a7f0000000000000000000000000000000000000000000000000000000000000000888860008181106103e6576103e561176a565b5b90506060020160400135836000015173ffffffffffffffffffffffffffffffffffffffff166109239092919063ffffffff16565b61042781600001516109a9565b8160400181815250505b600060028111156104455761044461128c565b5b82600001516000015160028111156104605761045f61128c565b5b036104e9577f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001816101000190151590811515815250506002816060018181525050478160a00181815250506105c7565b816000015160200151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061053681602001516109a9565b816060018181525050806020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161057c9190611511565b602060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd919061181f565b8160a00181815250505b7fc82e8da4c5c0a7dfea592cd1e86ee6712424f7d75c4427524d403ccefe12d33c81600001518260200151898960008181106106065761060561176a565b5b905060600201604001358461010001516040516106269493929190611876565b60405180910390a17f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663394747c5826101200151836040015184606001518b8b600081811061068e5761068d61176a565b5b9050606002016040013560018761010001516040518763ffffffff1660e01b81526004016106c0959493929190611900565b6000604051808303818588803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b5050505050600060028111156107065761070561128c565b5b82600001516000015160028111156107215761072061128c565b5b0361073557478160c00181815250506107bd565b806020015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107729190611511565b602060405180830381865afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b3919061181f565b8160c00181815250505b8060a001518160c001516107d19190611982565b8160e001818152505060008160e0015111610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890611a02565b60405180910390fd5b61088381602001518260e001516108748a8a60008181106108455761084461176a565b5b90506060020180360381019061085b9190611a87565b610866600180610aff565b610c4490919063ffffffff16565b610c909092919063ffffffff16565b6040015192505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109a48363095ea7b360e01b8484604051602401610942929190611ab4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d2e565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a075760009050610afa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a635760019050610afa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610abf5760029050610afa565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190611b29565b60405180910390fd5b919050565b610b07611087565b60008367ffffffffffffffff811115610b2357610b226115e5565b5b604051908082528060200260200182016040528015610b5c57816020015b610b496110ae565b815260200190600190039081610b415790505b50905060008367ffffffffffffffff811115610b7b57610b7a6115e5565b5b604051908082528060200260200182016040528015610bb457816020015b610ba16110ae565b815260200190600190039081610b995790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610c4c611087565b81836040015160000151846000018051809190610c6890611b49565b81525081518110610c7c57610c7b61176a565b5b602002602001018190525082905092915050565b610c98611087565b6040518060400160405280604051806040016040528060016002811115610cc257610cc161128c565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815250815260200183815250846040015160200151856020018051809190610d0590611b49565b81525081518110610d1957610d1861176a565b5b60200260200101819052508390509392505050565b6000610d90826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610df59092919063ffffffff16565b9050600081511115610df05780806020019051810190610db09190611bbd565b610def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de690611c5c565b60405180910390fd5b5b505050565b6060610e048484600085610e0d565b90509392505050565b606082471015610e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4990611cee565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e7b9190611d7f565b60006040518083038185875af1925050503d8060008114610eb8576040519150601f19603f3d011682016040523d82523d6000602084013e610ebd565b606091505b5091509150610ece87838387610eda565b92505050949350505050565b60608315610f3c576000835103610f3457610ef485610f4f565b610f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a90611de2565b60405180910390fd5b5b829050610f47565b610f468383610f72565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610f855781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb99190611e46565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600015158152602001600081525090565b604051806060016040528060008152602001600081526020016110a8610fc2565b81525090565b60405180604001604052806110c16110ce565b8152602001600081525090565b6040518060400160405280600060028111156110ed576110ec61128c565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261114957611148611124565b5b8235905067ffffffffffffffff81111561116657611165611129565b5b6020830191508360608202830111156111825761118161112e565b5b9250929050565b60008083601f84011261119f5761119e611124565b5b8235905067ffffffffffffffff8111156111bc576111bb611129565b5b6020830191508360018202830111156111d8576111d761112e565b5b9250929050565b600080600080604085870312156111f9576111f861111a565b5b600085013567ffffffffffffffff8111156112175761121661111f565b5b61122387828801611133565b9450945050602085013567ffffffffffffffff8111156112465761124561111f565b5b61125287828801611189565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106112cc576112cb61128c565b5b50565b60008190506112dd826112bb565b919050565b60006112ed826112cf565b9050919050565b6112fd816112e2565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061132e82611303565b9050919050565b61133e81611323565b82525050565b60408201600082015161135a60008501826112f4565b50602082015161136d6020850182611335565b50505050565b6000819050919050565b61138681611373565b82525050565b6060820160008201516113a26000850182611344565b5060208201516113b5604085018261137d565b50505050565b60006113c7838361138c565b60608301905092915050565b6000602082019050919050565b60006113eb82611260565b6113f5818561126b565b93506114008361127c565b8060005b8381101561143157815161141888826113bb565b9750611423836113d3565b925050600181019050611404565b5085935050505092915050565b60008160010b9050919050565b6114548161143e565b82525050565b60008160020b9050919050565b6114708161145a565b82525050565b6000608083016000830151848203600086015261149382826113e0565b915050602083015184820360208601526114ad82826113e0565b91505060408301516114c2604086018261144b565b5060608301516114d56060860182611467565b508091505092915050565b600060208201905081810360008301526114fa8184611476565b905092915050565b61150b81611323565b82525050565b60006020820190506115266000830184611502565b92915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b600061159960238361152c565b91506115a48261153d565b604082019050919050565b600060208201905081810360008301526115c88161158c565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61161d826115d4565b810181811067ffffffffffffffff8211171561163c5761163b6115e5565b5b80604052505050565b600061164f611110565b905061165b8282611614565b919050565b6003811061166d57600080fd5b50565b60008135905061167f81611660565b92915050565b61168e81611323565b811461169957600080fd5b50565b6000813590506116ab81611685565b92915050565b6000604082840312156116c7576116c66115cf565b5b6116d16040611645565b905060006116e184828501611670565b60008301525060206116f58482850161169c565b60208301525092915050565b600060408284031215611717576117166115cf565b5b6117216020611645565b90506000611731848285016116b1565b60008301525092915050565b6000604082840312156117535761175261111a565b5b600061176184828501611701565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156117af576117ae61111a565b5b60006117bd8482850161169c565b91505092915050565b6000602082840312156117dc576117db61111a565b5b60006117ea84828501611670565b91505092915050565b6117fc81611373565b811461180757600080fd5b50565b600081519050611819816117f3565b92915050565b6000602082840312156118355761183461111a565b5b60006118438482850161180a565b91505092915050565b61185581611373565b82525050565b60008115159050919050565b6118708161185b565b82525050565b600060808201905061188b6000830187611502565b6118986020830186611502565b6118a5604083018561184c565b6118b26060830184611867565b95945050505050565b6000819050919050565b6000819050919050565b60006118ea6118e56118e0846118bb565b6118c5565b611373565b9050919050565b6118fa816118cf565b82525050565b600060a082019050611915600083018861184c565b611922602083018761184c565b61192f604083018661184c565b61193c60608301856118f1565b6119496080830184611867565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061198d82611373565b915061199883611373565b92508282039050818111156119b0576119af611953565b5b92915050565b7f6f75747075742062616c616e636520646964206e6f7420696e63726561736500600082015250565b60006119ec601f8361152c565b91506119f7826119b6565b602082019050919050565b60006020820190508181036000830152611a1b816119df565b9050919050565b600081359050611a31816117f3565b92915050565b600060608284031215611a4d57611a4c6115cf565b5b611a576040611645565b90506000611a67848285016116b1565b6000830152506040611a7b84828501611a22565b60208301525092915050565b600060608284031215611a9d57611a9c61111a565b5b6000611aab84828501611a37565b91505092915050565b6000604082019050611ac96000830185611502565b611ad6602083018461184c565b9392505050565b7f756e6b6e6f776e20746f6b656e20616464726573730000000000000000000000600082015250565b6000611b1360158361152c565b9150611b1e82611add565b602082019050919050565b60006020820190508181036000830152611b4281611b06565b9050919050565b6000611b5482611373565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b8657611b85611953565b5b600182019050919050565b611b9a8161185b565b8114611ba557600080fd5b50565b600081519050611bb781611b91565b92915050565b600060208284031215611bd357611bd261111a565b5b6000611be184828501611ba8565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c46602a8361152c565b9150611c5182611bea565b604082019050919050565b60006020820190508181036000830152611c7581611c39565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611cd860268361152c565b9150611ce382611c7c565b604082019050919050565b60006020820190508181036000830152611d0781611ccb565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611d42578082015181840152602081019050611d27565b60008484015250505050565b6000611d5982611d0e565b611d638185611d19565b9350611d73818560208601611d24565b80840191505092915050565b6000611d8b8284611d4e565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611dcc601d8361152c565b9150611dd782611d96565b602082019050919050565b60006020820190508181036000830152611dfb81611dbf565b9050919050565b600081519050919050565b6000611e1882611e02565b611e22818561152c565b9350611e32818560208601611d24565b611e3b816115d4565b840191505092915050565b60006020820190508181036000830152611e608184611e0d565b90509291505056fea264697066735822122038aac44013f19480cf1d2fb3af829220f241abd0c1fc7d940b68208871bc55c264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "execute(((uint8,address),uint256)[],bytes)": {
        "params": {
          "argData": "Step specific arguments in ABI encoding",
          "assetAmounts": "AssetAmounts to be used by the step"
        },
        "returns": {
          "_0": "the outcome of the step invocation"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "execute(((uint8,address),uint256)[],bytes)": {
        "notice": "called by WorkflowRunner to execute a workflow step."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}