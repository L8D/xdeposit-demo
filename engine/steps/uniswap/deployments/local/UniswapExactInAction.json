{
  "address": "0x0724F18B2aA7D6413D3fDcF6c0c27458a8170Dd9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_routerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        }
      ],
      "name": "UniswapExactInActionEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "argData",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd464c65caa1e11cf0d08a1d52aadef7ba4ba24fe0b5771fdc2c04eed0a8cdb90",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0724F18B2aA7D6413D3fDcF6c0c27458a8170Dd9",
    "transactionIndex": 0,
    "gasUsed": "1919015",
    "logsBloom": "0x
    "blockHash": "0x3404e92ff7173bf4cb4490c57fb23f195eeecdf05f5df76c510026f068905aaa",
    "transactionHash": "0xd464c65caa1e11cf0d08a1d52aadef7ba4ba24fe0b5771fdc2c04eed0a8cdb90",
    "logs": [],
    "blockNumber": 16889328,
    "cumulativeGasUsed": "1919015",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45"
  ],
  "numDeployments": 1,
  "solcInputHash": "8c163677796a740cdf251f2ecaf4703b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"}],\"name\":\"UniswapExactInActionEvent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapExactInAction.sol\":\"UniswapExactInAction\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in decibips)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0xfc2e23b8851d12ef7cc6f72414af0fafacda3ffe04656f396e837ffa6d2e21ee\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.13;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n    /*\\n    * 0.\\n    */\\n    bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n    /*\\n    * -0.\\n    */\\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n    /*\\n    * +Infinity.\\n    */\\n    bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\n\\n    /*\\n    * -Infinity.\\n    */\\n    bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\n\\n    /*\\n    * Canonical NaN value.\\n    */\\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n    /**\\n     * Convert signed 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromInt(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) {\\n                return bytes16(0);\\n            } else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 256-bit integer number\\n     * rounding towards zero.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 256-bit integer number\\n     */\\n    function toInt(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            require(exponent <= 16638); // Overflow\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) {\\n                return bytes16(0);\\n            } else {\\n                uint256 result = x;\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into unsigned 256-bit integer number\\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n     * without error, because they are rounded to zero.\\n     *\\n     * @param x quadruple precision number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function toUInt(bytes16 x) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\\n\\n            require(exponent <= 16638); // Overflow\\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 128.128 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from128x128(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) {\\n                return bytes16(0);\\n            } else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 128.128 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 128.128 bit fixed point number\\n     */\\n    function to128x128(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            require(exponent <= 16510); // Overflow\\n            if (exponent < 16255) return 0; // Underflow\\n\\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16367) result >>= 16367 - exponent;\\n            else if (exponent > 16367) result <<= exponent - 16367;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 64.64 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from64x64(int128 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) {\\n                return bytes16(0);\\n            } else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint128(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 64.64 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 64.64 bit fixed point number\\n     */\\n    function to64x64(bytes16 x) internal pure returns (int128) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            require(exponent <= 16446); // Overflow\\n            if (exponent < 16319) return 0; // Underflow\\n\\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16431) result >>= 16431 - exponent;\\n            else if (exponent > 16431) result <<= exponent - 16431;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x80000000000000000000000000000000);\\n                return -int128(int256(result)); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(int256(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert octuple precision number into quadruple precision number.\\n     *\\n     * @param x octuple precision number\\n     * @return quadruple precision number\\n     */\\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\n\\n            uint256 exponent = uint256(x) >> 236 & 0x7FFFF;\\n            uint256 significand = uint256(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFFF) {\\n                if (significand > 0) return NaN;\\n                else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            }\\n\\n            if (exponent > 278526) {\\n                return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            } else if (exponent < 245649) {\\n                return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n            } else if (exponent < 245761) {\\n                significand =\\n                    (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\\n                exponent = 0;\\n            } else {\\n                significand >>= 124;\\n                exponent -= 245760;\\n            }\\n\\n            uint128 result = uint128(significand | exponent << 112);\\n            if (negative) result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into octuple precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return octuple precision number\\n     */\\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                exponent = 0x7FFFF;\\n            } // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 245649 + msb;\\n                }\\n            } else {\\n                result <<= 124;\\n                exponent += 245760;\\n            }\\n\\n            result |= exponent << 236;\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n            }\\n\\n            return bytes32(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert double precision number into quadruple precision number.\\n     *\\n     * @param x double precision number\\n     * @return quadruple precision number\\n     */\\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 exponent = uint64(x) >> 52 & 0x7FF;\\n\\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FF) {\\n                exponent = 0x7FFF;\\n            } // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 15309 + msb;\\n                }\\n            } else {\\n                result <<= 60;\\n                exponent += 15360;\\n            }\\n\\n            result |= exponent << 112;\\n            if (x & 0x8000000000000000 > 0) {\\n                result |= 0x80000000000000000000000000000000;\\n            }\\n\\n            return bytes16(uint128(result));\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into double precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return double precision number\\n     */\\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\\n        unchecked {\\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\\n\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                if (significand > 0) {\\n                    return 0x7FF8000000000000;\\n                } // NaN\\n                else {\\n                    return negative\\n                        ? bytes8(0xFFF0000000000000) // -Infinity\\n                        : bytes8(0x7FF0000000000000);\\n                } // Infinity\\n            }\\n\\n            if (exponent > 17406) {\\n                return negative\\n                    ? bytes8(0xFFF0000000000000) // -Infinity\\n                    : bytes8(0x7FF0000000000000);\\n            } // Infinity\\n            else if (exponent < 15309) {\\n                return negative\\n                    ? bytes8(0x8000000000000000) // -0\\n                    : bytes8(0x0000000000000000);\\n            } // 0\\n            else if (exponent < 15361) {\\n                significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\\n                exponent = 0;\\n            } else {\\n                significand >>= 60;\\n                exponent -= 15360;\\n            }\\n\\n            uint64 result = uint64(significand | exponent << 52);\\n            if (negative) result |= 0x8000000000000000;\\n\\n            return bytes8(result);\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is NaN, false otherwise\\n     */\\n    function isNaN(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF > 0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is positive or negative\\n     * infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is positive or negative infinity, false otherwise\\n     */\\n    function isInfinity(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return sign of x\\n     */\\n    function sign(bytes16 x) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            if (absoluteX == 0) return 0;\\n            else if (uint128(x) >= 0x80000000000000000000000000000000) return -1;\\n            else return 1;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n     * arguments are infinities of the same sign.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return sign (x - y)\\n     */\\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            // Not infinities of the same sign\\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n            if (x == y) {\\n                return 0;\\n            } else {\\n                bool negativeX = uint128(x) >= 0x80000000000000000000000000000000;\\n                bool negativeY = uint128(y) >= 0x80000000000000000000000000000000;\\n\\n                if (negativeX) {\\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\\n                    else return -1;\\n                } else {\\n                    if (negativeY) return 1;\\n                    else return absoluteX > absoluteY ? int8(1) : -1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n     * anything.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return true if x equals to y, false otherwise\\n     */\\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\\n        unchecked {\\n            if (x == y) {\\n                return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF < 0x7FFF0000000000000000000000000000;\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Special values behave in the following way:\\n     *\\n     * NaN + x = NaN for any x.\\n     * Infinity + x = Infinity for any finite x.\\n     * -Infinity + x = -Infinity for any finite x.\\n     * Infinity + Infinity = Infinity.\\n     * -Infinity + -Infinity = -Infinity.\\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x;\\n                    else return NaN;\\n                } else {\\n                    return x;\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                return y;\\n            } else {\\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                if (xSignifier == 0) {\\n                    return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n                } else if (ySignifier == 0) {\\n                    return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n                } else {\\n                    int256 delta = int256(xExponent) - int256(yExponent);\\n\\n                    if (xSign == ySign) {\\n                        if (delta > 112) {\\n                            return x;\\n                        } else if (delta > 0) {\\n                            ySignifier >>= uint256(delta);\\n                        } else if (delta < -112) {\\n                            return y;\\n                        } else if (delta < 0) {\\n                            xSignifier >>= uint256(-delta);\\n                            xExponent = yExponent;\\n                        }\\n\\n                        xSignifier += ySignifier;\\n\\n                        if (xSignifier >= 0x20000000000000000000000000000) {\\n                            xSignifier >>= 1;\\n                            xExponent += 1;\\n                        }\\n\\n                        if (xExponent == 0x7FFF) {\\n                            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n                        } else {\\n                            if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                            return bytes16(\\n                                uint128(\\n                                    (xSign ? 0x80000000000000000000000000000000 : 0) | (xExponent << 112) | xSignifier\\n                                )\\n                            );\\n                        }\\n                    } else {\\n                        if (delta > 0) {\\n                            xSignifier <<= 1;\\n                            xExponent -= 1;\\n                        } else if (delta < 0) {\\n                            ySignifier <<= 1;\\n                            xExponent = yExponent - 1;\\n                        }\\n\\n                        if (delta > 112) ySignifier = 1;\\n                        else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256(delta - 1)) + 1;\\n                        else if (delta < -112) xSignifier = 1;\\n                        else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256(-delta - 1)) + 1;\\n\\n                        if (xSignifier >= ySignifier) {\\n                            xSignifier -= ySignifier;\\n                        } else {\\n                            xSignifier = ySignifier - xSignifier;\\n                            xSign = ySign;\\n                        }\\n\\n                        if (xSignifier == 0) {\\n                            return POSITIVE_ZERO;\\n                        }\\n\\n                        uint256 msb = mostSignificantBit(xSignifier);\\n\\n                        if (msb == 113) {\\n                            xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                            xExponent += 1;\\n                        } else if (msb < 112) {\\n                            uint256 shift = 112 - msb;\\n                            if (xExponent > shift) {\\n                                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                                xExponent -= shift;\\n                            } else {\\n                                xSignifier <<= xExponent - 1;\\n                                xExponent = 0;\\n                            }\\n                        } else {\\n                            xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                        }\\n\\n                        if (xExponent == 0x7FFF) {\\n                            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n                        } else {\\n                            return bytes16(\\n                                uint128(\\n                                    (xSign ? 0x80000000000000000000000000000000 : 0) | (xExponent << 112) | xSignifier\\n                                )\\n                            );\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Special values behave in the following way:\\n     *\\n     * NaN - x = NaN for any x.\\n     * Infinity - x = Infinity for any finite x.\\n     * -Infinity - x = -Infinity for any finite x.\\n     * Infinity - -Infinity = Infinity.\\n     * -Infinity - Infinity = -Infinity.\\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            return add(x, y ^ 0x80000000000000000000000000000000);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y.  Special values behave in the following way:\\n     *\\n     * NaN * x = NaN for any x.\\n     * Infinity * x = Infinity for any finite positive x.\\n     * Infinity * x = -Infinity for any finite negative x.\\n     * -Infinity * x = -Infinity for any finite positive x.\\n     * -Infinity * x = Infinity for any finite negative x.\\n     * Infinity * 0 = NaN.\\n     * -Infinity * 0 = NaN.\\n     * Infinity * Infinity = Infinity.\\n     * Infinity * -Infinity = -Infinity.\\n     * -Infinity * Infinity = -Infinity.\\n     * -Infinity * -Infinity = Infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x ^ y & 0x80000000000000000000000000000000;\\n                    else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\n                    else return NaN;\\n                } else {\\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                    else return x ^ y & 0x80000000000000000000000000000000;\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return y ^ x & 0x80000000000000000000000000000000;\\n            } else {\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                xSignifier *= ySignifier;\\n                if (xSignifier == 0) {\\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n                }\\n\\n                xExponent += yExponent;\\n\\n                uint256 msb = xSignifier >= 0x200000000000000000000000000000000000000000000000000000000\\n                    ? 225\\n                    : xSignifier >= 0x100000000000000000000000000000000000000000000000000000000\\n                        ? 224\\n                        : mostSignificantBit(xSignifier);\\n\\n                if (xExponent + msb < 16496) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb < 16608) {\\n                    // Subnormal\\n                    if (xExponent < 16496) {\\n                        xSignifier >>= 16496 - xExponent;\\n                    } else if (xExponent > 16496) {\\n                        xSignifier <<= xExponent - 16496;\\n                    }\\n                    xExponent = 0;\\n                } else if (xExponent + msb > 49373) {\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else {\\n                    if (msb > 112) {\\n                        xSignifier >>= msb - 112;\\n                    } else if (msb < 112) {\\n                        xSignifier <<= 112 - msb;\\n                    }\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb - 16607;\\n                }\\n\\n                return bytes16(\\n                    uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | xExponent << 112 | xSignifier)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y.  Special values behave in the following way:\\n     *\\n     * NaN / x = NaN for any x.\\n     * x / NaN = NaN for any x.\\n     * Infinity / x = Infinity for any finite non-negative x.\\n     * Infinity / x = -Infinity for any finite negative x including -0.\\n     * -Infinity / x = -Infinity for any finite non-negative x.\\n     * -Infinity / x = Infinity for any finite negative x including -0.\\n     * x / Infinity = 0 for any finite non-negative x.\\n     * x / -Infinity = -0 for any finite non-negative x.\\n     * x / Infinity = -0 for any finite non-negative x including -0.\\n     * x / -Infinity = 0 for any finite non-negative x including -0.\\n     *\\n     * Infinity / Infinity = NaN.\\n     * Infinity / -Infinity = -NaN.\\n     * -Infinity / Infinity = -NaN.\\n     * -Infinity / -Infinity = NaN.\\n     *\\n     * Division by zero behaves in the following way:\\n     *\\n     * x / 0 = Infinity for any finite positive x.\\n     * x / -0 = -Infinity for any finite positive x.\\n     * x / 0 = -Infinity for any finite negative x.\\n     * x / -0 = Infinity for any finite negative x.\\n     * 0 / 0 = NaN.\\n     * 0 / -0 = NaN.\\n     * -0 / 0 = NaN.\\n     * -0 / -0 = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) return NaN;\\n                else return x ^ y & 0x80000000000000000000000000000000;\\n            } else if (yExponent == 0x7FFF) {\\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n                else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\\n            } else {\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) {\\n                    if (xSignifier != 0) {\\n                        uint256 shift = 226 - mostSignificantBit(xSignifier);\\n\\n                        xSignifier <<= shift;\\n\\n                        xExponent = 1;\\n                        yExponent += shift - 114;\\n                    }\\n                } else {\\n                    xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\n                }\\n\\n                xSignifier = xSignifier / ySignifier;\\n                if (xSignifier == 0) {\\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n                }\\n\\n                assert(xSignifier >= 0x1000000000000000000000000000);\\n\\n                uint256 msb = xSignifier >= 0x80000000000000000000000000000\\n                    ? mostSignificantBit(xSignifier)\\n                    : xSignifier >= 0x40000000000000000000000000000\\n                        ? 114\\n                        : xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\\n\\n                if (xExponent + msb > yExponent + 16497) {\\n                    // Overflow\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16380 < yExponent) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16268 < yExponent) {\\n                    // Subnormal\\n                    if (xExponent + 16380 > yExponent) {\\n                        xSignifier <<= xExponent + 16380 - yExponent;\\n                    } else if (xExponent + 16380 < yExponent) {\\n                        xSignifier >>= yExponent - xExponent - 16380;\\n                    }\\n\\n                    xExponent = 0;\\n                } else {\\n                    // Normal\\n                    if (msb > 112) {\\n                        xSignifier >>= msb - 112;\\n                    }\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb + 16269 - yExponent;\\n                }\\n\\n                return bytes16(\\n                    uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | xExponent << 112 | xSignifier)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function neg(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x ^ 0x80000000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function abs(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n    }\\n\\n    /**\\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) {\\n                return NaN;\\n            } else {\\n                uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n                if (xExponent == 0x7FFF) {\\n                    return x;\\n                } else {\\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n                    bool oddExponent = xExponent & 0x1 == 0;\\n                    xExponent = xExponent + 16383 >> 1;\\n\\n                    if (oddExponent) {\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            xSignifier <<= 113;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (226 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= shift - 112 >> 1;\\n                        }\\n                    } else {\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            xSignifier <<= 112;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (225 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= shift - 112 >> 1;\\n                        }\\n                    }\\n\\n                    uint256 r = 0x10000000000000000000000000000;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n                    uint256 r1 = xSignifier / r;\\n                    if (r1 < r) r = r1;\\n\\n                    return bytes16(uint128(xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function log_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) {\\n                return NaN;\\n            } else if (x == 0x3FFF0000000000000000000000000000) {\\n                return POSITIVE_ZERO;\\n            } else {\\n                uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n                if (xExponent == 0x7FFF) {\\n                    return x;\\n                } else {\\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n                    bool resultNegative;\\n                    uint256 resultExponent = 16495;\\n                    uint256 resultSignifier;\\n\\n                    if (xExponent >= 0x3FFF) {\\n                        resultNegative = false;\\n                        resultSignifier = xExponent - 0x3FFF;\\n                        xSignifier <<= 15;\\n                    } else {\\n                        resultNegative = true;\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            resultSignifier = 0x3FFE - xExponent;\\n                            xSignifier <<= 15;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            resultSignifier = 16493 - msb;\\n                            xSignifier <<= 127 - msb;\\n                        }\\n                    }\\n\\n                    if (xSignifier == 0x80000000000000000000000000000000) {\\n                        if (resultNegative) resultSignifier += 1;\\n                        uint256 shift = 112 - mostSignificantBit(resultSignifier);\\n                        resultSignifier <<= shift;\\n                        resultExponent -= shift;\\n                    } else {\\n                        uint256 bb = resultNegative ? 1 : 0;\\n                        while (resultSignifier < 0x10000000000000000000000000000) {\\n                            resultSignifier <<= 1;\\n                            resultExponent -= 1;\\n\\n                            xSignifier *= xSignifier;\\n                            uint256 b = xSignifier >> 255;\\n                            resultSignifier += b ^ bb;\\n                            xSignifier >>= 127 + b;\\n                        }\\n                    }\\n\\n                    return bytes16(\\n                        uint128(\\n                            (resultNegative ? 0x80000000000000000000000000000000 : 0) | resultExponent << 112\\n                                | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                        )\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function ln(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n        }\\n    }\\n\\n    /**\\n     * Calculate 2^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF && xSignifier != 0) {\\n                return NaN;\\n            } else if (xExponent > 16397) {\\n                return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n            } else if (xExponent < 16255) {\\n                return 0x3FFF0000000000000000000000000000;\\n            } else {\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                if (xExponent > 16367) {\\n                    xSignifier <<= xExponent - 16367;\\n                } else if (xExponent < 16367) {\\n                    xSignifier >>= 16367 - xExponent;\\n                }\\n\\n                if (xNegative && xSignifier > 0x406E00000000000000000000000000000000) {\\n                    return POSITIVE_ZERO;\\n                }\\n\\n                if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                    return POSITIVE_INFINITY;\\n                }\\n\\n                uint256 resultExponent = xSignifier >> 128;\\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xNegative && xSignifier != 0) {\\n                    xSignifier = ~xSignifier;\\n                    resultExponent += 1;\\n                }\\n\\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\\n                if (xSignifier & 0x80000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\\n                }\\n                if (xSignifier & 0x800000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\\n                }\\n                if (xSignifier & 0x400000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\\n                }\\n                if (xSignifier & 0x200000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\\n                }\\n                if (xSignifier & 0x100000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\\n                }\\n                if (xSignifier & 0x80000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\\n                }\\n                if (xSignifier & 0x40000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\\n                }\\n                if (xSignifier & 0x20000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\\n                }\\n                if (xSignifier & 0x8000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\\n                }\\n                if (xSignifier & 0x4000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\\n                }\\n                if (xSignifier & 0x1000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\\n                }\\n                if (xSignifier & 0x800000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\\n                }\\n                if (xSignifier & 0x400000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\\n                }\\n                if (xSignifier & 0x200000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\\n                }\\n                if (xSignifier & 0x100000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\\n                }\\n                if (xSignifier & 0x80000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\\n                }\\n                if (xSignifier & 0x40000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\\n                }\\n                if (xSignifier & 0x20000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\\n                }\\n                if (xSignifier & 0x10000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\\n                }\\n                if (xSignifier & 0x8000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\\n                }\\n                if (xSignifier & 0x4000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\\n                }\\n                if (xSignifier & 0x2000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\\n                }\\n                if (xSignifier & 0x1000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\\n                }\\n                if (xSignifier & 0x800000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\\n                }\\n                if (xSignifier & 0x400000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\\n                }\\n                if (xSignifier & 0x200000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\\n                }\\n                if (xSignifier & 0x100000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\\n                }\\n                if (xSignifier & 0x80000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\\n                }\\n                if (xSignifier & 0x40000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\\n                }\\n                if (xSignifier & 0x20000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\\n                }\\n                if (xSignifier & 0x10000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\\n                }\\n                if (xSignifier & 0x8000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\\n                }\\n                if (xSignifier & 0x4000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\\n                }\\n                if (xSignifier & 0x2000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\\n                }\\n                if (xSignifier & 0x1000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\\n                }\\n                if (xSignifier & 0x800 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\\n                }\\n                if (xSignifier & 0x400 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\\n                }\\n                if (xSignifier & 0x200 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\\n                }\\n                if (xSignifier & 0x100 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\\n                }\\n                if (xSignifier & 0x80 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\\n                }\\n                if (xSignifier & 0x40 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\\n                }\\n                if (xSignifier & 0x20 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\\n                }\\n                if (xSignifier & 0x10 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\\n                }\\n                if (xSignifier & 0x8 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\\n                }\\n                if (xSignifier & 0x4 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\\n                }\\n\\n                if (!xNegative) {\\n                    resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent += 0x3FFF;\\n                } else if (resultExponent <= 0x3FFE) {\\n                    resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent = 0x3FFF - resultExponent;\\n                } else {\\n                    resultSignifier = resultSignifier >> resultExponent - 16367;\\n                    resultExponent = 0;\\n                }\\n\\n                return bytes16(uint128(resultExponent << 112 | resultSignifier));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate e^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function exp(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n        }\\n    }\\n\\n    /**\\n     * Get index of the most significant non-zero bit in binary representation of\\n     * x.  Reverts if x is zero.\\n     *\\n     * @return index of the most significant non-zero bit in binary representation\\n     *         of x\\n     */\\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            require(x > 0);\\n\\n            uint256 result = 0;\\n\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                result += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                result += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                result += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                result += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                result += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                result += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                result += 2;\\n            }\\n            if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc747d7358dd32d401edee9aabbf5e9e0dce490e5766060ec077bdf0f70ef9cb\",\"license\":\"BSD-4-Clause\"},\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nlibrary LibActionHelpers {\\n  function singleAssetResult(AssetType assetType, address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    Asset memory asset = Asset(assetType, assetAddress);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](1);\\n    ouputAssetAmounts[0] = AssetAmount(asset, amount);\\n    return WorkflowStepResult(new AssetAmount[](0), ouputAssetAmounts, -2, -1);\\n  }\\n\\n  function singleTokenResult(address assetAddress, uint256 amount) internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.ERC20, assetAddress, amount);\\n  }\\n\\n  function noOutputAssetsResult() internal pure returns (WorkflowStepResult memory) {\\n    return singleAssetResult(AssetType.Native, address(0), 0);\\n  }\\n}\\n\",\"keccak256\":\"0x3017f42ec45c2ee13e81220ac9833f47456f6ee9002fbefd9fdb12055ad7e863\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LibErc20 {\\n    using Address for address;\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // forked from openzeppelin but removed the require, just keeping optional return\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57f8763cdc6339c5b248a4226b8392e36fdec46ad8b84aba2326f6ac1025b06\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    return StepResultBuilder(0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x2cfe6c734d98383e76c5f7ae9cf3f6e0eeef790bb4bb3b6049589eae6ed1dd64\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/IV3SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IV3SwapRouter {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x5d7d35ee4c92a0b8498c0899ede54a298e2c5eae6b137085ac87a3cc8624a9ce\",\"license\":\"MIT\"},\"contracts/UniswapExactInAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@freemarket/core/contracts/IWorkflowStep.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibActionHelpers.sol\\\";\\nimport \\\"@freemarket/core/contracts/model/AssetAmount.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nimport \\\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/LibErc20.sol\\\";\\nimport \\\"@freemarket/step-sdk/contracts/ABDKMathQuad.sol\\\";\\nimport \\\"./IV3SwapRouter.sol\\\";\\n\\nusing ABDKMathQuad for bytes16;\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing LibErc20 for IERC20;\\n\\nstruct UniswapRoute {\\n    bytes encodedPath;\\n    int256 portion; // like percent but already divided by 100\\n        // uint256 minExchangeRate;\\n}\\n\\nstruct UniswapExactInActionParams {\\n    Asset toAsset;\\n    UniswapRoute[] routes;\\n    int256 minExchangeRate;\\n}\\n\\ncontract UniswapExactInAction is IWorkflowStep {\\n    event UniswapExactInActionEvent(address from, address to, uint256 amount, bool useNative);\\n\\n    address public immutable routerAddress;\\n\\n    constructor(address _routerAddress) {\\n        routerAddress = _routerAddress;\\n    }\\n\\n    // struct Locals {}\\n\\n    function execute(AssetAmount[] calldata inputAssetAmounts, bytes calldata argData)\\n        public\\n        payable\\n        returns (WorkflowStepResult memory)\\n    {\\n\\n        // validate\\n        require(inputAssetAmounts.length == 1, \\\"there must be exactly 1 input asset\\\");\\n\\n        // Locals memory locals;\\n        IERC20 inputAsset = IERC20(inputAssetAmounts[0].asset.assetAddress);\\n        inputAsset.safeApprove(routerAddress, inputAssetAmounts[0].amount);\\n\\n        UniswapExactInActionParams memory args = abi.decode(argData, (UniswapExactInActionParams));\\n\\n        // logArgs(args);\\n\\n        IERC20 outputAsset = IERC20(args.toAsset.assetAddress);\\n        uint256 outputAssetBalanceBefore = outputAsset.balanceOf(address(this));\\n\\n\\n        uint256 amountRemaining = inputAssetAmounts[0].amount;\\n        bytes16 amountInFloat = ABDKMathQuad.fromUInt(inputAssetAmounts[0].amount);\\n\\n\\n        for (uint256 i = 0; i < args.routes.length; i++) {\\n\\n\\n\\n\\n            UniswapRoute memory route = args.routes[i];\\n            bytes16 portion = ABDKMathQuad.from128x128(route.portion);\\n            uint256 amount;\\n            // if this is the last route, use the remaining amount to avoid rounding errors\\n            if (i < args.routes.length - 1) {\\n                amount = portion.mul(amountInFloat).toUInt();\\n\\n            } else {\\n                amount = amountRemaining;\\n\\n            }\\n            // minAmoutOut is zero because we're doing it ourself after all routes have been executed\\n            IV3SwapRouter.ExactInputParams memory routerArgs =\\n                IV3SwapRouter.ExactInputParams(route.encodedPath, address(this), amount, 0);\\n            IV3SwapRouter(routerAddress).exactInput(routerArgs);\\n            amountRemaining -= amount;\\n        }\\n\\n        // check the amount received vs minExchangeRate\\n        uint256 outputAssetBalanceAfter = outputAsset.balanceOf(address(this));\\n\\n\\n\\n        // bytes16 minExchangRate = ABDKMathQuad.from128x128(args.minExchangeRate);\\n        // bytes16 amountOutMinimum = minExchangRate.mul(amountInFloat);\\n        // bytes16 actualAmountOut = ABDKMathQuad.fromUInt(outputAssetBalanceAfter - outputAssetBalanceBefore);\\n        // int8 compareResult = actualAmountOut.cmp(amountOutMinimum);\\n        // require(compareResult >= 0, \\\"amount received is less than minExchangeRate\\\");\\n\\n        return LibStepResultBuilder.create(1, 1).addInputAssetAmount(inputAssetAmounts[0]).addOutputToken(\\n            args.toAsset.assetAddress, outputAssetBalanceAfter - outputAssetBalanceBefore\\n        ).result;\\n    }\\n\\n    function logArgs(UniswapExactInActionParams memory args) internal view {\\n\\n\\n        for (uint256 i = 0; i < args.routes.length; i++) {\\n\\n\\n\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbfe3cd8f4e63a24f3d9fadd856d55b64a082a10072dc0cdc605c3eee57d7867\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200230b3803806200230b8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516121d46200013760003960008181608b01528181610133015261036d01526121d46000f3fe6080604052600436106100295760003560e01c80633268cc561461002e5780637bb26ca714610059575b600080fd5b34801561003a57600080fd5b50610043610089565b6040516100509190611303565b60405180910390f35b610073600480360381019061006e91906113ed565b6100ad565b60405161008091906116bc565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100b561120b565b600185859050146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f290611761565b60405180910390fd5b60008585600081811061011157610110611781565b5b905060600201600001602001602081019061012c91906117dc565b90506101967f00000000000000000000000000000000000000000000000000000000000000008787600081811061016657610165611781565b5b905060600201604001358373ffffffffffffffffffffffffffffffffffffffff1661052e9092919063ffffffff16565b600084848101906101a79190611bcc565b90506000816000015160200151905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101f19190611303565b602060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190611c41565b905060008989600081811061024a57610249611781565b5b905060600201604001359050600061027e8b8b600081811061026f5761026e611781565b5b905060600201604001356105b4565b905060005b85602001515181101561042d576000866020015182815181106102a9576102a8611781565b5b6020026020010151905060006102c28260200151610631565b9050600060018960200151516102d89190611c9d565b8410156103275761032061030886846fffffffffffffffffffffffffffffffff19166106de90919063ffffffff16565b6fffffffffffffffffffffffffffffffff1916610b69565b905061032b565b8590505b60006040518060800160405280856000015181526020013073ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600081525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b858183f826040518263ffffffff1660e01b81526004016103c49190611dbc565b6020604051808303816000875af11580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104079190611c41565b5081876104149190611c9d565b965050505050808061042590611dde565b915050610283565b5060008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104699190611303565b602060405180830381865afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611c41565b905061051986600001516020015185836104c49190611c9d565b61050a8f8f60008181106104db576104da611781565b5b9050606002018036038101906104f19190611e8b565b6104fc600180610c67565b610dac90919063ffffffff16565b610df89092919063ffffffff16565b60400151975050505050505050949350505050565b6105af8363095ea7b360e01b848460405160240161054d929190611ec7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e96565b505050565b60008082036105c957600060801b905061062c565b600082905060006105d982610f5d565b905060708110156105f2578060700382901b9150610606565b6070811115610605576070810382901c91505b5b607081613fff01901b6dffffffffffffffffffffffffffff83161791508160801b925050505b919050565b600080820361064657600060801b90506106d9565b6000808313610658578260000361065a565b825b9050600061066782610f5d565b90506070811015610680578060700382901b9150610694565b6070811115610693576070810382901c91505b5b607081613f7f01901b6dffffffffffffffffffffffffffff831617915060008412156106d0576f80000000000000000000000000000000821791505b8160801b925050505b919050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff820361087057617fff81036107ff57836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff1916036107a7576f8000000000000000000000000000000060801b8416851892505050610b63565b6f8000000000000000000000000000000060801b8486186fffffffffffffffffffffffffffffffff1916036107e25783851792505050610b63565b6f7fff800000000000000000000000000060801b92505050610b63565b600060801b6f7fffffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff19160361084f576f7fff800000000000000000000000000060801b92505050610b63565b6f8000000000000000000000000000000060801b8416851892505050610b63565b617fff81036108ea57600060801b6f7fffffffffffffffffffffffffffffff60801b86166fffffffffffffffffffffffffffffffff1916036108c9576f7fff800000000000000000000000000060801b92505050610b63565b6f8000000000000000000000000000000060801b8516841892505050610b63565b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff16905060008303610925576001925061093a565b6e010000000000000000000000000000811790505b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff16905060008303610975576001925061098a565b6e010000000000000000000000000000811790505b8082029150600082036109f657600060801b6f8000000000000000000000000000000060801b878918166fffffffffffffffffffffffffffffffff1916116109d657600060801b6109eb565b6f8000000000000000000000000000000060801b5b945050505050610b63565b828401935060007c0200000000000000000000000000000000000000000000000000000000831015610a5d577c0100000000000000000000000000000000000000000000000000000000831015610a5557610a5083610f5d565b610a58565b60e05b610a60565b60e15b90506140708186011015610a7b576000945060009250610b23565b6140e08186011015610abf57614070851015610aa057846140700383901c9250610ab6565b614070851115610ab557614070850383901b92505b5b60009450610b22565b61c0dd8186011115610ad957617fff945060009250610b21565b6070811115610af0576070810383901c9250610b04565b6070811015610b03578060700383901b92505b5b6dffffffffffffffffffffffffffff831692506140df8186010394505b5b5b82607086901b6f8000000000000000000000000000000060801b898b181660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b600080617fff60708460801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050613fff811015610bb2576000915050610c62565b6f800000000000000000000000000000008360801c6fffffffffffffffffffffffffffffffff1610610be357600080fd5b6140fe811115610bf257600080fd5b60006e0100000000000000000000000000006dffffffffffffffffffffffffffff8560801c6fffffffffffffffffffffffffffffffff161617905061406f821015610c46578161406f0381901c9050610c5c565b61406f821115610c5b5761406f820381901b90505b5b80925050505b919050565b610c6f611239565b60008367ffffffffffffffff811115610c8b57610c8a61181f565b5b604051908082528060200260200182016040528015610cc457816020015b610cb1611260565b815260200190600190039081610ca95790505b50905060008367ffffffffffffffff811115610ce357610ce261181f565b5b604051908082528060200260200182016040528015610d1c57816020015b610d09611260565b815260200190600190039081610d015790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610db4611239565b81836040015160000151846000018051809190610dd090611dde565b81525081518110610de457610de3611781565b5b602002602001018190525082905092915050565b610e00611239565b6040518060400160405280604051806040016040528060016002811115610e2a57610e2961149a565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815250815260200183815250846040015160200151856020018051809190610e6d90611dde565b81525081518110610e8157610e80611781565b5b60200260200101819052508390509392505050565b6000610ef8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661103e9092919063ffffffff16565b9050600081511115610f585780806020019051810190610f189190611f28565b610f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4e90611fc7565b60405180910390fd5b5b505050565b6000808211610f6b57600080fd5b60007001000000000000000000000000000000008310610f9357608083901c92506080810190505b680100000000000000008310610fb157604083901c92506040810190505b6401000000008310610fcb57602083901c92506020810190505b620100008310610fe357601083901c92506010810190505b6101008310610ffa57600883901c92506008810190505b6010831061101057600483901c92506004810190505b6004831061102657600283901c92506002810190505b60028310611035576001810190505b80915050919050565b606061104d8484600085611056565b90509392505050565b60608247101561109b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109290612059565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516110c491906120b5565b60006040518083038185875af1925050503d8060008114611101576040519150601f19603f3d011682016040523d82523d6000602084013e611106565b606091505b509150915061111787838387611123565b92505050949350505050565b6060831561118557600083510361117d5761113d85611198565b61117c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117390612118565b60405180910390fd5b5b829050611190565b61118f83836111bb565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156111ce5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611202919061217c565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060600160405280600081526020016000815260200161125a61120b565b81525090565b6040518060400160405280611273611280565b8152602001600081525090565b60405180604001604052806000600281111561129f5761129e61149a565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112ed826112c2565b9050919050565b6112fd816112e2565b82525050565b600060208201905061131860008301846112f4565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261135757611356611332565b5b8235905067ffffffffffffffff81111561137457611373611337565b5b6020830191508360608202830111156113905761138f61133c565b5b9250929050565b60008083601f8401126113ad576113ac611332565b5b8235905067ffffffffffffffff8111156113ca576113c9611337565b5b6020830191508360018202830111156113e6576113e561133c565b5b9250929050565b6000806000806040858703121561140757611406611328565b5b600085013567ffffffffffffffff8111156114255761142461132d565b5b61143187828801611341565b9450945050602085013567ffffffffffffffff8111156114545761145361132d565b5b61146087828801611397565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106114da576114d961149a565b5b50565b60008190506114eb826114c9565b919050565b60006114fb826114dd565b9050919050565b61150b816114f0565b82525050565b61151a816112e2565b82525050565b6040820160008201516115366000850182611502565b5060208201516115496020850182611511565b50505050565b6000819050919050565b6115628161154f565b82525050565b60608201600082015161157e6000850182611520565b5060208201516115916040850182611559565b50505050565b60006115a38383611568565b60608301905092915050565b6000602082019050919050565b60006115c78261146e565b6115d18185611479565b93506115dc8361148a565b8060005b8381101561160d5781516115f48882611597565b97506115ff836115af565b9250506001810190506115e0565b5085935050505092915050565b60008160010b9050919050565b6116308161161a565b82525050565b60008160020b9050919050565b61164c81611636565b82525050565b6000608083016000830151848203600086015261166f82826115bc565b9150506020830151848203602086015261168982826115bc565b915050604083015161169e6040860182611627565b5060608301516116b16060860182611643565b508091505092915050565b600060208201905081810360008301526116d68184611652565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b600061174b6023836116de565b9150611756826116ef565b604082019050919050565b6000602082019050818103600083015261177a8161173e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6117b9816112e2565b81146117c457600080fd5b50565b6000813590506117d6816117b0565b92915050565b6000602082840312156117f2576117f1611328565b5b6000611800848285016117c7565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118578261180e565b810181811067ffffffffffffffff821117156118765761187561181f565b5b80604052505050565b600061188961131e565b9050611895828261184e565b919050565b600080fd5b600381106118ac57600080fd5b50565b6000813590506118be8161189f565b92915050565b6000604082840312156118da576118d9611809565b5b6118e4604061187f565b905060006118f4848285016118af565b6000830152506020611908848285016117c7565b60208301525092915050565b600067ffffffffffffffff82111561192f5761192e61181f565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156119605761195f61181f565b5b6119698261180e565b9050602081019050919050565b82818337600083830152505050565b600061199861199384611945565b61187f565b9050828152602081018484840111156119b4576119b3611940565b5b6119bf848285611976565b509392505050565b600082601f8301126119dc576119db611332565b5b81356119ec848260208601611985565b91505092915050565b6000819050919050565b611a08816119f5565b8114611a1357600080fd5b50565b600081359050611a25816119ff565b92915050565b600060408284031215611a4157611a40611809565b5b611a4b604061187f565b9050600082013567ffffffffffffffff811115611a6b57611a6a61189a565b5b611a77848285016119c7565b6000830152506020611a8b84828501611a16565b60208301525092915050565b6000611aaa611aa584611914565b61187f565b90508083825260208201905060208402830185811115611acd57611acc61133c565b5b835b81811015611b1457803567ffffffffffffffff811115611af257611af1611332565b5b808601611aff8982611a2b565b85526020850194505050602081019050611acf565b5050509392505050565b600082601f830112611b3357611b32611332565b5b8135611b43848260208601611a97565b91505092915050565b600060808284031215611b6257611b61611809565b5b611b6c606061187f565b90506000611b7c848285016118c4565b600083015250604082013567ffffffffffffffff811115611ba057611b9f61189a565b5b611bac84828501611b1e565b6020830152506060611bc084828501611a16565b60408301525092915050565b600060208284031215611be257611be1611328565b5b600082013567ffffffffffffffff811115611c0057611bff61132d565b5b611c0c84828501611b4c565b91505092915050565b611c1e8161154f565b8114611c2957600080fd5b50565b600081519050611c3b81611c15565b92915050565b600060208284031215611c5757611c56611328565b5b6000611c6584828501611c2c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ca88261154f565b9150611cb38361154f565b925082821015611cc657611cc5611c6e565b5b828203905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d0b578082015181840152602081019050611cf0565b83811115611d1a576000848401525b50505050565b6000611d2b82611cd1565b611d358185611cdc565b9350611d45818560208601611ced565b611d4e8161180e565b840191505092915050565b60006080830160008301518482036000860152611d768282611d20565b9150506020830151611d8b6020860182611511565b506040830151611d9e6040860182611559565b506060830151611db16060860182611559565b508091505092915050565b60006020820190508181036000830152611dd68184611d59565b905092915050565b6000611de98261154f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e1b57611e1a611c6e565b5b600182019050919050565b600081359050611e3581611c15565b92915050565b600060608284031215611e5157611e50611809565b5b611e5b604061187f565b90506000611e6b848285016118c4565b6000830152506040611e7f84828501611e26565b60208301525092915050565b600060608284031215611ea157611ea0611328565b5b6000611eaf84828501611e3b565b91505092915050565b611ec18161154f565b82525050565b6000604082019050611edc60008301856112f4565b611ee96020830184611eb8565b9392505050565b60008115159050919050565b611f0581611ef0565b8114611f1057600080fd5b50565b600081519050611f2281611efc565b92915050565b600060208284031215611f3e57611f3d611328565b5b6000611f4c84828501611f13565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611fb1602a836116de565b9150611fbc82611f55565b604082019050919050565b60006020820190508181036000830152611fe081611fa4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006120436026836116de565b915061204e82611fe7565b604082019050919050565b6000602082019050818103600083015261207281612036565b9050919050565b600081905092915050565b600061208f82611cd1565b6120998185612079565b93506120a9818560208601611ced565b80840191505092915050565b60006120c18284612084565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612102601d836116de565b915061210d826120cc565b602082019050919050565b60006020820190508181036000830152612131816120f5565b9050919050565b600081519050919050565b600061214e82612138565b61215881856116de565b9350612168818560208601611ced565b6121718161180e565b840191505092915050565b600060208201905081810360008301526121968184612143565b90509291505056fea264697066735822122075ec023c7bb75d79d7bdf671578e32139c7849fb6f80f517f8743ebc35027d9064736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c80633268cc561461002e5780637bb26ca714610059575b600080fd5b34801561003a57600080fd5b50610043610089565b6040516100509190611303565b60405180910390f35b610073600480360381019061006e91906113ed565b6100ad565b60405161008091906116bc565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6100b561120b565b600185859050146100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f290611761565b60405180910390fd5b60008585600081811061011157610110611781565b5b905060600201600001602001602081019061012c91906117dc565b90506101967f00000000000000000000000000000000000000000000000000000000000000008787600081811061016657610165611781565b5b905060600201604001358373ffffffffffffffffffffffffffffffffffffffff1661052e9092919063ffffffff16565b600084848101906101a79190611bcc565b90506000816000015160200151905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101f19190611303565b602060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190611c41565b905060008989600081811061024a57610249611781565b5b905060600201604001359050600061027e8b8b600081811061026f5761026e611781565b5b905060600201604001356105b4565b905060005b85602001515181101561042d576000866020015182815181106102a9576102a8611781565b5b6020026020010151905060006102c28260200151610631565b9050600060018960200151516102d89190611c9d565b8410156103275761032061030886846fffffffffffffffffffffffffffffffff19166106de90919063ffffffff16565b6fffffffffffffffffffffffffffffffff1916610b69565b905061032b565b8590505b60006040518060800160405280856000015181526020013073ffffffffffffffffffffffffffffffffffffffff168152602001838152602001600081525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b858183f826040518263ffffffff1660e01b81526004016103c49190611dbc565b6020604051808303816000875af11580156103e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104079190611c41565b5081876104149190611c9d565b965050505050808061042590611dde565b915050610283565b5060008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104699190611303565b602060405180830381865afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611c41565b905061051986600001516020015185836104c49190611c9d565b61050a8f8f60008181106104db576104da611781565b5b9050606002018036038101906104f19190611e8b565b6104fc600180610c67565b610dac90919063ffffffff16565b610df89092919063ffffffff16565b60400151975050505050505050949350505050565b6105af8363095ea7b360e01b848460405160240161054d929190611ec7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e96565b505050565b60008082036105c957600060801b905061062c565b600082905060006105d982610f5d565b905060708110156105f2578060700382901b9150610606565b6070811115610605576070810382901c91505b5b607081613fff01901b6dffffffffffffffffffffffffffff83161791508160801b925050505b919050565b600080820361064657600060801b90506106d9565b6000808313610658578260000361065a565b825b9050600061066782610f5d565b90506070811015610680578060700382901b9150610694565b6070811115610693576070810382901c91505b5b607081613f7f01901b6dffffffffffffffffffffffffffff831617915060008412156106d0576f80000000000000000000000000000000821791505b8160801b925050505b919050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff820361087057617fff81036107ff57836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff1916036107a7576f8000000000000000000000000000000060801b8416851892505050610b63565b6f8000000000000000000000000000000060801b8486186fffffffffffffffffffffffffffffffff1916036107e25783851792505050610b63565b6f7fff800000000000000000000000000060801b92505050610b63565b600060801b6f7fffffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff19160361084f576f7fff800000000000000000000000000060801b92505050610b63565b6f8000000000000000000000000000000060801b8416851892505050610b63565b617fff81036108ea57600060801b6f7fffffffffffffffffffffffffffffff60801b86166fffffffffffffffffffffffffffffffff1916036108c9576f7fff800000000000000000000000000060801b92505050610b63565b6f8000000000000000000000000000000060801b8516841892505050610b63565b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff16905060008303610925576001925061093a565b6e010000000000000000000000000000811790505b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff16905060008303610975576001925061098a565b6e010000000000000000000000000000811790505b8082029150600082036109f657600060801b6f8000000000000000000000000000000060801b878918166fffffffffffffffffffffffffffffffff1916116109d657600060801b6109eb565b6f8000000000000000000000000000000060801b5b945050505050610b63565b828401935060007c0200000000000000000000000000000000000000000000000000000000831015610a5d577c0100000000000000000000000000000000000000000000000000000000831015610a5557610a5083610f5d565b610a58565b60e05b610a60565b60e15b90506140708186011015610a7b576000945060009250610b23565b6140e08186011015610abf57614070851015610aa057846140700383901c9250610ab6565b614070851115610ab557614070850383901b92505b5b60009450610b22565b61c0dd8186011115610ad957617fff945060009250610b21565b6070811115610af0576070810383901c9250610b04565b6070811015610b03578060700383901b92505b5b6dffffffffffffffffffffffffffff831692506140df8186010394505b5b5b82607086901b6f8000000000000000000000000000000060801b898b181660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b600080617fff60708460801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050613fff811015610bb2576000915050610c62565b6f800000000000000000000000000000008360801c6fffffffffffffffffffffffffffffffff1610610be357600080fd5b6140fe811115610bf257600080fd5b60006e0100000000000000000000000000006dffffffffffffffffffffffffffff8560801c6fffffffffffffffffffffffffffffffff161617905061406f821015610c46578161406f0381901c9050610c5c565b61406f821115610c5b5761406f820381901b90505b5b80925050505b919050565b610c6f611239565b60008367ffffffffffffffff811115610c8b57610c8a61181f565b5b604051908082528060200260200182016040528015610cc457816020015b610cb1611260565b815260200190600190039081610ca95790505b50905060008367ffffffffffffffff811115610ce357610ce261181f565b5b604051908082528060200260200182016040528015610d1c57816020015b610d09611260565b815260200190600190039081610d015790505b5090506040518060600160405280600081526020016000815260200160405180608001604052808581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b8152508152509250505092915050565b610db4611239565b81836040015160000151846000018051809190610dd090611dde565b81525081518110610de457610de3611781565b5b602002602001018190525082905092915050565b610e00611239565b6040518060400160405280604051806040016040528060016002811115610e2a57610e2961149a565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815250815260200183815250846040015160200151856020018051809190610e6d90611dde565b81525081518110610e8157610e80611781565b5b60200260200101819052508390509392505050565b6000610ef8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661103e9092919063ffffffff16565b9050600081511115610f585780806020019051810190610f189190611f28565b610f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4e90611fc7565b60405180910390fd5b5b505050565b6000808211610f6b57600080fd5b60007001000000000000000000000000000000008310610f9357608083901c92506080810190505b680100000000000000008310610fb157604083901c92506040810190505b6401000000008310610fcb57602083901c92506020810190505b620100008310610fe357601083901c92506010810190505b6101008310610ffa57600883901c92506008810190505b6010831061101057600483901c92506004810190505b6004831061102657600283901c92506002810190505b60028310611035576001810190505b80915050919050565b606061104d8484600085611056565b90509392505050565b60608247101561109b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109290612059565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516110c491906120b5565b60006040518083038185875af1925050503d8060008114611101576040519150601f19603f3d011682016040523d82523d6000602084013e611106565b606091505b509150915061111787838387611123565b92505050949350505050565b6060831561118557600083510361117d5761113d85611198565b61117c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117390612118565b60405180910390fd5b5b829050611190565b61118f83836111bb565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156111ce5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611202919061217c565b60405180910390fd5b60405180608001604052806060815260200160608152602001600060010b8152602001600060020b81525090565b6040518060600160405280600081526020016000815260200161125a61120b565b81525090565b6040518060400160405280611273611280565b8152602001600081525090565b60405180604001604052806000600281111561129f5761129e61149a565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112ed826112c2565b9050919050565b6112fd816112e2565b82525050565b600060208201905061131860008301846112f4565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261135757611356611332565b5b8235905067ffffffffffffffff81111561137457611373611337565b5b6020830191508360608202830111156113905761138f61133c565b5b9250929050565b60008083601f8401126113ad576113ac611332565b5b8235905067ffffffffffffffff8111156113ca576113c9611337565b5b6020830191508360018202830111156113e6576113e561133c565b5b9250929050565b6000806000806040858703121561140757611406611328565b5b600085013567ffffffffffffffff8111156114255761142461132d565b5b61143187828801611341565b9450945050602085013567ffffffffffffffff8111156114545761145361132d565b5b61146087828801611397565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106114da576114d961149a565b5b50565b60008190506114eb826114c9565b919050565b60006114fb826114dd565b9050919050565b61150b816114f0565b82525050565b61151a816112e2565b82525050565b6040820160008201516115366000850182611502565b5060208201516115496020850182611511565b50505050565b6000819050919050565b6115628161154f565b82525050565b60608201600082015161157e6000850182611520565b5060208201516115916040850182611559565b50505050565b60006115a38383611568565b60608301905092915050565b6000602082019050919050565b60006115c78261146e565b6115d18185611479565b93506115dc8361148a565b8060005b8381101561160d5781516115f48882611597565b97506115ff836115af565b9250506001810190506115e0565b5085935050505092915050565b60008160010b9050919050565b6116308161161a565b82525050565b60008160020b9050919050565b61164c81611636565b82525050565b6000608083016000830151848203600086015261166f82826115bc565b9150506020830151848203602086015261168982826115bc565b915050604083015161169e6040860182611627565b5060608301516116b16060860182611643565b508091505092915050565b600060208201905081810360008301526116d68184611652565b905092915050565b600082825260208201905092915050565b7f7468657265206d7573742062652065786163746c79203120696e70757420617360008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b600061174b6023836116de565b9150611756826116ef565b604082019050919050565b6000602082019050818103600083015261177a8161173e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6117b9816112e2565b81146117c457600080fd5b50565b6000813590506117d6816117b0565b92915050565b6000602082840312156117f2576117f1611328565b5b6000611800848285016117c7565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118578261180e565b810181811067ffffffffffffffff821117156118765761187561181f565b5b80604052505050565b600061188961131e565b9050611895828261184e565b919050565b600080fd5b600381106118ac57600080fd5b50565b6000813590506118be8161189f565b92915050565b6000604082840312156118da576118d9611809565b5b6118e4604061187f565b905060006118f4848285016118af565b6000830152506020611908848285016117c7565b60208301525092915050565b600067ffffffffffffffff82111561192f5761192e61181f565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156119605761195f61181f565b5b6119698261180e565b9050602081019050919050565b82818337600083830152505050565b600061199861199384611945565b61187f565b9050828152602081018484840111156119b4576119b3611940565b5b6119bf848285611976565b509392505050565b600082601f8301126119dc576119db611332565b5b81356119ec848260208601611985565b91505092915050565b6000819050919050565b611a08816119f5565b8114611a1357600080fd5b50565b600081359050611a25816119ff565b92915050565b600060408284031215611a4157611a40611809565b5b611a4b604061187f565b9050600082013567ffffffffffffffff811115611a6b57611a6a61189a565b5b611a77848285016119c7565b6000830152506020611a8b84828501611a16565b60208301525092915050565b6000611aaa611aa584611914565b61187f565b90508083825260208201905060208402830185811115611acd57611acc61133c565b5b835b81811015611b1457803567ffffffffffffffff811115611af257611af1611332565b5b808601611aff8982611a2b565b85526020850194505050602081019050611acf565b5050509392505050565b600082601f830112611b3357611b32611332565b5b8135611b43848260208601611a97565b91505092915050565b600060808284031215611b6257611b61611809565b5b611b6c606061187f565b90506000611b7c848285016118c4565b600083015250604082013567ffffffffffffffff811115611ba057611b9f61189a565b5b611bac84828501611b1e565b6020830152506060611bc084828501611a16565b60408301525092915050565b600060208284031215611be257611be1611328565b5b600082013567ffffffffffffffff811115611c0057611bff61132d565b5b611c0c84828501611b4c565b91505092915050565b611c1e8161154f565b8114611c2957600080fd5b50565b600081519050611c3b81611c15565b92915050565b600060208284031215611c5757611c56611328565b5b6000611c6584828501611c2c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ca88261154f565b9150611cb38361154f565b925082821015611cc657611cc5611c6e565b5b828203905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d0b578082015181840152602081019050611cf0565b83811115611d1a576000848401525b50505050565b6000611d2b82611cd1565b611d358185611cdc565b9350611d45818560208601611ced565b611d4e8161180e565b840191505092915050565b60006080830160008301518482036000860152611d768282611d20565b9150506020830151611d8b6020860182611511565b506040830151611d9e6040860182611559565b506060830151611db16060860182611559565b508091505092915050565b60006020820190508181036000830152611dd68184611d59565b905092915050565b6000611de98261154f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e1b57611e1a611c6e565b5b600182019050919050565b600081359050611e3581611c15565b92915050565b600060608284031215611e5157611e50611809565b5b611e5b604061187f565b90506000611e6b848285016118c4565b6000830152506040611e7f84828501611e26565b60208301525092915050565b600060608284031215611ea157611ea0611328565b5b6000611eaf84828501611e3b565b91505092915050565b611ec18161154f565b82525050565b6000604082019050611edc60008301856112f4565b611ee96020830184611eb8565b9392505050565b60008115159050919050565b611f0581611ef0565b8114611f1057600080fd5b50565b600081519050611f2281611efc565b92915050565b600060208284031215611f3e57611f3d611328565b5b6000611f4c84828501611f13565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611fb1602a836116de565b9150611fbc82611f55565b604082019050919050565b60006020820190508181036000830152611fe081611fa4565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006120436026836116de565b915061204e82611fe7565b604082019050919050565b6000602082019050818103600083015261207281612036565b9050919050565b600081905092915050565b600061208f82611cd1565b6120998185612079565b93506120a9818560208601611ced565b80840191505092915050565b60006120c18284612084565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612102601d836116de565b915061210d826120cc565b602082019050919050565b60006020820190508181036000830152612131816120f5565b9050919050565b600081519050919050565b600061214e82612138565b61215881856116de565b9350612168818560208601611ced565b6121718161180e565b840191505092915050565b600060208201905081810360008301526121968184612143565b90509291505056fea264697066735822122075ec023c7bb75d79d7bdf671578e32139c7849fb6f80f517f8743ebc35027d9064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}