{
  "language": "Solidity",
  "sources": {
    "@freemarket/core/contracts/IWorkflowStep.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"./model/Asset.sol\";\nimport \"./model/AssetAmount.sol\";\nimport \"./model/WorkflowStepResult.sol\";\n\n/// @title The interface between WorkflowRunner and each Step implementation.abi\n/// @author Marty Saxton\n/// @notice All steps must implement this interface.\ninterface IWorkflowStep {\n    /// @notice called by WorkflowRunner to execute a workflow step.\n    /// @param assetAmounts AssetAmounts to be used by the step\n    /// @param argData Step specific arguments in ABI encoding\n    /// @return the outcome of the step invocation\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\n        external\n        payable\n        returns (WorkflowStepResult memory);\n}\n"
    },
    "@freemarket/core/contracts/model/Asset.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"./AssetType.sol\";\n\nstruct Asset {\n    AssetType assetType;\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\n}\n"
    },
    "@freemarket/core/contracts/model/AssetAmount.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport './Asset.sol';\n\nstruct AssetAmount {\n  Asset asset;\n  uint256 amount;\n}\n"
    },
    "@freemarket/core/contracts/model/AssetType.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nenum AssetType {\n    Native,\n    ERC20,\n    ERC721\n}\n"
    },
    "@freemarket/core/contracts/model/WorkflowStepResult.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport './AssetAmount.sol';\n\n// The return value from the execution of a step.\nstruct WorkflowStepResult {\n  // The amounts of each input asset that resulted from the step execution.\n  AssetAmount[] inputAssetAmounts;\n  // The amounts of each output asset that resulted from the step execution.\n  AssetAmount[] outputAssetAmounts;\n  // The amounts of each output asset that resulted from the step execution.\n  AssetAmount[] outputAssetAmountsToCaller;\n  // The index of the next step in a workflow.\n  // This value allows the step to override the default nextStepIndex\n  // statically defined\n  // -1 means terminate the workflow\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\n  int16 nextStepIndex;\n  // the fee to be withheald out of the output assets (in absolute currency units)\n  // -1 means use the default fee\n  int24 fee;\n}\n"
    },
    "@freemarket/step-sdk/contracts/ABDKMathQuad.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\n/*\n * ABDK Math Quad Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n */\npragma solidity ^0.8.13;\n\n/**\n * Smart contract library of mathematical functions operating with IEEE 754\n * quadruple-precision binary floating-point numbers (quadruple precision\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\n * represented by bytes16 type.\n */\nlibrary ABDKMathQuad {\n    /*\n    * 0.\n    */\n    bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\n\n    /*\n    * -0.\n    */\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\n\n    /*\n    * +Infinity.\n    */\n    bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\n\n    /*\n    * -Infinity.\n    */\n    bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\n\n    /*\n    * Canonical NaN value.\n    */\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\n\n    /**\n     * Convert signed 256-bit integer number into quadruple precision number.\n     *\n     * @param x signed 256-bit integer number\n     * @return quadruple precision number\n     */\n    function fromInt(int256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) {\n                return bytes16(0);\n            } else {\n                // We rely on overflow behavior here\n                uint256 result = uint256(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 256-bit integer number\n     * rounding towards zero.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 256-bit integer number\n     */\n    function toInt(bytes16 x) internal pure returns (int256) {\n        unchecked {\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\n\n            require(exponent <= 16638); // Overflow\n            if (exponent < 16383) return 0; // Underflow\n\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\n\n            if (exponent < 16495) result >>= 16495 - exponent;\n            else if (exponent > 16495) result <<= exponent - 16495;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\n                return -int256(result); // We rely on overflow behavior here\n            } else {\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int256(result);\n            }\n        }\n    }\n\n    /**\n     * Convert unsigned 256-bit integer number into quadruple precision number.\n     *\n     * @param x unsigned 256-bit integer number\n     * @return quadruple precision number\n     */\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) {\n                return bytes16(0);\n            } else {\n                uint256 result = x;\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into unsigned 256-bit integer number\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\n     * without error, because they are rounded to zero.\n     *\n     * @param x quadruple precision number\n     * @return unsigned 256-bit integer number\n     */\n    function toUInt(bytes16 x) internal pure returns (uint256) {\n        unchecked {\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\n\n            if (exponent < 16383) return 0; // Underflow\n\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\n\n            require(exponent <= 16638); // Overflow\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\n\n            if (exponent < 16495) result >>= 16495 - exponent;\n            else if (exponent > 16495) result <<= exponent - 16495;\n\n            return result;\n        }\n    }\n\n    /**\n     * Convert signed 128.128 bit fixed point number into quadruple precision\n     * number.\n     *\n     * @param x signed 128.128 bit fixed point number\n     * @return quadruple precision number\n     */\n    function from128x128(int256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) {\n                return bytes16(0);\n            } else {\n                // We rely on overflow behavior here\n                uint256 result = uint256(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 128.128 bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 128.128 bit fixed point number\n     */\n    function to128x128(bytes16 x) internal pure returns (int256) {\n        unchecked {\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\n\n            require(exponent <= 16510); // Overflow\n            if (exponent < 16255) return 0; // Underflow\n\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\n\n            if (exponent < 16367) result >>= 16367 - exponent;\n            else if (exponent > 16367) result <<= exponent - 16367;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\n                return -int256(result); // We rely on overflow behavior here\n            } else {\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int256(result);\n            }\n        }\n    }\n\n    /**\n     * Convert signed 64.64 bit fixed point number into quadruple precision\n     * number.\n     *\n     * @param x signed 64.64 bit fixed point number\n     * @return quadruple precision number\n     */\n    function from64x64(int128 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) {\n                return bytes16(0);\n            } else {\n                // We rely on overflow behavior here\n                uint256 result = uint128(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 64.64 bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 64.64 bit fixed point number\n     */\n    function to64x64(bytes16 x) internal pure returns (int128) {\n        unchecked {\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\n\n            require(exponent <= 16446); // Overflow\n            if (exponent < 16319) return 0; // Underflow\n\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\n\n            if (exponent < 16431) result >>= 16431 - exponent;\n            else if (exponent > 16431) result <<= exponent - 16431;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(result <= 0x80000000000000000000000000000000);\n                return -int128(int256(result)); // We rely on overflow behavior here\n            } else {\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int128(int256(result));\n            }\n        }\n    }\n\n    /**\n     * Convert octuple precision number into quadruple precision number.\n     *\n     * @param x octuple precision number\n     * @return quadruple precision number\n     */\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\n        unchecked {\n            bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\n\n            uint256 exponent = uint256(x) >> 236 & 0x7FFFF;\n            uint256 significand = uint256(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFFF) {\n                if (significand > 0) return NaN;\n                else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n            }\n\n            if (exponent > 278526) {\n                return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n            } else if (exponent < 245649) {\n                return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\n            } else if (exponent < 245761) {\n                significand =\n                    (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\n                exponent = 0;\n            } else {\n                significand >>= 124;\n                exponent -= 245760;\n            }\n\n            uint128 result = uint128(significand | exponent << 112);\n            if (negative) result |= 0x80000000000000000000000000000000;\n\n            return bytes16(result);\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into octuple precision number.\n     *\n     * @param x quadruple precision number\n     * @return octuple precision number\n     */\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\n        unchecked {\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\n\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFF) {\n                exponent = 0x7FFFF;\n            } // Infinity or NaN\n            else if (exponent == 0) {\n                if (result > 0) {\n                    uint256 msb = mostSignificantBit(result);\n                    result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    exponent = 245649 + msb;\n                }\n            } else {\n                result <<= 124;\n                exponent += 245760;\n            }\n\n            result |= exponent << 236;\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\n            }\n\n            return bytes32(result);\n        }\n    }\n\n    /**\n     * Convert double precision number into quadruple precision number.\n     *\n     * @param x double precision number\n     * @return quadruple precision number\n     */\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\n        unchecked {\n            uint256 exponent = uint64(x) >> 52 & 0x7FF;\n\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FF) {\n                exponent = 0x7FFF;\n            } // Infinity or NaN\n            else if (exponent == 0) {\n                if (result > 0) {\n                    uint256 msb = mostSignificantBit(result);\n                    result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    exponent = 15309 + msb;\n                }\n            } else {\n                result <<= 60;\n                exponent += 15360;\n            }\n\n            result |= exponent << 112;\n            if (x & 0x8000000000000000 > 0) {\n                result |= 0x80000000000000000000000000000000;\n            }\n\n            return bytes16(uint128(result));\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into double precision number.\n     *\n     * @param x quadruple precision number\n     * @return double precision number\n     */\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\n        unchecked {\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\n\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFF) {\n                if (significand > 0) {\n                    return 0x7FF8000000000000;\n                } // NaN\n                else {\n                    return negative\n                        ? bytes8(0xFFF0000000000000) // -Infinity\n                        : bytes8(0x7FF0000000000000);\n                } // Infinity\n            }\n\n            if (exponent > 17406) {\n                return negative\n                    ? bytes8(0xFFF0000000000000) // -Infinity\n                    : bytes8(0x7FF0000000000000);\n            } // Infinity\n            else if (exponent < 15309) {\n                return negative\n                    ? bytes8(0x8000000000000000) // -0\n                    : bytes8(0x0000000000000000);\n            } // 0\n            else if (exponent < 15361) {\n                significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\n                exponent = 0;\n            } else {\n                significand >>= 60;\n                exponent -= 15360;\n            }\n\n            uint64 result = uint64(significand | exponent << 52);\n            if (negative) result |= 0x8000000000000000;\n\n            return bytes8(result);\n        }\n    }\n\n    /**\n     * Test whether given quadruple precision number is NaN.\n     *\n     * @param x quadruple precision number\n     * @return true if x is NaN, false otherwise\n     */\n    function isNaN(bytes16 x) internal pure returns (bool) {\n        unchecked {\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF > 0x7FFF0000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Test whether given quadruple precision number is positive or negative\n     * infinity.\n     *\n     * @param x quadruple precision number\n     * @return true if x is positive or negative infinity, false otherwise\n     */\n    function isInfinity(bytes16 x) internal pure returns (bool) {\n        unchecked {\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0x7FFF0000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\n     *\n     * @param x quadruple precision number\n     * @return sign of x\n     */\n    function sign(bytes16 x) internal pure returns (int8) {\n        unchecked {\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            if (absoluteX == 0) return 0;\n            else if (uint128(x) >= 0x80000000000000000000000000000000) return -1;\n            else return 1;\n        }\n    }\n\n    /**\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\n     * arguments are infinities of the same sign.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return sign (x - y)\n     */\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\n        unchecked {\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            // Not infinities of the same sign\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\n\n            if (x == y) {\n                return 0;\n            } else {\n                bool negativeX = uint128(x) >= 0x80000000000000000000000000000000;\n                bool negativeY = uint128(y) >= 0x80000000000000000000000000000000;\n\n                if (negativeX) {\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\n                    else return -1;\n                } else {\n                    if (negativeY) return 1;\n                    else return absoluteX > absoluteY ? int8(1) : -1;\n                }\n            }\n        }\n    }\n\n    /**\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\n     * anything.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return true if x equals to y, false otherwise\n     */\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\n        unchecked {\n            if (x == y) {\n                return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF < 0x7FFF0000000000000000000000000000;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Calculate x + y.  Special values behave in the following way:\n     *\n     * NaN + x = NaN for any x.\n     * Infinity + x = Infinity for any finite x.\n     * -Infinity + x = -Infinity for any finite x.\n     * Infinity + Infinity = Infinity.\n     * -Infinity + -Infinity = -Infinity.\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) {\n                    if (x == y) return x;\n                    else return NaN;\n                } else {\n                    return x;\n                }\n            } else if (yExponent == 0x7FFF) {\n                return y;\n            } else {\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                if (xSignifier == 0) {\n                    return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\n                } else if (ySignifier == 0) {\n                    return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\n                } else {\n                    int256 delta = int256(xExponent) - int256(yExponent);\n\n                    if (xSign == ySign) {\n                        if (delta > 112) {\n                            return x;\n                        } else if (delta > 0) {\n                            ySignifier >>= uint256(delta);\n                        } else if (delta < -112) {\n                            return y;\n                        } else if (delta < 0) {\n                            xSignifier >>= uint256(-delta);\n                            xExponent = yExponent;\n                        }\n\n                        xSignifier += ySignifier;\n\n                        if (xSignifier >= 0x20000000000000000000000000000) {\n                            xSignifier >>= 1;\n                            xExponent += 1;\n                        }\n\n                        if (xExponent == 0x7FFF) {\n                            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n                        } else {\n                            if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                            return bytes16(\n                                uint128(\n                                    (xSign ? 0x80000000000000000000000000000000 : 0) | (xExponent << 112) | xSignifier\n                                )\n                            );\n                        }\n                    } else {\n                        if (delta > 0) {\n                            xSignifier <<= 1;\n                            xExponent -= 1;\n                        } else if (delta < 0) {\n                            ySignifier <<= 1;\n                            xExponent = yExponent - 1;\n                        }\n\n                        if (delta > 112) ySignifier = 1;\n                        else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256(delta - 1)) + 1;\n                        else if (delta < -112) xSignifier = 1;\n                        else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256(-delta - 1)) + 1;\n\n                        if (xSignifier >= ySignifier) {\n                            xSignifier -= ySignifier;\n                        } else {\n                            xSignifier = ySignifier - xSignifier;\n                            xSign = ySign;\n                        }\n\n                        if (xSignifier == 0) {\n                            return POSITIVE_ZERO;\n                        }\n\n                        uint256 msb = mostSignificantBit(xSignifier);\n\n                        if (msb == 113) {\n                            xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                            xExponent += 1;\n                        } else if (msb < 112) {\n                            uint256 shift = 112 - msb;\n                            if (xExponent > shift) {\n                                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                                xExponent -= shift;\n                            } else {\n                                xSignifier <<= xExponent - 1;\n                                xExponent = 0;\n                            }\n                        } else {\n                            xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                        }\n\n                        if (xExponent == 0x7FFF) {\n                            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n                        } else {\n                            return bytes16(\n                                uint128(\n                                    (xSign ? 0x80000000000000000000000000000000 : 0) | (xExponent << 112) | xSignifier\n                                )\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate x - y.  Special values behave in the following way:\n     *\n     * NaN - x = NaN for any x.\n     * Infinity - x = Infinity for any finite x.\n     * -Infinity - x = -Infinity for any finite x.\n     * Infinity - -Infinity = Infinity.\n     * -Infinity - Infinity = -Infinity.\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            return add(x, y ^ 0x80000000000000000000000000000000);\n        }\n    }\n\n    /**\n     * Calculate x * y.  Special values behave in the following way:\n     *\n     * NaN * x = NaN for any x.\n     * Infinity * x = Infinity for any finite positive x.\n     * Infinity * x = -Infinity for any finite negative x.\n     * -Infinity * x = -Infinity for any finite positive x.\n     * -Infinity * x = Infinity for any finite negative x.\n     * Infinity * 0 = NaN.\n     * -Infinity * 0 = NaN.\n     * Infinity * Infinity = Infinity.\n     * Infinity * -Infinity = -Infinity.\n     * -Infinity * Infinity = -Infinity.\n     * -Infinity * -Infinity = Infinity.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) {\n                    if (x == y) return x ^ y & 0x80000000000000000000000000000000;\n                    else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\n                    else return NaN;\n                } else {\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                    else return x ^ y & 0x80000000000000000000000000000000;\n                }\n            } else if (yExponent == 0x7FFF) {\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                else return y ^ x & 0x80000000000000000000000000000000;\n            } else {\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                xSignifier *= ySignifier;\n                if (xSignifier == 0) {\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\n                }\n\n                xExponent += yExponent;\n\n                uint256 msb = xSignifier >= 0x200000000000000000000000000000000000000000000000000000000\n                    ? 225\n                    : xSignifier >= 0x100000000000000000000000000000000000000000000000000000000\n                        ? 224\n                        : mostSignificantBit(xSignifier);\n\n                if (xExponent + msb < 16496) {\n                    // Underflow\n                    xExponent = 0;\n                    xSignifier = 0;\n                } else if (xExponent + msb < 16608) {\n                    // Subnormal\n                    if (xExponent < 16496) {\n                        xSignifier >>= 16496 - xExponent;\n                    } else if (xExponent > 16496) {\n                        xSignifier <<= xExponent - 16496;\n                    }\n                    xExponent = 0;\n                } else if (xExponent + msb > 49373) {\n                    xExponent = 0x7FFF;\n                    xSignifier = 0;\n                } else {\n                    if (msb > 112) {\n                        xSignifier >>= msb - 112;\n                    } else if (msb < 112) {\n                        xSignifier <<= 112 - msb;\n                    }\n\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                    xExponent = xExponent + msb - 16607;\n                }\n\n                return bytes16(\n                    uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | xExponent << 112 | xSignifier)\n                );\n            }\n        }\n    }\n\n    /**\n     * Calculate x / y.  Special values behave in the following way:\n     *\n     * NaN / x = NaN for any x.\n     * x / NaN = NaN for any x.\n     * Infinity / x = Infinity for any finite non-negative x.\n     * Infinity / x = -Infinity for any finite negative x including -0.\n     * -Infinity / x = -Infinity for any finite non-negative x.\n     * -Infinity / x = Infinity for any finite negative x including -0.\n     * x / Infinity = 0 for any finite non-negative x.\n     * x / -Infinity = -0 for any finite non-negative x.\n     * x / Infinity = -0 for any finite non-negative x including -0.\n     * x / -Infinity = 0 for any finite non-negative x including -0.\n     *\n     * Infinity / Infinity = NaN.\n     * Infinity / -Infinity = -NaN.\n     * -Infinity / Infinity = -NaN.\n     * -Infinity / -Infinity = NaN.\n     *\n     * Division by zero behaves in the following way:\n     *\n     * x / 0 = Infinity for any finite positive x.\n     * x / -0 = -Infinity for any finite positive x.\n     * x / 0 = -Infinity for any finite negative x.\n     * x / -0 = Infinity for any finite negative x.\n     * 0 / 0 = NaN.\n     * 0 / -0 = NaN.\n     * -0 / 0 = NaN.\n     * -0 / -0 = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) return NaN;\n                else return x ^ y & 0x80000000000000000000000000000000;\n            } else if (yExponent == 0x7FFF) {\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\n                else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\n            } else {\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) {\n                    if (xSignifier != 0) {\n                        uint256 shift = 226 - mostSignificantBit(xSignifier);\n\n                        xSignifier <<= shift;\n\n                        xExponent = 1;\n                        yExponent += shift - 114;\n                    }\n                } else {\n                    xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\n                }\n\n                xSignifier = xSignifier / ySignifier;\n                if (xSignifier == 0) {\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\n                }\n\n                assert(xSignifier >= 0x1000000000000000000000000000);\n\n                uint256 msb = xSignifier >= 0x80000000000000000000000000000\n                    ? mostSignificantBit(xSignifier)\n                    : xSignifier >= 0x40000000000000000000000000000\n                        ? 114\n                        : xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\n\n                if (xExponent + msb > yExponent + 16497) {\n                    // Overflow\n                    xExponent = 0x7FFF;\n                    xSignifier = 0;\n                } else if (xExponent + msb + 16380 < yExponent) {\n                    // Underflow\n                    xExponent = 0;\n                    xSignifier = 0;\n                } else if (xExponent + msb + 16268 < yExponent) {\n                    // Subnormal\n                    if (xExponent + 16380 > yExponent) {\n                        xSignifier <<= xExponent + 16380 - yExponent;\n                    } else if (xExponent + 16380 < yExponent) {\n                        xSignifier >>= yExponent - xExponent - 16380;\n                    }\n\n                    xExponent = 0;\n                } else {\n                    // Normal\n                    if (msb > 112) {\n                        xSignifier >>= msb - 112;\n                    }\n\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                    xExponent = xExponent + msb + 16269 - yExponent;\n                }\n\n                return bytes16(\n                    uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | xExponent << 112 | xSignifier)\n                );\n            }\n        }\n    }\n\n    /**\n     * Calculate -x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function neg(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return x ^ 0x80000000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Calculate |x|.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function abs(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        }\n    }\n\n    /**\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            if (uint128(x) > 0x80000000000000000000000000000000) {\n                return NaN;\n            } else {\n                uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\n                if (xExponent == 0x7FFF) {\n                    return x;\n                } else {\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    if (xExponent == 0) xExponent = 1;\n                    else xSignifier |= 0x10000000000000000000000000000;\n\n                    if (xSignifier == 0) return POSITIVE_ZERO;\n\n                    bool oddExponent = xExponent & 0x1 == 0;\n                    xExponent = xExponent + 16383 >> 1;\n\n                    if (oddExponent) {\n                        if (xSignifier >= 0x10000000000000000000000000000) {\n                            xSignifier <<= 113;\n                        } else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            uint256 shift = (226 - msb) & 0xFE;\n                            xSignifier <<= shift;\n                            xExponent -= shift - 112 >> 1;\n                        }\n                    } else {\n                        if (xSignifier >= 0x10000000000000000000000000000) {\n                            xSignifier <<= 112;\n                        } else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            uint256 shift = (225 - msb) & 0xFE;\n                            xSignifier <<= shift;\n                            xExponent -= shift - 112 >> 1;\n                        }\n                    }\n\n                    uint256 r = 0x10000000000000000000000000000;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\n                    uint256 r1 = xSignifier / r;\n                    if (r1 < r) r = r1;\n\n                    return bytes16(uint128(xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function log_2(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            if (uint128(x) > 0x80000000000000000000000000000000) {\n                return NaN;\n            } else if (x == 0x3FFF0000000000000000000000000000) {\n                return POSITIVE_ZERO;\n            } else {\n                uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\n                if (xExponent == 0x7FFF) {\n                    return x;\n                } else {\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    if (xExponent == 0) xExponent = 1;\n                    else xSignifier |= 0x10000000000000000000000000000;\n\n                    if (xSignifier == 0) return NEGATIVE_INFINITY;\n\n                    bool resultNegative;\n                    uint256 resultExponent = 16495;\n                    uint256 resultSignifier;\n\n                    if (xExponent >= 0x3FFF) {\n                        resultNegative = false;\n                        resultSignifier = xExponent - 0x3FFF;\n                        xSignifier <<= 15;\n                    } else {\n                        resultNegative = true;\n                        if (xSignifier >= 0x10000000000000000000000000000) {\n                            resultSignifier = 0x3FFE - xExponent;\n                            xSignifier <<= 15;\n                        } else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            resultSignifier = 16493 - msb;\n                            xSignifier <<= 127 - msb;\n                        }\n                    }\n\n                    if (xSignifier == 0x80000000000000000000000000000000) {\n                        if (resultNegative) resultSignifier += 1;\n                        uint256 shift = 112 - mostSignificantBit(resultSignifier);\n                        resultSignifier <<= shift;\n                        resultExponent -= shift;\n                    } else {\n                        uint256 bb = resultNegative ? 1 : 0;\n                        while (resultSignifier < 0x10000000000000000000000000000) {\n                            resultSignifier <<= 1;\n                            resultExponent -= 1;\n\n                            xSignifier *= xSignifier;\n                            uint256 b = xSignifier >> 255;\n                            resultSignifier += b ^ bb;\n                            xSignifier >>= 127 + b;\n                        }\n                    }\n\n                    return bytes16(\n                        uint128(\n                            (resultNegative ? 0x80000000000000000000000000000000 : 0) | resultExponent << 112\n                                | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                        )\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function ln(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\n        }\n    }\n\n    /**\n     * Calculate 2^x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (xExponent == 0x7FFF && xSignifier != 0) {\n                return NaN;\n            } else if (xExponent > 16397) {\n                return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\n            } else if (xExponent < 16255) {\n                return 0x3FFF0000000000000000000000000000;\n            } else {\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                if (xExponent > 16367) {\n                    xSignifier <<= xExponent - 16367;\n                } else if (xExponent < 16367) {\n                    xSignifier >>= 16367 - xExponent;\n                }\n\n                if (xNegative && xSignifier > 0x406E00000000000000000000000000000000) {\n                    return POSITIVE_ZERO;\n                }\n\n                if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\n                    return POSITIVE_INFINITY;\n                }\n\n                uint256 resultExponent = xSignifier >> 128;\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xNegative && xSignifier != 0) {\n                    xSignifier = ~xSignifier;\n                    resultExponent += 1;\n                }\n\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\n                if (xSignifier & 0x80000000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\n                }\n                if (xSignifier & 0x40000000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\n                }\n                if (xSignifier & 0x20000000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\n                }\n                if (xSignifier & 0x10000000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\n                }\n                if (xSignifier & 0x8000000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\n                }\n                if (xSignifier & 0x4000000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\n                }\n                if (xSignifier & 0x2000000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\n                }\n                if (xSignifier & 0x1000000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\n                }\n                if (xSignifier & 0x800000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\n                }\n                if (xSignifier & 0x400000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\n                }\n                if (xSignifier & 0x200000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\n                }\n                if (xSignifier & 0x100000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\n                }\n                if (xSignifier & 0x80000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\n                }\n                if (xSignifier & 0x40000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\n                }\n                if (xSignifier & 0x20000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\n                }\n                if (xSignifier & 0x10000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\n                }\n                if (xSignifier & 0x8000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\n                }\n                if (xSignifier & 0x4000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\n                }\n                if (xSignifier & 0x2000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\n                }\n                if (xSignifier & 0x1000000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\n                }\n                if (xSignifier & 0x800000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\n                }\n                if (xSignifier & 0x400000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\n                }\n                if (xSignifier & 0x200000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\n                }\n                if (xSignifier & 0x100000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\n                }\n                if (xSignifier & 0x80000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\n                }\n                if (xSignifier & 0x40000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\n                }\n                if (xSignifier & 0x20000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\n                }\n                if (xSignifier & 0x10000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\n                }\n                if (xSignifier & 0x8000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\n                }\n                if (xSignifier & 0x4000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\n                }\n                if (xSignifier & 0x2000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\n                }\n                if (xSignifier & 0x1000000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\n                }\n                if (xSignifier & 0x800000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\n                }\n                if (xSignifier & 0x400000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\n                }\n                if (xSignifier & 0x200000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\n                }\n                if (xSignifier & 0x100000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\n                }\n                if (xSignifier & 0x80000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\n                }\n                if (xSignifier & 0x40000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\n                }\n                if (xSignifier & 0x20000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\n                }\n                if (xSignifier & 0x10000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\n                }\n                if (xSignifier & 0x8000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\n                }\n                if (xSignifier & 0x4000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\n                }\n                if (xSignifier & 0x2000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\n                }\n                if (xSignifier & 0x1000000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\n                }\n                if (xSignifier & 0x800000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\n                }\n                if (xSignifier & 0x400000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\n                }\n                if (xSignifier & 0x200000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\n                }\n                if (xSignifier & 0x100000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\n                }\n                if (xSignifier & 0x80000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\n                }\n                if (xSignifier & 0x40000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\n                }\n                if (xSignifier & 0x20000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\n                }\n                if (xSignifier & 0x10000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\n                }\n                if (xSignifier & 0x8000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\n                }\n                if (xSignifier & 0x4000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\n                }\n                if (xSignifier & 0x2000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\n                }\n                if (xSignifier & 0x1000000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\n                }\n                if (xSignifier & 0x800000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\n                }\n                if (xSignifier & 0x400000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\n                }\n                if (xSignifier & 0x200000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\n                }\n                if (xSignifier & 0x100000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\n                }\n                if (xSignifier & 0x80000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\n                }\n                if (xSignifier & 0x40000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\n                }\n                if (xSignifier & 0x20000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\n                }\n                if (xSignifier & 0x10000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\n                }\n                if (xSignifier & 0x8000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\n                }\n                if (xSignifier & 0x4000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\n                }\n                if (xSignifier & 0x2000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\n                }\n                if (xSignifier & 0x1000000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\n                }\n                if (xSignifier & 0x800000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\n                }\n                if (xSignifier & 0x400000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\n                }\n                if (xSignifier & 0x200000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\n                }\n                if (xSignifier & 0x100000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\n                }\n                if (xSignifier & 0x80000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\n                }\n                if (xSignifier & 0x40000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\n                }\n                if (xSignifier & 0x20000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\n                }\n                if (xSignifier & 0x10000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\n                }\n                if (xSignifier & 0x8000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\n                }\n                if (xSignifier & 0x4000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\n                }\n                if (xSignifier & 0x2000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\n                }\n                if (xSignifier & 0x1000000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\n                }\n                if (xSignifier & 0x800000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\n                }\n                if (xSignifier & 0x400000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\n                }\n                if (xSignifier & 0x200000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\n                }\n                if (xSignifier & 0x100000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\n                }\n                if (xSignifier & 0x80000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\n                }\n                if (xSignifier & 0x40000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\n                }\n                if (xSignifier & 0x20000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\n                }\n                if (xSignifier & 0x10000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\n                }\n                if (xSignifier & 0x8000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\n                }\n                if (xSignifier & 0x4000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\n                }\n                if (xSignifier & 0x2000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\n                }\n                if (xSignifier & 0x1000000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\n                }\n                if (xSignifier & 0x800000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\n                }\n                if (xSignifier & 0x400000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\n                }\n                if (xSignifier & 0x200000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\n                }\n                if (xSignifier & 0x100000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\n                }\n                if (xSignifier & 0x80000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\n                }\n                if (xSignifier & 0x40000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\n                }\n                if (xSignifier & 0x20000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\n                }\n                if (xSignifier & 0x10000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\n                }\n                if (xSignifier & 0x8000000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\n                }\n                if (xSignifier & 0x4000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\n                }\n                if (xSignifier & 0x2000000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\n                }\n                if (xSignifier & 0x1000000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\n                }\n                if (xSignifier & 0x800000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\n                }\n                if (xSignifier & 0x400000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\n                }\n                if (xSignifier & 0x200000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\n                }\n                if (xSignifier & 0x100000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\n                }\n                if (xSignifier & 0x80000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\n                }\n                if (xSignifier & 0x40000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\n                }\n                if (xSignifier & 0x20000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\n                }\n                if (xSignifier & 0x10000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\n                }\n                if (xSignifier & 0x8000 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\n                }\n                if (xSignifier & 0x4000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\n                }\n                if (xSignifier & 0x2000 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\n                }\n                if (xSignifier & 0x1000 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\n                }\n                if (xSignifier & 0x800 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\n                }\n                if (xSignifier & 0x400 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\n                }\n                if (xSignifier & 0x200 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\n                }\n                if (xSignifier & 0x100 > 0) {\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\n                }\n                if (xSignifier & 0x80 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\n                }\n                if (xSignifier & 0x40 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\n                }\n                if (xSignifier & 0x20 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\n                }\n                if (xSignifier & 0x10 > 0) {\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\n                }\n                if (xSignifier & 0x8 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\n                }\n                if (xSignifier & 0x4 > 0) {\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\n                }\n\n                if (!xNegative) {\n                    resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    resultExponent += 0x3FFF;\n                } else if (resultExponent <= 0x3FFE) {\n                    resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    resultExponent = 0x3FFF - resultExponent;\n                } else {\n                    resultSignifier = resultSignifier >> resultExponent - 16367;\n                    resultExponent = 0;\n                }\n\n                return bytes16(uint128(resultExponent << 112 | resultSignifier));\n            }\n        }\n    }\n\n    /**\n     * Calculate e^x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function exp(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\n        }\n    }\n\n    /**\n     * Get index of the most significant non-zero bit in binary representation of\n     * x.  Reverts if x is zero.\n     *\n     * @return index of the most significant non-zero bit in binary representation\n     *         of x\n     */\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\n        unchecked {\n            require(x > 0);\n\n            uint256 result = 0;\n\n            if (x >= 0x100000000000000000000000000000000) {\n                x >>= 128;\n                result += 128;\n            }\n            if (x >= 0x10000000000000000) {\n                x >>= 64;\n                result += 64;\n            }\n            if (x >= 0x100000000) {\n                x >>= 32;\n                result += 32;\n            }\n            if (x >= 0x10000) {\n                x >>= 16;\n                result += 16;\n            }\n            if (x >= 0x100) {\n                x >>= 8;\n                result += 8;\n            }\n            if (x >= 0x10) {\n                x >>= 4;\n                result += 4;\n            }\n            if (x >= 0x4) {\n                x >>= 2;\n                result += 2;\n            }\n            if (x >= 0x2) result += 1; // No need to shift x anymore\n\n            return result;\n        }\n    }\n}\n"
    },
    "@freemarket/step-sdk/contracts/IWeth.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ninterface IWeth {\n  function deposit() external payable;\n\n  function withdraw(uint) external;\n}\n"
    },
    "@freemarket/step-sdk/contracts/LibErc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary LibErc20 {\n    using Address for address;\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // forked from openzeppelin but removed the require, just keeping optional return\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@freemarket/step-sdk/contracts/LibStepResultBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport '@freemarket/core/contracts/model/AssetType.sol';\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\n\nstruct StepResultBuilder {\n  uint256 inputIndex;\n  uint256 outputIndex;\n  uint256 outputToCallerIndex;\n  WorkflowStepResult result;\n}\n\nlibrary LibStepResultBuilder {\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\n    AssetAmount[] memory ouputAssetAmountsToCaller = new AssetAmount[](0);\n\n    return StepResultBuilder(0, 0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, ouputAssetAmountsToCaller, -2, -1));\n  }\n\n  function create(\n    uint256 inputAssetCount,\n    uint256 outputAssetCount,\n    uint256 outputAssetToCallerCount\n  ) internal pure returns (StepResultBuilder memory) {\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\n    AssetAmount[] memory ouputAssetToCallerAmounts = new AssetAmount[](outputAssetToCallerCount);\n\n    return StepResultBuilder(0, 0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, ouputAssetToCallerAmounts, -2, -1));\n  }\n\n  function addInputToken(\n    StepResultBuilder memory builder,\n    address tokenAddress,\n    uint256 amount\n  ) internal pure returns (StepResultBuilder memory) {\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\n    return builder;\n  }\n\n  function addInputAssetAmount(\n    StepResultBuilder memory builder,\n    AssetAmount memory assetAmount\n  ) internal pure returns (StepResultBuilder memory) {\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\n    return builder;\n  }\n\n  function addOutputToken(\n    StepResultBuilder memory builder,\n    address tokenAddress,\n    uint256 amount\n  ) internal pure returns (StepResultBuilder memory) {\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\n    return builder;\n  }\n\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\n    return builder;\n  }\n\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\n    return builder;\n  }\n\n  function addOutputAssetAmount(\n    StepResultBuilder memory builder,\n    AssetAmount memory assetAmount\n  ) internal pure returns (StepResultBuilder memory) {\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\n    return builder;\n  }\n\n  function addOutputAssetAmountToCaller(\n    StepResultBuilder memory builder,\n    AssetAmount memory assetAmount\n  ) internal pure returns (StepResultBuilder memory) {\n    builder.result.outputAssetAmountsToCaller[builder.outputToCallerIndex++] = assetAmount;\n    return builder;\n  }\n\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\n    builder.result.nextStepIndex = nextStepIndex;\n    return builder;\n  }\n\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\n    builder.result.fee = feeInDeciBips;\n    return builder;\n  }\n}\n"
    },
    "@freemarket/step-sdk/contracts/LibWethUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\nimport './IWeth.sol';\n\nlibrary LibWethUtils {\n  function wrapIfNecessary(AssetAmount memory assetAmount, address wethAddress) internal returns (address) {\n    if (assetAmount.asset.assetType == AssetType.Native) {\n      require(wethAddress != address(0), 'weth not supported on this chain');\n      IWeth(wethAddress).deposit{value: assetAmount.amount}();\n      return wethAddress;\n    }\n    return assetAmount.asset.assetAddress;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // â `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // â `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/AbstractUniswapAction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport './IV3SwapRouter.sol';\nimport '@freemarket/step-sdk/contracts/ABDKMathQuad.sol';\nusing ABDKMathQuad for bytes16;\n\nstruct UniswapRoute {\n  bytes encodedPath;\n  int256 portion; // like percent but already divided by 100\n  // uint256 minExchangeRate;\n}\n\nabstract contract AbstractUniswapAction {\n  address public immutable routerAddress;\n  address public immutable wethAddress;\n\n  constructor(address _routerAddress, address _wethAddress) {\n    routerAddress = _routerAddress;\n    wethAddress = _wethAddress;\n  }\n\n  function runRoute(uint256 amountRemaining, UniswapRoute[] memory routes, address inputAssetAddress, address outputAssetAddress) internal {\n    IERC20 inputAsset = IERC20(inputAssetAddress);\n    IERC20 outputAsset = IERC20(outputAssetAddress);\n    bytes16 fTotalAmount = ABDKMathQuad.fromUInt(amountRemaining);\n    for (uint256 i = 0; i < routes.length; ++i) {\n\n\n\n      UniswapRoute memory route = routes[i];\n      bytes16 portion = ABDKMathQuad.from128x128(route.portion);\n      uint256 amount;\n      // if this is the last route, use the remaining amount to avoid rounding errors\n      if (i < routes.length - 1) {\n        amount = portion.mul(fTotalAmount).toUInt();\n\n      } else {\n        amount = amountRemaining;\n\n      }\n      callUniswap(route.encodedPath, amount);\n      amountRemaining -= amount;\n    }\n  }\n\n  function callUniswap(bytes memory encodedPath, uint256 amount) internal virtual;\n\n  // there are just here for unit testing to enable weth.withdraw()\n  receive() external payable {}\n\n  fallback() external payable {}\n}\n"
    },
    "contracts/IV3SwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IV3SwapRouter {\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/UniswapExactInAction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\nimport '@freemarket/step-sdk/contracts/IWeth.sol';\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\n\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\nimport '@freemarket/step-sdk/contracts/LibErc20.sol';\nimport '@freemarket/step-sdk/contracts/LibWethUtils.sol';\nimport './AbstractUniswapAction.sol';\nimport '@freemarket/step-sdk/contracts/ABDKMathQuad.sol';\nusing ABDKMathQuad for bytes16;\n\nusing LibStepResultBuilder for StepResultBuilder;\nusing LibErc20 for IERC20;\n\nstruct UniswapExactInActionParams {\n  Asset toAsset;\n  UniswapRoute[] routes;\n  int256 worstExchangeRate;\n}\n\ncontract UniswapExactInAction is AbstractUniswapAction, IWorkflowStep {\n  event UniswapExactInActionEvent(address from, address to, uint256 amount, bool useNative);\n\n  constructor(address _routerAddress, address _wethAddress) AbstractUniswapAction(_routerAddress, _wethAddress) {}\n\n  struct Locals {\n    UniswapExactInActionParams args;\n    bytes16 worstExchangeRateFloat;\n    address inputTokenAddress;\n    IERC20 inputAsset;\n    address outputTokenAddress;\n    IERC20 outputAsset;\n    uint256 amountIn;\n    bytes16 amountInFloat;\n    uint256 outputAssetBalanceBefore;\n    uint256 outputAssetBalanceAfter;\n    uint256 amountReceived;\n    uint256 worstTolerableAmountReceived;\n  }\n\n  function execute(AssetAmount[] calldata inputAssetAmounts, bytes calldata argData) public payable returns (WorkflowStepResult memory) {\n\n\n    // validate\n    require(inputAssetAmounts.length == 1, 'there must be exactly 1 input asset');\n\n    Locals memory locals;\n\n    locals.args = abi.decode(argData, (UniswapExactInActionParams));\n    locals.worstExchangeRateFloat = ABDKMathQuad.from128x128(locals.args.worstExchangeRate);\n\n\n    if (\n      inputAssetAmounts[0].asset.assetAddress == locals.args.toAsset.assetAddress &&\n      inputAssetAmounts[0].asset.assetType == locals.args.toAsset.assetType\n    ) {\n      // swapping to same asset, no-op\n      return\n        LibStepResultBuilder\n          .create(1, 1)\n          .addInputAssetAmount(inputAssetAmounts[0])\n          .addOutputAssetAmount(AssetAmount(locals.args.toAsset, inputAssetAmounts[0].amount))\n          .result;\n    }\n\n    locals.inputTokenAddress = LibWethUtils.wrapIfNecessary(inputAssetAmounts[0], wethAddress);\n\n    locals.inputAsset = IERC20(locals.inputTokenAddress);\n\n\n\n\n    locals.inputAsset.safeApprove(routerAddress, inputAssetAmounts[0].amount);\n\n\n    // logArgs(args);\n\n    locals.outputTokenAddress = locals.args.toAsset.assetAddress;\n    if (locals.args.toAsset.assetType == AssetType.Native) {\n      locals.outputTokenAddress = wethAddress;\n    }\n\n    IERC20 outputAsset = IERC20(locals.outputTokenAddress);\n    locals.outputAssetBalanceBefore = outputAsset.balanceOf(address(this));\n\n    locals.amountIn = inputAssetAmounts[0].amount;\n    locals.amountInFloat = ABDKMathQuad.fromUInt(inputAssetAmounts[0].amount);\n\n    runRoute(locals.amountIn, locals.args.routes, locals.inputTokenAddress, locals.outputTokenAddress);\n\n    // for (uint256 i = 0; i < locals.args.routes.length; i++) {\n\n\n\n\n    //   UniswapRoute memory route = locals.args.routes[i];\n    //   bytes16 portion = ABDKMathQuad.from128x128(route.portion);\n    //   uint256 amount;\n    //   // if this is the last route, use the remaining amount to avoid rounding errors\n    //   if (i < locals.args.routes.length - 1) {\n    //     amount = portion.mul(locals.amountInFloat).toUInt();\n\n    //   } else {\n    //     amount = locals.amountRemaining;\n\n    //   }\n    //   // minAmoutOut is zero because we're doing it ourself after all routes have been executed\n\n    //   IV3SwapRouter.ExactInputParams memory routerArgs = IV3SwapRouter.ExactInputParams(route.encodedPath, address(this), amount, 0);\n    //   IV3SwapRouter(routerAddress).exactInput(routerArgs);\n    //   locals.amountRemaining -= amount;\n    // }\n\n    // check the amount received vs minExchangeRate\n    locals.outputAssetBalanceAfter = outputAsset.balanceOf(address(this));\n\n\n\n    locals.amountReceived = locals.outputAssetBalanceAfter - locals.outputAssetBalanceBefore;\n    locals.worstTolerableAmountReceived = locals.amountInFloat.mul(locals.worstExchangeRateFloat).toUInt();\n\n    if (locals.amountReceived < locals.worstTolerableAmountReceived) {\n      string memory message = string(\n        abi.encodePacked(\n          'amount received is worse than worst tolerable amount: ',\n          Strings.toString(locals.amountReceived),\n          ' < ',\n          Strings.toString(locals.worstTolerableAmountReceived)\n        )\n      );\n      revert(message);\n    }\n    // require(locals.amountReceived >= locals.worstTolerableAmountReceived, 'amount received is worse than worst tolerable amount received');\n\n    // unwrap native if necessary\n    if (locals.args.toAsset.assetType == AssetType.Native) {\n      IWeth(wethAddress).withdraw(locals.amountReceived);\n    }\n\n    return\n      LibStepResultBuilder\n        .create(1, 1)\n        .addInputAssetAmount(inputAssetAmounts[0])\n        .addOutputAssetAmount(AssetAmount(locals.args.toAsset, locals.amountReceived))\n        .result;\n  }\n\n  function logArgs(UniswapExactInActionParams memory args) internal view {\n\n\n    for (uint256 i = 0; i < args.routes.length; i++) {\n\n\n\n    }\n  }\n\n  function callUniswap(bytes memory encodedPath, uint256 amount) internal override {\n\n    IV3SwapRouter.ExactInputParams memory routerArgs = IV3SwapRouter.ExactInputParams(encodedPath, address(this), amount, 0);\n    IV3SwapRouter(routerAddress).exactInput(routerArgs);\n  }\n}\n"
    },
    "contracts/UniswapExactOutAction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\nimport '@freemarket/step-sdk/contracts/IWeth.sol';\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\nimport '@freemarket/step-sdk/contracts/LibErc20.sol';\nimport '@freemarket/step-sdk/contracts/LibWethUtils.sol';\nimport './AbstractUniswapAction.sol';\nimport '@freemarket/step-sdk/contracts/ABDKMathQuad.sol';\nusing ABDKMathQuad for bytes16;\n\nusing LibStepResultBuilder for StepResultBuilder;\nusing LibErc20 for IERC20;\n\nstruct UniswapExactOutActionParams {\n  Asset fromAsset;\n  Asset toAsset;\n  uint256 amountOut;\n  UniswapRoute[] routes;\n  int256 worstExchangeRate;\n}\n\ncontract UniswapExactOutAction is AbstractUniswapAction, IWorkflowStep {\n  event UniswapExactOutActionEvent(address from, address to, uint256 amount, bool useNative);\n\n  constructor(address _routerAddress, address _wethAddress) AbstractUniswapAction(_routerAddress, _wethAddress) {}\n\n  struct Locals {\n    UniswapExactOutActionParams args;\n    bytes16 worstExchangeRateFloat;\n    address inputTokenAddress;\n    IERC20 inputAsset;\n    address outputTokenAddress;\n    IERC20 outputAsset;\n    bytes16 amountOutFloat;\n    uint256 inputAssetBalanceBefore;\n    uint256 inputAssetBalanceAfter;\n    uint256 outputAssetBalanceBefore;\n    uint256 outputAssetBalanceAfter;\n    uint256 amountReceived;\n    uint256 amountTaken;\n    uint256 worstTolerableAmountTaken;\n  }\n\n  function execute(AssetAmount[] calldata inputAssetAmounts, bytes calldata argData) public payable returns (WorkflowStepResult memory) {\n\n\n    // validate\n    require(inputAssetAmounts.length == 0, \"there shoudn't be any input assets\");\n\n    Locals memory locals;\n    locals.args = abi.decode(argData, (UniswapExactOutActionParams));\n\n\n    if (\n      locals.args.fromAsset.assetAddress == locals.args.toAsset.assetAddress &&\n      locals.args.fromAsset.assetType == locals.args.toAsset.assetType\n    ) {\n      // swapping to same asset, no-op\n      AssetAmount memory assetAmount = AssetAmount(locals.args.fromAsset, locals.args.amountOut);\n      return LibStepResultBuilder.create(1, 1).addInputAssetAmount(assetAmount).addOutputAssetAmount(assetAmount).result;\n    }\n\n    locals.worstExchangeRateFloat = ABDKMathQuad.from128x128(locals.args.worstExchangeRate);\n    locals.amountOutFloat = ABDKMathQuad.fromUInt(locals.args.amountOut);\n\n\n    // wrap if necessary.  Take note of inital native balance, and then just wrap all of it\n    if (locals.args.fromAsset.assetType == AssetType.Native) {\n      // input is native\n      locals.inputAssetBalanceBefore = address(this).balance;\n      require(wethAddress != address(0), 'weth not supported on this chain');\n      locals.inputAsset = IERC20(wethAddress);\n      IWeth(wethAddress).deposit{value: locals.inputAssetBalanceBefore}();\n      locals.inputTokenAddress = wethAddress;\n    } else {\n      // input is an erc20\n      locals.inputTokenAddress = locals.args.fromAsset.assetAddress;\n      locals.inputAsset = IERC20(locals.inputTokenAddress);\n      locals.inputAssetBalanceBefore = locals.inputAsset.balanceOf(address(this));\n    }\n\n    // approve the router to take the input asset\n    locals.inputAsset.safeApprove(routerAddress, locals.inputAssetBalanceBefore);\n\n    // set up output asset and record balance\n    if (locals.args.toAsset.assetType == AssetType.Native) {\n      locals.outputTokenAddress = wethAddress;\n    } else {\n      locals.outputTokenAddress = locals.args.toAsset.assetAddress;\n    }\n    locals.outputAsset = IERC20(locals.outputTokenAddress);\n    locals.outputAssetBalanceBefore = locals.outputAsset.balanceOf(address(this));\n\n\n\n\n\n\n\n\n    runRoute(locals.args.amountOut, locals.args.routes, locals.inputTokenAddress, locals.outputTokenAddress);\n\n    // verify amount out is what we asked for\n    locals.outputAssetBalanceAfter = locals.outputAsset.balanceOf(address(this));\n    locals.amountReceived = locals.outputAssetBalanceAfter - locals.outputAssetBalanceBefore;\n    require(locals.amountReceived == locals.args.amountOut, 'amount received did not match amount out');\n\n    // verify amount taken is within slippage tolerance\n    locals.inputAssetBalanceAfter = locals.inputAsset.balanceOf(address(this));\n    locals.amountTaken = locals.inputAssetBalanceBefore - locals.inputAssetBalanceAfter;\n\n    locals.worstTolerableAmountTaken = locals.amountOutFloat.mul(locals.worstExchangeRateFloat).toUInt();\n\n    require(locals.amountTaken < locals.worstTolerableAmountTaken, 'amount taken exceeded worst exchange rate');\n\n    // if we wrapped the input, unwrap whatever native is left, but only out of what was wrapped\n    if (locals.args.fromAsset.assetType == AssetType.Native) {\n      IWeth(wethAddress).withdraw(locals.inputAssetBalanceBefore - locals.amountTaken);\n    }\n\n    // wrap the output if necessary\n    if (locals.args.toAsset.assetType == AssetType.Native) {\n      IWeth(wethAddress).deposit{value: locals.args.amountOut}();\n    }\n\n    return\n      LibStepResultBuilder\n        .create(1, 1)\n        .addInputAssetAmount(AssetAmount(locals.args.fromAsset, locals.amountTaken))\n        .addOutputAssetAmount(AssetAmount(locals.args.toAsset, locals.amountReceived))\n        .result;\n  }\n\n  function callUniswap(bytes memory encodedPath, uint256 amount) internal override {\n\n    IV3SwapRouter.ExactOutputParams memory routerArgs = IV3SwapRouter.ExactOutputParams(\n      encodedPath,\n      address(this),\n      amount,\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    );\n    IV3SwapRouter(routerAddress).exactOutput(routerArgs);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}