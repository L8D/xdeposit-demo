{
  "address": "0x22Eba4A686A85F62E27922933911296b76f8fA4c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_routerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        }
      ],
      "name": "UniswapExactOutActionEvent",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "argData",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmountsToCaller",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x929c65063ab7ef9380dda9a2b37b5a3eb9ccd1b5754b09171485e434e99512e6",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0x22Eba4A686A85F62E27922933911296b76f8fA4c",
    "transactionIndex": 4,
    "gasUsed": "2568733",
    "logsBloom": "0x
    "blockHash": "0xb488a84d6e0ca60dc88d0e0ef5092592c771cc3a24435e19668222427e6c571e",
    "transactionHash": "0x929c65063ab7ef9380dda9a2b37b5a3eb9ccd1b5754b09171485e434e99512e6",
    "logs": [],
    "blockNumber": 107885727,
    "cumulativeGasUsed": "3813475",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "6fa10d5c0a9f548fae3fff637d02ef9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"}],\"name\":\"UniswapExactOutActionEvent\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"argData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmountsToCaller\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapExactOutAction.sol\":\"UniswapExactOutAction\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./model/Asset.sol\\\";\\nimport \\\"./model/AssetAmount.sol\\\";\\nimport \\\"./model/WorkflowStepResult.sol\\\";\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n    /// @notice called by WorkflowRunner to execute a workflow step.\\n    /// @param assetAmounts AssetAmounts to be used by the step\\n    /// @param argData Step specific arguments in ABI encoding\\n    /// @return the outcome of the step invocation\\n    function execute(AssetAmount[] calldata assetAmounts, bytes calldata argData)\\n        external\\n        payable\\n        returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0xce8590c782238edd5fa7293798bc02411f7b408ad4caeaaab2ac052e97ab1cdf\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmountsToCaller;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in absolute currency units)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0x0cc72223efa79934b173495c5452dfc6095d2f95cdd4d93c3d0c25cda0893b62\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.13;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n    /*\\n    * 0.\\n    */\\n    bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n    /*\\n    * -0.\\n    */\\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n    /*\\n    * +Infinity.\\n    */\\n    bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\\n\\n    /*\\n    * -Infinity.\\n    */\\n    bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\\n\\n    /*\\n    * Canonical NaN value.\\n    */\\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n    /**\\n     * Convert signed 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromInt(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) {\\n                return bytes16(0);\\n            } else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 256-bit integer number\\n     * rounding towards zero.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 256-bit integer number\\n     */\\n    function toInt(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            require(exponent <= 16638); // Overflow\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) {\\n                return bytes16(0);\\n            } else {\\n                uint256 result = x;\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb << 112;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into unsigned 256-bit integer number\\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n     * without error, because they are rounded to zero.\\n     *\\n     * @param x quadruple precision number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function toUInt(bytes16 x) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\\n\\n            require(exponent <= 16638); // Overflow\\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 128.128 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from128x128(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) {\\n                return bytes16(0);\\n            } else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb << 112;\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 128.128 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 128.128 bit fixed point number\\n     */\\n    function to128x128(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            require(exponent <= 16510); // Overflow\\n            if (exponent < 16255) return 0; // Underflow\\n\\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16367) result >>= 16367 - exponent;\\n            else if (exponent > 16367) result <<= exponent - 16367;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 64.64 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from64x64(int128 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) {\\n                return bytes16(0);\\n            } else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint128(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result = result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb << 112;\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 64.64 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 64.64 bit fixed point number\\n     */\\n    function to64x64(bytes16 x) internal pure returns (int128) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            require(exponent <= 16446); // Overflow\\n            if (exponent < 16319) return 0; // Underflow\\n\\n            uint256 result = uint256(uint128(x)) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 0x10000000000000000000000000000;\\n\\n            if (exponent < 16431) result >>= 16431 - exponent;\\n            else if (exponent > 16431) result <<= exponent - 16431;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x80000000000000000000000000000000);\\n                return -int128(int256(result)); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(int256(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert octuple precision number into quadruple precision number.\\n     *\\n     * @param x octuple precision number\\n     * @return quadruple precision number\\n     */\\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool negative = x & 0x8000000000000000000000000000000000000000000000000000000000000000 > 0;\\n\\n            uint256 exponent = uint256(x) >> 236 & 0x7FFFF;\\n            uint256 significand = uint256(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFFF) {\\n                if (significand > 0) return NaN;\\n                else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            }\\n\\n            if (exponent > 278526) {\\n                return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            } else if (exponent < 245649) {\\n                return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n            } else if (exponent < 245761) {\\n                significand =\\n                    (significand | 0x100000000000000000000000000000000000000000000000000000000000) >> 245885 - exponent;\\n                exponent = 0;\\n            } else {\\n                significand >>= 124;\\n                exponent -= 245760;\\n            }\\n\\n            uint128 result = uint128(significand | exponent << 112);\\n            if (negative) result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into octuple precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return octuple precision number\\n     */\\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n\\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                exponent = 0x7FFFF;\\n            } // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result = result << 236 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 245649 + msb;\\n                }\\n            } else {\\n                result <<= 124;\\n                exponent += 245760;\\n            }\\n\\n            result |= exponent << 236;\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n            }\\n\\n            return bytes32(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert double precision number into quadruple precision number.\\n     *\\n     * @param x double precision number\\n     * @return quadruple precision number\\n     */\\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 exponent = uint64(x) >> 52 & 0x7FF;\\n\\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FF) {\\n                exponent = 0x7FFF;\\n            } // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result = result << 112 - msb & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 15309 + msb;\\n                }\\n            } else {\\n                result <<= 60;\\n                exponent += 15360;\\n            }\\n\\n            result |= exponent << 112;\\n            if (x & 0x8000000000000000 > 0) {\\n                result |= 0x80000000000000000000000000000000;\\n            }\\n\\n            return bytes16(uint128(result));\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into double precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return double precision number\\n     */\\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\\n        unchecked {\\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\\n\\n            uint256 exponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                if (significand > 0) {\\n                    return 0x7FF8000000000000;\\n                } // NaN\\n                else {\\n                    return negative\\n                        ? bytes8(0xFFF0000000000000) // -Infinity\\n                        : bytes8(0x7FF0000000000000);\\n                } // Infinity\\n            }\\n\\n            if (exponent > 17406) {\\n                return negative\\n                    ? bytes8(0xFFF0000000000000) // -Infinity\\n                    : bytes8(0x7FF0000000000000);\\n            } // Infinity\\n            else if (exponent < 15309) {\\n                return negative\\n                    ? bytes8(0x8000000000000000) // -0\\n                    : bytes8(0x0000000000000000);\\n            } // 0\\n            else if (exponent < 15361) {\\n                significand = (significand | 0x10000000000000000000000000000) >> 15421 - exponent;\\n                exponent = 0;\\n            } else {\\n                significand >>= 60;\\n                exponent -= 15360;\\n            }\\n\\n            uint64 result = uint64(significand | exponent << 52);\\n            if (negative) result |= 0x8000000000000000;\\n\\n            return bytes8(result);\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is NaN, false otherwise\\n     */\\n    function isNaN(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF > 0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is positive or negative\\n     * infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is positive or negative infinity, false otherwise\\n     */\\n    function isInfinity(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return sign of x\\n     */\\n    function sign(bytes16 x) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            if (absoluteX == 0) return 0;\\n            else if (uint128(x) >= 0x80000000000000000000000000000000) return -1;\\n            else return 1;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n     * arguments are infinities of the same sign.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return sign (x - y)\\n     */\\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            // Not infinities of the same sign\\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n            if (x == y) {\\n                return 0;\\n            } else {\\n                bool negativeX = uint128(x) >= 0x80000000000000000000000000000000;\\n                bool negativeY = uint128(y) >= 0x80000000000000000000000000000000;\\n\\n                if (negativeX) {\\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\\n                    else return -1;\\n                } else {\\n                    if (negativeY) return 1;\\n                    else return absoluteX > absoluteY ? int8(1) : -1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n     * anything.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return true if x equals to y, false otherwise\\n     */\\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\\n        unchecked {\\n            if (x == y) {\\n                return uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF < 0x7FFF0000000000000000000000000000;\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Special values behave in the following way:\\n     *\\n     * NaN + x = NaN for any x.\\n     * Infinity + x = Infinity for any finite x.\\n     * -Infinity + x = -Infinity for any finite x.\\n     * Infinity + Infinity = Infinity.\\n     * -Infinity + -Infinity = -Infinity.\\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x;\\n                    else return NaN;\\n                } else {\\n                    return x;\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                return y;\\n            } else {\\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                if (xSignifier == 0) {\\n                    return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n                } else if (ySignifier == 0) {\\n                    return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n                } else {\\n                    int256 delta = int256(xExponent) - int256(yExponent);\\n\\n                    if (xSign == ySign) {\\n                        if (delta > 112) {\\n                            return x;\\n                        } else if (delta > 0) {\\n                            ySignifier >>= uint256(delta);\\n                        } else if (delta < -112) {\\n                            return y;\\n                        } else if (delta < 0) {\\n                            xSignifier >>= uint256(-delta);\\n                            xExponent = yExponent;\\n                        }\\n\\n                        xSignifier += ySignifier;\\n\\n                        if (xSignifier >= 0x20000000000000000000000000000) {\\n                            xSignifier >>= 1;\\n                            xExponent += 1;\\n                        }\\n\\n                        if (xExponent == 0x7FFF) {\\n                            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n                        } else {\\n                            if (xSignifier < 0x10000000000000000000000000000) xExponent = 0;\\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                            return bytes16(\\n                                uint128(\\n                                    (xSign ? 0x80000000000000000000000000000000 : 0) | (xExponent << 112) | xSignifier\\n                                )\\n                            );\\n                        }\\n                    } else {\\n                        if (delta > 0) {\\n                            xSignifier <<= 1;\\n                            xExponent -= 1;\\n                        } else if (delta < 0) {\\n                            ySignifier <<= 1;\\n                            xExponent = yExponent - 1;\\n                        }\\n\\n                        if (delta > 112) ySignifier = 1;\\n                        else if (delta > 1) ySignifier = (ySignifier - 1 >> uint256(delta - 1)) + 1;\\n                        else if (delta < -112) xSignifier = 1;\\n                        else if (delta < -1) xSignifier = (xSignifier - 1 >> uint256(-delta - 1)) + 1;\\n\\n                        if (xSignifier >= ySignifier) {\\n                            xSignifier -= ySignifier;\\n                        } else {\\n                            xSignifier = ySignifier - xSignifier;\\n                            xSign = ySign;\\n                        }\\n\\n                        if (xSignifier == 0) {\\n                            return POSITIVE_ZERO;\\n                        }\\n\\n                        uint256 msb = mostSignificantBit(xSignifier);\\n\\n                        if (msb == 113) {\\n                            xSignifier = xSignifier >> 1 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                            xExponent += 1;\\n                        } else if (msb < 112) {\\n                            uint256 shift = 112 - msb;\\n                            if (xExponent > shift) {\\n                                xSignifier = xSignifier << shift & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                                xExponent -= shift;\\n                            } else {\\n                                xSignifier <<= xExponent - 1;\\n                                xExponent = 0;\\n                            }\\n                        } else {\\n                            xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                        }\\n\\n                        if (xExponent == 0x7FFF) {\\n                            return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n                        } else {\\n                            return bytes16(\\n                                uint128(\\n                                    (xSign ? 0x80000000000000000000000000000000 : 0) | (xExponent << 112) | xSignifier\\n                                )\\n                            );\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Special values behave in the following way:\\n     *\\n     * NaN - x = NaN for any x.\\n     * Infinity - x = Infinity for any finite x.\\n     * -Infinity - x = -Infinity for any finite x.\\n     * Infinity - -Infinity = Infinity.\\n     * -Infinity - Infinity = -Infinity.\\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            return add(x, y ^ 0x80000000000000000000000000000000);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y.  Special values behave in the following way:\\n     *\\n     * NaN * x = NaN for any x.\\n     * Infinity * x = Infinity for any finite positive x.\\n     * Infinity * x = -Infinity for any finite negative x.\\n     * -Infinity * x = -Infinity for any finite positive x.\\n     * -Infinity * x = Infinity for any finite negative x.\\n     * Infinity * 0 = NaN.\\n     * -Infinity * 0 = NaN.\\n     * Infinity * Infinity = Infinity.\\n     * Infinity * -Infinity = -Infinity.\\n     * -Infinity * Infinity = -Infinity.\\n     * -Infinity * -Infinity = Infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x ^ y & 0x80000000000000000000000000000000;\\n                    else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\\n                    else return NaN;\\n                } else {\\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                    else return x ^ y & 0x80000000000000000000000000000000;\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return y ^ x & 0x80000000000000000000000000000000;\\n            } else {\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                xSignifier *= ySignifier;\\n                if (xSignifier == 0) {\\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n                }\\n\\n                xExponent += yExponent;\\n\\n                uint256 msb = xSignifier >= 0x200000000000000000000000000000000000000000000000000000000\\n                    ? 225\\n                    : xSignifier >= 0x100000000000000000000000000000000000000000000000000000000\\n                        ? 224\\n                        : mostSignificantBit(xSignifier);\\n\\n                if (xExponent + msb < 16496) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb < 16608) {\\n                    // Subnormal\\n                    if (xExponent < 16496) {\\n                        xSignifier >>= 16496 - xExponent;\\n                    } else if (xExponent > 16496) {\\n                        xSignifier <<= xExponent - 16496;\\n                    }\\n                    xExponent = 0;\\n                } else if (xExponent + msb > 49373) {\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else {\\n                    if (msb > 112) {\\n                        xSignifier >>= msb - 112;\\n                    } else if (msb < 112) {\\n                        xSignifier <<= 112 - msb;\\n                    }\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb - 16607;\\n                }\\n\\n                return bytes16(\\n                    uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | xExponent << 112 | xSignifier)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y.  Special values behave in the following way:\\n     *\\n     * NaN / x = NaN for any x.\\n     * x / NaN = NaN for any x.\\n     * Infinity / x = Infinity for any finite non-negative x.\\n     * Infinity / x = -Infinity for any finite negative x including -0.\\n     * -Infinity / x = -Infinity for any finite non-negative x.\\n     * -Infinity / x = Infinity for any finite negative x including -0.\\n     * x / Infinity = 0 for any finite non-negative x.\\n     * x / -Infinity = -0 for any finite non-negative x.\\n     * x / Infinity = -0 for any finite non-negative x including -0.\\n     * x / -Infinity = 0 for any finite non-negative x including -0.\\n     *\\n     * Infinity / Infinity = NaN.\\n     * Infinity / -Infinity = -NaN.\\n     * -Infinity / Infinity = -NaN.\\n     * -Infinity / -Infinity = NaN.\\n     *\\n     * Division by zero behaves in the following way:\\n     *\\n     * x / 0 = Infinity for any finite positive x.\\n     * x / -0 = -Infinity for any finite positive x.\\n     * x / 0 = -Infinity for any finite negative x.\\n     * x / -0 = Infinity for any finite negative x.\\n     * 0 / 0 = NaN.\\n     * 0 / -0 = NaN.\\n     * -0 / 0 = NaN.\\n     * -0 / -0 = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 yExponent = uint128(y) >> 112 & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) return NaN;\\n                else return x ^ y & 0x80000000000000000000000000000000;\\n            } else if (yExponent == 0x7FFF) {\\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n                else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;\\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;\\n            } else {\\n                uint256 ySignifier = uint128(y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) {\\n                    if (xSignifier != 0) {\\n                        uint256 shift = 226 - mostSignificantBit(xSignifier);\\n\\n                        xSignifier <<= shift;\\n\\n                        xExponent = 1;\\n                        yExponent += shift - 114;\\n                    }\\n                } else {\\n                    xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;\\n                }\\n\\n                xSignifier = xSignifier / ySignifier;\\n                if (xSignifier == 0) {\\n                    return (x ^ y) & 0x80000000000000000000000000000000 > 0 ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n                }\\n\\n                assert(xSignifier >= 0x1000000000000000000000000000);\\n\\n                uint256 msb = xSignifier >= 0x80000000000000000000000000000\\n                    ? mostSignificantBit(xSignifier)\\n                    : xSignifier >= 0x40000000000000000000000000000\\n                        ? 114\\n                        : xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;\\n\\n                if (xExponent + msb > yExponent + 16497) {\\n                    // Overflow\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16380 < yExponent) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16268 < yExponent) {\\n                    // Subnormal\\n                    if (xExponent + 16380 > yExponent) {\\n                        xSignifier <<= xExponent + 16380 - yExponent;\\n                    } else if (xExponent + 16380 < yExponent) {\\n                        xSignifier >>= yExponent - xExponent - 16380;\\n                    }\\n\\n                    xExponent = 0;\\n                } else {\\n                    // Normal\\n                    if (msb > 112) {\\n                        xSignifier >>= msb - 112;\\n                    }\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb + 16269 - yExponent;\\n                }\\n\\n                return bytes16(\\n                    uint128(uint128((x ^ y) & 0x80000000000000000000000000000000) | xExponent << 112 | xSignifier)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function neg(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x ^ 0x80000000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function abs(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n    }\\n\\n    /**\\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) {\\n                return NaN;\\n            } else {\\n                uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n                if (xExponent == 0x7FFF) {\\n                    return x;\\n                } else {\\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n                    bool oddExponent = xExponent & 0x1 == 0;\\n                    xExponent = xExponent + 16383 >> 1;\\n\\n                    if (oddExponent) {\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            xSignifier <<= 113;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (226 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= shift - 112 >> 1;\\n                        }\\n                    } else {\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            xSignifier <<= 112;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (225 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= shift - 112 >> 1;\\n                        }\\n                    }\\n\\n                    uint256 r = 0x10000000000000000000000000000;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n                    uint256 r1 = xSignifier / r;\\n                    if (r1 < r) r = r1;\\n\\n                    return bytes16(uint128(xExponent << 112 | r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function log_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) {\\n                return NaN;\\n            } else if (x == 0x3FFF0000000000000000000000000000) {\\n                return POSITIVE_ZERO;\\n            } else {\\n                uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n                if (xExponent == 0x7FFF) {\\n                    return x;\\n                } else {\\n                    uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n                    bool resultNegative;\\n                    uint256 resultExponent = 16495;\\n                    uint256 resultSignifier;\\n\\n                    if (xExponent >= 0x3FFF) {\\n                        resultNegative = false;\\n                        resultSignifier = xExponent - 0x3FFF;\\n                        xSignifier <<= 15;\\n                    } else {\\n                        resultNegative = true;\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            resultSignifier = 0x3FFE - xExponent;\\n                            xSignifier <<= 15;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            resultSignifier = 16493 - msb;\\n                            xSignifier <<= 127 - msb;\\n                        }\\n                    }\\n\\n                    if (xSignifier == 0x80000000000000000000000000000000) {\\n                        if (resultNegative) resultSignifier += 1;\\n                        uint256 shift = 112 - mostSignificantBit(resultSignifier);\\n                        resultSignifier <<= shift;\\n                        resultExponent -= shift;\\n                    } else {\\n                        uint256 bb = resultNegative ? 1 : 0;\\n                        while (resultSignifier < 0x10000000000000000000000000000) {\\n                            resultSignifier <<= 1;\\n                            resultExponent -= 1;\\n\\n                            xSignifier *= xSignifier;\\n                            uint256 b = xSignifier >> 255;\\n                            resultSignifier += b ^ bb;\\n                            xSignifier >>= 127 + b;\\n                        }\\n                    }\\n\\n                    return bytes16(\\n                        uint128(\\n                            (resultNegative ? 0x80000000000000000000000000000000 : 0) | resultExponent << 112\\n                                | resultSignifier & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                        )\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function ln(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n        }\\n    }\\n\\n    /**\\n     * Calculate 2^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\\n            uint256 xExponent = uint128(x) >> 112 & 0x7FFF;\\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF && xSignifier != 0) {\\n                return NaN;\\n            } else if (xExponent > 16397) {\\n                return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n            } else if (xExponent < 16255) {\\n                return 0x3FFF0000000000000000000000000000;\\n            } else {\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                if (xExponent > 16367) {\\n                    xSignifier <<= xExponent - 16367;\\n                } else if (xExponent < 16367) {\\n                    xSignifier >>= 16367 - xExponent;\\n                }\\n\\n                if (xNegative && xSignifier > 0x406E00000000000000000000000000000000) {\\n                    return POSITIVE_ZERO;\\n                }\\n\\n                if (!xNegative && xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                    return POSITIVE_INFINITY;\\n                }\\n\\n                uint256 resultExponent = xSignifier >> 128;\\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xNegative && xSignifier != 0) {\\n                    xSignifier = ~xSignifier;\\n                    resultExponent += 1;\\n                }\\n\\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\\n                if (xSignifier & 0x80000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 >> 128;\\n                }\\n                if (xSignifier & 0x800000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC >> 128;\\n                }\\n                if (xSignifier & 0x400000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 >> 128;\\n                }\\n                if (xSignifier & 0x200000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 >> 128;\\n                }\\n                if (xSignifier & 0x100000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 >> 128;\\n                }\\n                if (xSignifier & 0x80000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB >> 128;\\n                }\\n                if (xSignifier & 0x40000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD >> 128;\\n                }\\n                if (xSignifier & 0x20000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE >> 128;\\n                }\\n                if (xSignifier & 0x10000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 >> 128;\\n                }\\n                if (xSignifier & 0x8000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A >> 128;\\n                }\\n                if (xSignifier & 0x4000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C >> 128;\\n                }\\n                if (xSignifier & 0x2000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D >> 128;\\n                }\\n                if (xSignifier & 0x1000000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE >> 128;\\n                }\\n                if (xSignifier & 0x800000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 >> 128;\\n                }\\n                if (xSignifier & 0x400000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 >> 128;\\n                }\\n                if (xSignifier & 0x200000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 >> 128;\\n                }\\n                if (xSignifier & 0x100000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B >> 128;\\n                }\\n                if (xSignifier & 0x80000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D >> 128;\\n                }\\n                if (xSignifier & 0x40000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 >> 128;\\n                }\\n                if (xSignifier & 0x20000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 >> 128;\\n                }\\n                if (xSignifier & 0x10000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 >> 128;\\n                }\\n                if (xSignifier & 0x8000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 >> 128;\\n                }\\n                if (xSignifier & 0x4000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 >> 128;\\n                }\\n                if (xSignifier & 0x2000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 >> 128;\\n                }\\n                if (xSignifier & 0x1000000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C >> 128;\\n                }\\n                if (xSignifier & 0x800000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD >> 128;\\n                }\\n                if (xSignifier & 0x400000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE >> 128;\\n                }\\n                if (xSignifier & 0x200000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE >> 128;\\n                }\\n                if (xSignifier & 0x100000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 >> 128;\\n                }\\n                if (xSignifier & 0x80000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA >> 128;\\n                }\\n                if (xSignifier & 0x40000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC >> 128;\\n                }\\n                if (xSignifier & 0x20000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD >> 128;\\n                }\\n                if (xSignifier & 0x10000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E >> 128;\\n                }\\n                if (xSignifier & 0x8000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE >> 128;\\n                }\\n                if (xSignifier & 0x4000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E >> 128;\\n                }\\n                if (xSignifier & 0x2000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E >> 128;\\n                }\\n                if (xSignifier & 0x1000000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 >> 128;\\n                }\\n                if (xSignifier & 0x800000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A >> 128;\\n                }\\n                if (xSignifier & 0x400000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 >> 128;\\n                }\\n                if (xSignifier & 0x200000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 >> 128;\\n                }\\n                if (xSignifier & 0x100000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 >> 128;\\n                }\\n                if (xSignifier & 0x80000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F >> 128;\\n                }\\n                if (xSignifier & 0x40000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 >> 128;\\n                }\\n                if (xSignifier & 0x20000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 >> 128;\\n                }\\n                if (xSignifier & 0x10000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 >> 128;\\n                }\\n                if (xSignifier & 0x8000 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 >> 128;\\n                }\\n                if (xSignifier & 0x4000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B >> 128;\\n                }\\n                if (xSignifier & 0x2000 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000162D >> 128;\\n                }\\n                if (xSignifier & 0x1000 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 >> 128;\\n                }\\n                if (xSignifier & 0x800 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000058A >> 128;\\n                }\\n                if (xSignifier & 0x400 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 >> 128;\\n                }\\n                if (xSignifier & 0x200 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000161 >> 128;\\n                }\\n                if (xSignifier & 0x100 > 0) {\\n                    resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 >> 128;\\n                }\\n                if (xSignifier & 0x80 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000057 >> 128;\\n                }\\n                if (xSignifier & 0x40 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000002B >> 128;\\n                }\\n                if (xSignifier & 0x20 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000015 >> 128;\\n                }\\n                if (xSignifier & 0x10 > 0) {\\n                    resultSignifier = resultSignifier * 0x10000000000000000000000000000000A >> 128;\\n                }\\n                if (xSignifier & 0x8 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000004 >> 128;\\n                }\\n                if (xSignifier & 0x4 > 0) {\\n                    resultSignifier = resultSignifier * 0x100000000000000000000000000000001 >> 128;\\n                }\\n\\n                if (!xNegative) {\\n                    resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent += 0x3FFF;\\n                } else if (resultExponent <= 0x3FFE) {\\n                    resultSignifier = resultSignifier >> 15 & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent = 0x3FFF - resultExponent;\\n                } else {\\n                    resultSignifier = resultSignifier >> resultExponent - 16367;\\n                    resultExponent = 0;\\n                }\\n\\n                return bytes16(uint128(resultExponent << 112 | resultSignifier));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate e^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function exp(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n        }\\n    }\\n\\n    /**\\n     * Get index of the most significant non-zero bit in binary representation of\\n     * x.  Reverts if x is zero.\\n     *\\n     * @return index of the most significant non-zero bit in binary representation\\n     *         of x\\n     */\\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            require(x > 0);\\n\\n            uint256 result = 0;\\n\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                result += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                result += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                result += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                result += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                result += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                result += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                result += 2;\\n            }\\n            if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc747d7358dd32d401edee9aabbf5e9e0dce490e5766060ec077bdf0f70ef9cb\",\"license\":\"BSD-4-Clause\"},\"@freemarket/step-sdk/contracts/IWeth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IWeth {\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0xe00c4f29d37fcfa230bcd8a33dab24923b4da32bf943e6e33741c9d8ececc938\",\"license\":\"UNLICENSED\"},\"@freemarket/step-sdk/contracts/LibErc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LibErc20 {\\n    using Address for address;\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // forked from openzeppelin but removed the require, just keeping optional return\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd57f8763cdc6339c5b248a4226b8392e36fdec46ad8b84aba2326f6ac1025b06\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  uint256 outputToCallerIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    AssetAmount[] memory ouputAssetAmountsToCaller = new AssetAmount[](0);\\n\\n    return StepResultBuilder(0, 0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, ouputAssetAmountsToCaller, -2, -1));\\n  }\\n\\n  function create(\\n    uint256 inputAssetCount,\\n    uint256 outputAssetCount,\\n    uint256 outputAssetToCallerCount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    AssetAmount[] memory ouputAssetToCallerAmounts = new AssetAmount[](outputAssetToCallerCount);\\n\\n    return StepResultBuilder(0, 0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, ouputAssetToCallerAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmountToCaller(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmountsToCaller[builder.outputToCallerIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x54128c41d82f7a3bca199a750d01456c0190d87a384913f777d49df297776d39\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibWethUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport './IWeth.sol';\\n\\nlibrary LibWethUtils {\\n  function wrapIfNecessary(AssetAmount memory assetAmount, address wethAddress) internal returns (address) {\\n    if (assetAmount.asset.assetType == AssetType.Native) {\\n      require(wethAddress != address(0), 'weth not supported on this chain');\\n      IWeth(wethAddress).deposit{value: assetAmount.amount}();\\n      return wethAddress;\\n    }\\n    return assetAmount.asset.assetAddress;\\n  }\\n}\\n\",\"keccak256\":\"0x0ba11ae39845c71566504ace7b0c1425562457380c83c061d99d8a74693f87b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/AbstractUniswapAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport './IV3SwapRouter.sol';\\nimport '@freemarket/step-sdk/contracts/ABDKMathQuad.sol';\\nusing ABDKMathQuad for bytes16;\\n\\nstruct UniswapRoute {\\n  bytes encodedPath;\\n  int256 portion; // like percent but already divided by 100\\n  // uint256 minExchangeRate;\\n}\\n\\nabstract contract AbstractUniswapAction {\\n  address public immutable routerAddress;\\n  address public immutable wethAddress;\\n\\n  constructor(address _routerAddress, address _wethAddress) {\\n    routerAddress = _routerAddress;\\n    wethAddress = _wethAddress;\\n  }\\n\\n  function runRoute(uint256 amountRemaining, UniswapRoute[] memory routes, address inputAssetAddress, address outputAssetAddress) internal {\\n    IERC20 inputAsset = IERC20(inputAssetAddress);\\n    IERC20 outputAsset = IERC20(outputAssetAddress);\\n    bytes16 fTotalAmount = ABDKMathQuad.fromUInt(amountRemaining);\\n    for (uint256 i = 0; i < routes.length; ++i) {\\n\\n\\n\\n      UniswapRoute memory route = routes[i];\\n      bytes16 portion = ABDKMathQuad.from128x128(route.portion);\\n      uint256 amount;\\n      // if this is the last route, use the remaining amount to avoid rounding errors\\n      if (i < routes.length - 1) {\\n        amount = portion.mul(fTotalAmount).toUInt();\\n\\n      } else {\\n        amount = amountRemaining;\\n\\n      }\\n      callUniswap(route.encodedPath, amount);\\n      amountRemaining -= amount;\\n    }\\n  }\\n\\n  function callUniswap(bytes memory encodedPath, uint256 amount) internal virtual;\\n\\n  // there are just here for unit testing to enable weth.withdraw()\\n  receive() external payable {}\\n\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xc220de1970354177b149be204cf15add907fb4c43f2fb36bc8dd747aee793d56\",\"license\":\"MIT\"},\"contracts/IV3SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IV3SwapRouter {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x5d7d35ee4c92a0b8498c0899ede54a298e2c5eae6b137085ac87a3cc8624a9ce\",\"license\":\"MIT\"},\"contracts/UniswapExactOutAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\nimport '@freemarket/step-sdk/contracts/IWeth.sol';\\nimport '@freemarket/core/contracts/model/AssetAmount.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n\\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\\nimport '@freemarket/step-sdk/contracts/LibErc20.sol';\\nimport '@freemarket/step-sdk/contracts/LibWethUtils.sol';\\nimport './AbstractUniswapAction.sol';\\nimport '@freemarket/step-sdk/contracts/ABDKMathQuad.sol';\\nusing ABDKMathQuad for bytes16;\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\nusing LibErc20 for IERC20;\\n\\nstruct UniswapExactOutActionParams {\\n  Asset fromAsset;\\n  Asset toAsset;\\n  uint256 amountOut;\\n  UniswapRoute[] routes;\\n  int256 worstExchangeRate;\\n}\\n\\ncontract UniswapExactOutAction is AbstractUniswapAction, IWorkflowStep {\\n  event UniswapExactOutActionEvent(address from, address to, uint256 amount, bool useNative);\\n\\n  constructor(address _routerAddress, address _wethAddress) AbstractUniswapAction(_routerAddress, _wethAddress) {}\\n\\n  struct Locals {\\n    UniswapExactOutActionParams args;\\n    bytes16 worstExchangeRateFloat;\\n    address inputTokenAddress;\\n    IERC20 inputAsset;\\n    address outputTokenAddress;\\n    IERC20 outputAsset;\\n    bytes16 amountOutFloat;\\n    uint256 inputAssetBalanceBefore;\\n    uint256 inputAssetBalanceAfter;\\n    uint256 outputAssetBalanceBefore;\\n    uint256 outputAssetBalanceAfter;\\n    uint256 amountReceived;\\n    uint256 amountTaken;\\n    uint256 worstTolerableAmountTaken;\\n  }\\n\\n  function execute(AssetAmount[] calldata inputAssetAmounts, bytes calldata argData) public payable returns (WorkflowStepResult memory) {\\n\\n\\n    // validate\\n    require(inputAssetAmounts.length == 0, \\\"there shoudn't be any input assets\\\");\\n\\n    Locals memory locals;\\n    locals.args = abi.decode(argData, (UniswapExactOutActionParams));\\n\\n\\n    if (\\n      locals.args.fromAsset.assetAddress == locals.args.toAsset.assetAddress &&\\n      locals.args.fromAsset.assetType == locals.args.toAsset.assetType\\n    ) {\\n      // swapping to same asset, no-op\\n      AssetAmount memory assetAmount = AssetAmount(locals.args.fromAsset, locals.args.amountOut);\\n      return LibStepResultBuilder.create(1, 1).addInputAssetAmount(assetAmount).addOutputAssetAmount(assetAmount).result;\\n    }\\n\\n    locals.worstExchangeRateFloat = ABDKMathQuad.from128x128(locals.args.worstExchangeRate);\\n    locals.amountOutFloat = ABDKMathQuad.fromUInt(locals.args.amountOut);\\n\\n\\n    // wrap if necessary.  Take note of inital native balance, and then just wrap all of it\\n    if (locals.args.fromAsset.assetType == AssetType.Native) {\\n      // input is native\\n      locals.inputAssetBalanceBefore = address(this).balance;\\n      require(wethAddress != address(0), 'weth not supported on this chain');\\n      locals.inputAsset = IERC20(wethAddress);\\n      IWeth(wethAddress).deposit{value: locals.inputAssetBalanceBefore}();\\n      locals.inputTokenAddress = wethAddress;\\n    } else {\\n      // input is an erc20\\n      locals.inputTokenAddress = locals.args.fromAsset.assetAddress;\\n      locals.inputAsset = IERC20(locals.inputTokenAddress);\\n      locals.inputAssetBalanceBefore = locals.inputAsset.balanceOf(address(this));\\n    }\\n\\n    // approve the router to take the input asset\\n    locals.inputAsset.safeApprove(routerAddress, locals.inputAssetBalanceBefore);\\n\\n    // set up output asset and record balance\\n    if (locals.args.toAsset.assetType == AssetType.Native) {\\n      locals.outputTokenAddress = wethAddress;\\n    } else {\\n      locals.outputTokenAddress = locals.args.toAsset.assetAddress;\\n    }\\n    locals.outputAsset = IERC20(locals.outputTokenAddress);\\n    locals.outputAssetBalanceBefore = locals.outputAsset.balanceOf(address(this));\\n\\n\\n\\n\\n\\n\\n\\n\\n    runRoute(locals.args.amountOut, locals.args.routes, locals.inputTokenAddress, locals.outputTokenAddress);\\n\\n    // verify amount out is what we asked for\\n    locals.outputAssetBalanceAfter = locals.outputAsset.balanceOf(address(this));\\n    locals.amountReceived = locals.outputAssetBalanceAfter - locals.outputAssetBalanceBefore;\\n    require(locals.amountReceived == locals.args.amountOut, 'amount received did not match amount out');\\n\\n    // verify amount taken is within slippage tolerance\\n    locals.inputAssetBalanceAfter = locals.inputAsset.balanceOf(address(this));\\n    locals.amountTaken = locals.inputAssetBalanceBefore - locals.inputAssetBalanceAfter;\\n\\n    locals.worstTolerableAmountTaken = locals.amountOutFloat.mul(locals.worstExchangeRateFloat).toUInt();\\n\\n    require(locals.amountTaken < locals.worstTolerableAmountTaken, 'amount taken exceeded worst exchange rate');\\n\\n    // if we wrapped the input, unwrap whatever native is left, but only out of what was wrapped\\n    if (locals.args.fromAsset.assetType == AssetType.Native) {\\n      IWeth(wethAddress).withdraw(locals.inputAssetBalanceBefore - locals.amountTaken);\\n    }\\n\\n    // wrap the output if necessary\\n    if (locals.args.toAsset.assetType == AssetType.Native) {\\n      IWeth(wethAddress).deposit{value: locals.args.amountOut}();\\n    }\\n\\n    return\\n      LibStepResultBuilder\\n        .create(1, 1)\\n        .addInputAssetAmount(AssetAmount(locals.args.fromAsset, locals.amountTaken))\\n        .addOutputAssetAmount(AssetAmount(locals.args.toAsset, locals.amountReceived))\\n        .result;\\n  }\\n\\n  function callUniswap(bytes memory encodedPath, uint256 amount) internal override {\\n\\n    IV3SwapRouter.ExactOutputParams memory routerArgs = IV3SwapRouter.ExactOutputParams(\\n      encodedPath,\\n      address(this),\\n      amount,\\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n    );\\n    IV3SwapRouter(routerAddress).exactOutput(routerArgs);\\n  }\\n}\\n\",\"keccak256\":\"0xd55344c974a71cdf111b3d358d4cd8a1ead8176d037625bfb940a782a200f62c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002f5d38038062002f5d833981810160405281019062000037919062000115565b81818173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505050506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000dd82620000b0565b9050919050565b620000ef81620000d0565b8114620000fb57600080fd5b50565b6000815190506200010f81620000e4565b92915050565b600080604083850312156200012f576200012e620000ab565b5b60006200013f85828601620000fe565b92505060206200015285828601620000fe565b9150509250929050565b60805160a051612d9e620001bf6000396000818160ed01528181610354015281816103cb01528181610423015281816104a80152818161069801528181610a970152610b6f01526000818160c90152818161061001526118e90152612d9e6000f3fe6080604052600436106100385760003560e01c80633268cc56146100415780634f0e0ef31461006c5780637bb26ca7146100975761003f565b3661003f57005b005b34801561004d57600080fd5b506100566100c7565b6040516100639190611d8a565b60405180910390f35b34801561007857600080fd5b506100816100eb565b60405161008e9190611d8a565b60405180910390f35b6100b160048036038101906100ac9190611e74565b61010f565b6040516100be919061215d565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b610117611b56565b6000858590501461015d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015490612202565b60405180910390fd5b610165611b8b565b83838101906101749190612665565b81600001819052508060000151602001516020015173ffffffffffffffffffffffffffffffffffffffff168160000151600001516020015173ffffffffffffffffffffffffffffffffffffffff1614801561020a57508060000151602001516000015160028111156101e9576101e8611f21565b5b81600001516000015160000151600281111561020857610207611f21565b5b145b15610274576000604051806040016040528083600001516000015181526020018360000151604001518152509050610267816102598361024b600180610c78565b610e2390919063ffffffff16565b610e6f90919063ffffffff16565b6060015192505050610c70565b610285816000015160800151610ebb565b81602001906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250506102c7816000015160400151610f68565b8160c001906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250506000600281111561030c5761030b611f21565b5b81600001516000015160000151600281111561032b5761032a611f21565b5b0361050357478160e0018181525050600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16036103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c0906126fa565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08260e001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b50505050507f0000000000000000000000000000000000000000000000000000000000000000816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061060b565b80600001516000015160200151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060400151816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105c09190611d8a565b602060405180830381865afa1580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610601919061272f565b8160e00181815250505b61065e7f00000000000000000000000000000000000000000000000000000000000000008260e00151836060015173ffffffffffffffffffffffffffffffffffffffff16610fe59092919063ffffffff16565b6000600281111561067257610671611f21565b5b81600001516020015160000151600281111561069157610690611f21565b5b036106f3577f0000000000000000000000000000000000000000000000000000000000000000816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610738565b80600001516020015160200151816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b80608001518160a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060a0015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107b19190611d8a565b602060405180830381865afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f2919061272f565b816101200181815250506108208160000151604001518260000151606001518360400151846080015161106b565b8060a0015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161085d9190611d8a565b602060405180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e919061272f565b816101400181815250508061012001518161014001516108be919061278b565b8161016001818152505080600001516040015181610160015114610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e90612831565b60405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109549190611d8a565b602060405180830381865afa158015610971573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610995919061272f565b816101000181815250508061010001518160e001516109b4919061278b565b81610180018181525050610a076109ef82602001518360c001516fffffffffffffffffffffffffffffffff191661115b90919063ffffffff16565b6fffffffffffffffffffffffffffffffff19166115e6565b816101a0018181525050806101a0015181610180015110610a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a54906128c3565b60405180910390fd5b60006002811115610a7157610a70611f21565b5b816000015160000151600001516002811115610a9057610a8f611f21565b5b03610b35577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d8261018001518360e00151610ae6919061278b565b6040518263ffffffff1660e01b8152600401610b0291906128f2565b600060405180830381600087803b158015610b1c57600080fd5b505af1158015610b30573d6000803e3d6000fd5b505050505b60006002811115610b4957610b48611f21565b5b816000015160200151600001516002811115610b6857610b67611f21565b5b03610bf7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08260000151604001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b50505050505b610c6860405180604001604052808360000151602001518152602001836101600151815250610c5a60405180604001604052808560000151600001518152602001856101800151815250610c4c600180610c78565b610e2390919063ffffffff16565b610e6f90919063ffffffff16565b606001519150505b949350505050565b610c80611c7e565b60008367ffffffffffffffff811115610c9c57610c9b612238565b5b604051908082528060200260200182016040528015610cd557816020015b610cc2611cac565b815260200190600190039081610cba5790505b50905060008367ffffffffffffffff811115610cf457610cf3612238565b5b604051908082528060200260200182016040528015610d2d57816020015b610d1a611cac565b815260200190600190039081610d125790505b50905060008067ffffffffffffffff811115610d4c57610d4b612238565b5b604051908082528060200260200182016040528015610d8557816020015b610d72611cac565b815260200190600190039081610d6a5790505b50905060405180608001604052806000815260200160008152602001600081526020016040518060a001604052808681526020018581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b815250815250935050505092915050565b610e2b611c7e565b81836060015160000151846000018051809190610e479061290d565b81525081518110610e5b57610e5a612955565b5b602002602001018190525082905092915050565b610e77611c7e565b81836060015160200151846020018051809190610e939061290d565b81525081518110610ea757610ea6612955565b5b602002602001018190525082905092915050565b6000808203610ed057600060801b9050610f63565b6000808313610ee25782600003610ee4565b825b90506000610ef1826116e4565b90506070811015610f0a578060700382901b9150610f1e565b6070811115610f1d576070810382901c91505b5b607081613f7f01901b6dffffffffffffffffffffffffffff83161791506000841215610f5a576f80000000000000000000000000000000821791505b8160801b925050505b919050565b6000808203610f7d57600060801b9050610fe0565b60008290506000610f8d826116e4565b90506070811015610fa6578060700382901b9150610fba565b6070811115610fb9576070810382901c91505b5b607081613fff01901b6dffffffffffffffffffffffffffff83161791508160801b925050505b919050565b6110668363095ea7b360e01b8484604051602401611004929190612984565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117c5565b505050565b60008290506000829050600061108087610f68565b905060005b86518110156111515760008782815181106110a3576110a2612955565b5b6020026020010151905060006110bc8260200151610ebb565b9050600060018a516110ce919061278b565b84101561111d576111166110fe86846fffffffffffffffffffffffffffffffff191661115b90919063ffffffff16565b6fffffffffffffffffffffffffffffffff19166115e6565b9050611121565b8a90505b61112f83600001518261188c565b808b61113b919061278b565b9a505050508061114a9061290d565b9050611085565b5050505050505050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff82036112ed57617fff810361127c57836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff191603611224576f8000000000000000000000000000000060801b84168518925050506115e0565b6f8000000000000000000000000000000060801b8486186fffffffffffffffffffffffffffffffff19160361125f57838517925050506115e0565b6f7fff800000000000000000000000000060801b925050506115e0565b600060801b6f7fffffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff1916036112cc576f7fff800000000000000000000000000060801b925050506115e0565b6f8000000000000000000000000000000060801b84168518925050506115e0565b617fff810361136757600060801b6f7fffffffffffffffffffffffffffffff60801b86166fffffffffffffffffffffffffffffffff191603611346576f7fff800000000000000000000000000060801b925050506115e0565b6f8000000000000000000000000000000060801b85168418925050506115e0565b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff169050600083036113a257600192506113b7565b6e010000000000000000000000000000811790505b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff169050600083036113f25760019250611407565b6e010000000000000000000000000000811790505b80820291506000820361147357600060801b6f8000000000000000000000000000000060801b878918166fffffffffffffffffffffffffffffffff19161161145357600060801b611468565b6f8000000000000000000000000000000060801b5b9450505050506115e0565b828401935060007c02000000000000000000000000000000000000000000000000000000008310156114da577c01000000000000000000000000000000000000000000000000000000008310156114d2576114cd836116e4565b6114d5565b60e05b6114dd565b60e15b905061407081860110156114f85760009450600092506115a0565b6140e0818601101561153c5761407085101561151d57846140700383901c9250611533565b61407085111561153257614070850383901b92505b5b6000945061159f565b61c0dd818601111561155657617fff94506000925061159e565b607081111561156d576070810383901c9250611581565b6070811015611580578060700383901b92505b5b6dffffffffffffffffffffffffffff831692506140df8186010394505b5b5b82607086901b6f8000000000000000000000000000000060801b898b181660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b600080617fff60708460801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050613fff81101561162f5760009150506116df565b6f800000000000000000000000000000008360801c6fffffffffffffffffffffffffffffffff161061166057600080fd5b6140fe81111561166f57600080fd5b60006e0100000000000000000000000000006dffffffffffffffffffffffffffff8560801c6fffffffffffffffffffffffffffffffff161617905061406f8210156116c3578161406f0381901c90506116d9565b61406f8211156116d85761406f820381901b90505b5b80925050505b919050565b60008082116116f257600080fd5b6000700100000000000000000000000000000000831061171a57608083901c92506080810190505b68010000000000000000831061173857604083901c92506040810190505b640100000000831061175257602083901c92506020810190505b62010000831061176a57601083901c92506010810190505b610100831061178157600883901c92506008810190505b6010831061179757600483901c92506004810190505b600483106117ad57600283901c92506002810190505b600283106117bc576001810190505b80915050919050565b6000611827826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119899092919063ffffffff16565b9050600081511115611887578080602001905181019061184791906129e5565b611886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187d90612a84565b60405180910390fd5b5b505050565b600060405180608001604052808481526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018381526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166309b81346826040518263ffffffff1660e01b81526004016119409190612b8f565b6020604051808303816000875af115801561195f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611983919061272f565b50505050565b606061199884846000856119a1565b90509392505050565b6060824710156119e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dd90612c23565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a0f9190612c7f565b60006040518083038185875af1925050503d8060008114611a4c576040519150601f19603f3d011682016040523d82523d6000602084013e611a51565b606091505b5091509150611a6287838387611a6e565b92505050949350505050565b60608315611ad0576000835103611ac857611a8885611ae3565b611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abe90612ce2565b60405180910390fd5b5b829050611adb565b611ada8383611b06565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611b195781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4d9190612d46565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600060010b8152602001600060020b81525090565b604051806101c00160405280611b9f611ccc565b815260200160006fffffffffffffffffffffffffffffffff19168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff19168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001611ca6611b56565b81525090565b6040518060400160405280611cbf611d07565b8152602001600081525090565b6040518060a00160405280611cdf611d07565b8152602001611cec611d07565b81526020016000815260200160608152602001600081525090565b604051806040016040528060006002811115611d2657611d25611f21565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d7482611d49565b9050919050565b611d8481611d69565b82525050565b6000602082019050611d9f6000830184611d7b565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611dde57611ddd611db9565b5b8235905067ffffffffffffffff811115611dfb57611dfa611dbe565b5b602083019150836060820283011115611e1757611e16611dc3565b5b9250929050565b60008083601f840112611e3457611e33611db9565b5b8235905067ffffffffffffffff811115611e5157611e50611dbe565b5b602083019150836001820283011115611e6d57611e6c611dc3565b5b9250929050565b60008060008060408587031215611e8e57611e8d611daf565b5b600085013567ffffffffffffffff811115611eac57611eab611db4565b5b611eb887828801611dc8565b9450945050602085013567ffffffffffffffff811115611edb57611eda611db4565b5b611ee787828801611e1e565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611f6157611f60611f21565b5b50565b6000819050611f7282611f50565b919050565b6000611f8282611f64565b9050919050565b611f9281611f77565b82525050565b611fa181611d69565b82525050565b604082016000820151611fbd6000850182611f89565b506020820151611fd06020850182611f98565b50505050565b6000819050919050565b611fe981611fd6565b82525050565b6060820160008201516120056000850182611fa7565b5060208201516120186040850182611fe0565b50505050565b600061202a8383611fef565b60608301905092915050565b6000602082019050919050565b600061204e82611ef5565b6120588185611f00565b935061206383611f11565b8060005b8381101561209457815161207b888261201e565b975061208683612036565b925050600181019050612067565b5085935050505092915050565b60008160010b9050919050565b6120b7816120a1565b82525050565b60008160020b9050919050565b6120d3816120bd565b82525050565b600060a08301600083015184820360008601526120f68282612043565b915050602083015184820360208601526121108282612043565b9150506040830151848203604086015261212a8282612043565b915050606083015161213f60608601826120ae565b50608083015161215260808601826120ca565b508091505092915050565b6000602082019050818103600083015261217781846120d9565b905092915050565b600082825260208201905092915050565b7f74686572652073686f75646e277420626520616e7920696e707574206173736560008201527f7473000000000000000000000000000000000000000000000000000000000000602082015250565b60006121ec60228361217f565b91506121f782612190565b604082019050919050565b6000602082019050818103600083015261221b816121df565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61227082612227565b810181811067ffffffffffffffff8211171561228f5761228e612238565b5b80604052505050565b60006122a2611da5565b90506122ae8282612267565b919050565b600080fd5b600381106122c557600080fd5b50565b6000813590506122d7816122b8565b92915050565b6122e681611d69565b81146122f157600080fd5b50565b600081359050612303816122dd565b92915050565b60006040828403121561231f5761231e612222565b5b6123296040612298565b90506000612339848285016122c8565b600083015250602061234d848285016122f4565b60208301525092915050565b61236281611fd6565b811461236d57600080fd5b50565b60008135905061237f81612359565b92915050565b600067ffffffffffffffff8211156123a05761239f612238565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156123d1576123d0612238565b5b6123da82612227565b9050602081019050919050565b82818337600083830152505050565b6000612409612404846123b6565b612298565b905082815260208101848484011115612425576124246123b1565b5b6124308482856123e7565b509392505050565b600082601f83011261244d5761244c611db9565b5b813561245d8482602086016123f6565b91505092915050565b6000819050919050565b61247981612466565b811461248457600080fd5b50565b60008135905061249681612470565b92915050565b6000604082840312156124b2576124b1612222565b5b6124bc6040612298565b9050600082013567ffffffffffffffff8111156124dc576124db6122b3565b5b6124e884828501612438565b60008301525060206124fc84828501612487565b60208301525092915050565b600061251b61251684612385565b612298565b9050808382526020820190506020840283018581111561253e5761253d611dc3565b5b835b8181101561258557803567ffffffffffffffff81111561256357612562611db9565b5b808601612570898261249c565b85526020850194505050602081019050612540565b5050509392505050565b600082601f8301126125a4576125a3611db9565b5b81356125b4848260208601612508565b91505092915050565b600060e082840312156125d3576125d2612222565b5b6125dd60a0612298565b905060006125ed84828501612309565b600083015250604061260184828501612309565b602083015250608061261584828501612370565b60408301525060a082013567ffffffffffffffff811115612639576126386122b3565b5b6126458482850161258f565b60608301525060c061265984828501612487565b60808301525092915050565b60006020828403121561267b5761267a611daf565b5b600082013567ffffffffffffffff81111561269957612698611db4565b5b6126a5848285016125bd565b91505092915050565b7f77657468206e6f7420737570706f72746564206f6e207468697320636861696e600082015250565b60006126e460208361217f565b91506126ef826126ae565b602082019050919050565b60006020820190508181036000830152612713816126d7565b9050919050565b60008151905061272981612359565b92915050565b60006020828403121561274557612744611daf565b5b60006127538482850161271a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061279682611fd6565b91506127a183611fd6565b9250828210156127b4576127b361275c565b5b828203905092915050565b7f616d6f756e7420726563656976656420646964206e6f74206d6174636820616d60008201527f6f756e74206f7574000000000000000000000000000000000000000000000000602082015250565b600061281b60288361217f565b9150612826826127bf565b604082019050919050565b6000602082019050818103600083015261284a8161280e565b9050919050565b7f616d6f756e742074616b656e20657863656564656420776f727374206578636860008201527f616e676520726174650000000000000000000000000000000000000000000000602082015250565b60006128ad60298361217f565b91506128b882612851565b604082019050919050565b600060208201905081810360008301526128dc816128a0565b9050919050565b6128ec81611fd6565b82525050565b600060208201905061290760008301846128e3565b92915050565b600061291882611fd6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361294a5761294961275c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506129996000830185611d7b565b6129a660208301846128e3565b9392505050565b60008115159050919050565b6129c2816129ad565b81146129cd57600080fd5b50565b6000815190506129df816129b9565b92915050565b6000602082840312156129fb576129fa611daf565b5b6000612a09848285016129d0565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612a6e602a8361217f565b9150612a7982612a12565b604082019050919050565b60006020820190508181036000830152612a9d81612a61565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612ade578082015181840152602081019050612ac3565b83811115612aed576000848401525b50505050565b6000612afe82612aa4565b612b088185612aaf565b9350612b18818560208601612ac0565b612b2181612227565b840191505092915050565b60006080830160008301518482036000860152612b498282612af3565b9150506020830151612b5e6020860182611f98565b506040830151612b716040860182611fe0565b506060830151612b846060860182611fe0565b508091505092915050565b60006020820190508181036000830152612ba98184612b2c565b905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612c0d60268361217f565b9150612c1882612bb1565b604082019050919050565b60006020820190508181036000830152612c3c81612c00565b9050919050565b600081905092915050565b6000612c5982612aa4565b612c638185612c43565b9350612c73818560208601612ac0565b80840191505092915050565b6000612c8b8284612c4e565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612ccc601d8361217f565b9150612cd782612c96565b602082019050919050565b60006020820190508181036000830152612cfb81612cbf565b9050919050565b600081519050919050565b6000612d1882612d02565b612d22818561217f565b9350612d32818560208601612ac0565b612d3b81612227565b840191505092915050565b60006020820190508181036000830152612d608184612d0d565b90509291505056fea26469706673582212201b99d29b5c1b628d27894f10c8c198071808f69d69fcb45328508d957df7196364736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c80633268cc56146100415780634f0e0ef31461006c5780637bb26ca7146100975761003f565b3661003f57005b005b34801561004d57600080fd5b506100566100c7565b6040516100639190611d8a565b60405180910390f35b34801561007857600080fd5b506100816100eb565b60405161008e9190611d8a565b60405180910390f35b6100b160048036038101906100ac9190611e74565b61010f565b6040516100be919061215d565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b610117611b56565b6000858590501461015d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015490612202565b60405180910390fd5b610165611b8b565b83838101906101749190612665565b81600001819052508060000151602001516020015173ffffffffffffffffffffffffffffffffffffffff168160000151600001516020015173ffffffffffffffffffffffffffffffffffffffff1614801561020a57508060000151602001516000015160028111156101e9576101e8611f21565b5b81600001516000015160000151600281111561020857610207611f21565b5b145b15610274576000604051806040016040528083600001516000015181526020018360000151604001518152509050610267816102598361024b600180610c78565b610e2390919063ffffffff16565b610e6f90919063ffffffff16565b6060015192505050610c70565b610285816000015160800151610ebb565b81602001906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250506102c7816000015160400151610f68565b8160c001906fffffffffffffffffffffffffffffffff191690816fffffffffffffffffffffffffffffffff1916815250506000600281111561030c5761030b611f21565b5b81600001516000015160000151600281111561032b5761032a611f21565b5b0361050357478160e0018181525050600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16036103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c0906126fa565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08260e001516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b50505050507f0000000000000000000000000000000000000000000000000000000000000000816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061060b565b80600001516000015160200151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060400151816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105c09190611d8a565b602060405180830381865afa1580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610601919061272f565b8160e00181815250505b61065e7f00000000000000000000000000000000000000000000000000000000000000008260e00151836060015173ffffffffffffffffffffffffffffffffffffffff16610fe59092919063ffffffff16565b6000600281111561067257610671611f21565b5b81600001516020015160000151600281111561069157610690611f21565b5b036106f3577f0000000000000000000000000000000000000000000000000000000000000000816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610738565b80600001516020015160200151816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b80608001518160a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060a0015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107b19190611d8a565b602060405180830381865afa1580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f2919061272f565b816101200181815250506108208160000151604001518260000151606001518360400151846080015161106b565b8060a0015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161085d9190611d8a565b602060405180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e919061272f565b816101400181815250508061012001518161014001516108be919061278b565b8161016001818152505080600001516040015181610160015114610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e90612831565b60405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109549190611d8a565b602060405180830381865afa158015610971573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610995919061272f565b816101000181815250508061010001518160e001516109b4919061278b565b81610180018181525050610a076109ef82602001518360c001516fffffffffffffffffffffffffffffffff191661115b90919063ffffffff16565b6fffffffffffffffffffffffffffffffff19166115e6565b816101a0018181525050806101a0015181610180015110610a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a54906128c3565b60405180910390fd5b60006002811115610a7157610a70611f21565b5b816000015160000151600001516002811115610a9057610a8f611f21565b5b03610b35577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d8261018001518360e00151610ae6919061278b565b6040518263ffffffff1660e01b8152600401610b0291906128f2565b600060405180830381600087803b158015610b1c57600080fd5b505af1158015610b30573d6000803e3d6000fd5b505050505b60006002811115610b4957610b48611f21565b5b816000015160200151600001516002811115610b6857610b67611f21565b5b03610bf7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08260000151604001516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610bdd57600080fd5b505af1158015610bf1573d6000803e3d6000fd5b50505050505b610c6860405180604001604052808360000151602001518152602001836101600151815250610c5a60405180604001604052808560000151600001518152602001856101800151815250610c4c600180610c78565b610e2390919063ffffffff16565b610e6f90919063ffffffff16565b606001519150505b949350505050565b610c80611c7e565b60008367ffffffffffffffff811115610c9c57610c9b612238565b5b604051908082528060200260200182016040528015610cd557816020015b610cc2611cac565b815260200190600190039081610cba5790505b50905060008367ffffffffffffffff811115610cf457610cf3612238565b5b604051908082528060200260200182016040528015610d2d57816020015b610d1a611cac565b815260200190600190039081610d125790505b50905060008067ffffffffffffffff811115610d4c57610d4b612238565b5b604051908082528060200260200182016040528015610d8557816020015b610d72611cac565b815260200190600190039081610d6a5790505b50905060405180608001604052806000815260200160008152602001600081526020016040518060a001604052808681526020018581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b815250815250935050505092915050565b610e2b611c7e565b81836060015160000151846000018051809190610e479061290d565b81525081518110610e5b57610e5a612955565b5b602002602001018190525082905092915050565b610e77611c7e565b81836060015160200151846020018051809190610e939061290d565b81525081518110610ea757610ea6612955565b5b602002602001018190525082905092915050565b6000808203610ed057600060801b9050610f63565b6000808313610ee25782600003610ee4565b825b90506000610ef1826116e4565b90506070811015610f0a578060700382901b9150610f1e565b6070811115610f1d576070810382901c91505b5b607081613f7f01901b6dffffffffffffffffffffffffffff83161791506000841215610f5a576f80000000000000000000000000000000821791505b8160801b925050505b919050565b6000808203610f7d57600060801b9050610fe0565b60008290506000610f8d826116e4565b90506070811015610fa6578060700382901b9150610fba565b6070811115610fb9576070810382901c91505b5b607081613fff01901b6dffffffffffffffffffffffffffff83161791508160801b925050505b919050565b6110668363095ea7b360e01b8484604051602401611004929190612984565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117c5565b505050565b60008290506000829050600061108087610f68565b905060005b86518110156111515760008782815181106110a3576110a2612955565b5b6020026020010151905060006110bc8260200151610ebb565b9050600060018a516110ce919061278b565b84101561111d576111166110fe86846fffffffffffffffffffffffffffffffff191661115b90919063ffffffff16565b6fffffffffffffffffffffffffffffffff19166115e6565b9050611121565b8a90505b61112f83600001518261188c565b808b61113b919061278b565b9a505050508061114a9061290d565b9050611085565b5050505050505050565b600080617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff1690506000617fff60708560801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050617fff82036112ed57617fff810361127c57836fffffffffffffffffffffffffffffffff1916856fffffffffffffffffffffffffffffffff191603611224576f8000000000000000000000000000000060801b84168518925050506115e0565b6f8000000000000000000000000000000060801b8486186fffffffffffffffffffffffffffffffff19160361125f57838517925050506115e0565b6f7fff800000000000000000000000000060801b925050506115e0565b600060801b6f7fffffffffffffffffffffffffffffff60801b85166fffffffffffffffffffffffffffffffff1916036112cc576f7fff800000000000000000000000000060801b925050506115e0565b6f8000000000000000000000000000000060801b84168518925050506115e0565b617fff810361136757600060801b6f7fffffffffffffffffffffffffffffff60801b86166fffffffffffffffffffffffffffffffff191603611346576f7fff800000000000000000000000000060801b925050506115e0565b6f8000000000000000000000000000000060801b85168418925050506115e0565b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff169050600083036113a257600192506113b7565b6e010000000000000000000000000000811790505b60006dffffffffffffffffffffffffffff8660801c166fffffffffffffffffffffffffffffffff169050600083036113f25760019250611407565b6e010000000000000000000000000000811790505b80820291506000820361147357600060801b6f8000000000000000000000000000000060801b878918166fffffffffffffffffffffffffffffffff19161161145357600060801b611468565b6f8000000000000000000000000000000060801b5b9450505050506115e0565b828401935060007c02000000000000000000000000000000000000000000000000000000008310156114da577c01000000000000000000000000000000000000000000000000000000008310156114d2576114cd836116e4565b6114d5565b60e05b6114dd565b60e15b905061407081860110156114f85760009450600092506115a0565b6140e0818601101561153c5761407085101561151d57846140700383901c9250611533565b61407085111561153257614070850383901b92505b5b6000945061159f565b61c0dd818601111561155657617fff94506000925061159e565b607081111561156d576070810383901c9250611581565b6070811015611580578060700383901b92505b5b6dffffffffffffffffffffffffffff831692506140df8186010394505b5b5b82607086901b6f8000000000000000000000000000000060801b898b181660801c6fffffffffffffffffffffffffffffffff16171760801b955050505050505b92915050565b600080617fff60708460801c6fffffffffffffffffffffffffffffffff16901c166fffffffffffffffffffffffffffffffff169050613fff81101561162f5760009150506116df565b6f800000000000000000000000000000008360801c6fffffffffffffffffffffffffffffffff161061166057600080fd5b6140fe81111561166f57600080fd5b60006e0100000000000000000000000000006dffffffffffffffffffffffffffff8560801c6fffffffffffffffffffffffffffffffff161617905061406f8210156116c3578161406f0381901c90506116d9565b61406f8211156116d85761406f820381901b90505b5b80925050505b919050565b60008082116116f257600080fd5b6000700100000000000000000000000000000000831061171a57608083901c92506080810190505b68010000000000000000831061173857604083901c92506040810190505b640100000000831061175257602083901c92506020810190505b62010000831061176a57601083901c92506010810190505b610100831061178157600883901c92506008810190505b6010831061179757600483901c92506004810190505b600483106117ad57600283901c92506002810190505b600283106117bc576001810190505b80915050919050565b6000611827826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119899092919063ffffffff16565b9050600081511115611887578080602001905181019061184791906129e5565b611886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187d90612a84565b60405180910390fd5b5b505050565b600060405180608001604052808481526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018381526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166309b81346826040518263ffffffff1660e01b81526004016119409190612b8f565b6020604051808303816000875af115801561195f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611983919061272f565b50505050565b606061199884846000856119a1565b90509392505050565b6060824710156119e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119dd90612c23565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611a0f9190612c7f565b60006040518083038185875af1925050503d8060008114611a4c576040519150601f19603f3d011682016040523d82523d6000602084013e611a51565b606091505b5091509150611a6287838387611a6e565b92505050949350505050565b60608315611ad0576000835103611ac857611a8885611ae3565b611ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abe90612ce2565b60405180910390fd5b5b829050611adb565b611ada8383611b06565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611b195781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4d9190612d46565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600060010b8152602001600060020b81525090565b604051806101c00160405280611b9f611ccc565b815260200160006fffffffffffffffffffffffffffffffff19168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff19168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001611ca6611b56565b81525090565b6040518060400160405280611cbf611d07565b8152602001600081525090565b6040518060a00160405280611cdf611d07565b8152602001611cec611d07565b81526020016000815260200160608152602001600081525090565b604051806040016040528060006002811115611d2657611d25611f21565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d7482611d49565b9050919050565b611d8481611d69565b82525050565b6000602082019050611d9f6000830184611d7b565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611dde57611ddd611db9565b5b8235905067ffffffffffffffff811115611dfb57611dfa611dbe565b5b602083019150836060820283011115611e1757611e16611dc3565b5b9250929050565b60008083601f840112611e3457611e33611db9565b5b8235905067ffffffffffffffff811115611e5157611e50611dbe565b5b602083019150836001820283011115611e6d57611e6c611dc3565b5b9250929050565b60008060008060408587031215611e8e57611e8d611daf565b5b600085013567ffffffffffffffff811115611eac57611eab611db4565b5b611eb887828801611dc8565b9450945050602085013567ffffffffffffffff811115611edb57611eda611db4565b5b611ee787828801611e1e565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611f6157611f60611f21565b5b50565b6000819050611f7282611f50565b919050565b6000611f8282611f64565b9050919050565b611f9281611f77565b82525050565b611fa181611d69565b82525050565b604082016000820151611fbd6000850182611f89565b506020820151611fd06020850182611f98565b50505050565b6000819050919050565b611fe981611fd6565b82525050565b6060820160008201516120056000850182611fa7565b5060208201516120186040850182611fe0565b50505050565b600061202a8383611fef565b60608301905092915050565b6000602082019050919050565b600061204e82611ef5565b6120588185611f00565b935061206383611f11565b8060005b8381101561209457815161207b888261201e565b975061208683612036565b925050600181019050612067565b5085935050505092915050565b60008160010b9050919050565b6120b7816120a1565b82525050565b60008160020b9050919050565b6120d3816120bd565b82525050565b600060a08301600083015184820360008601526120f68282612043565b915050602083015184820360208601526121108282612043565b9150506040830151848203604086015261212a8282612043565b915050606083015161213f60608601826120ae565b50608083015161215260808601826120ca565b508091505092915050565b6000602082019050818103600083015261217781846120d9565b905092915050565b600082825260208201905092915050565b7f74686572652073686f75646e277420626520616e7920696e707574206173736560008201527f7473000000000000000000000000000000000000000000000000000000000000602082015250565b60006121ec60228361217f565b91506121f782612190565b604082019050919050565b6000602082019050818103600083015261221b816121df565b9050919050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61227082612227565b810181811067ffffffffffffffff8211171561228f5761228e612238565b5b80604052505050565b60006122a2611da5565b90506122ae8282612267565b919050565b600080fd5b600381106122c557600080fd5b50565b6000813590506122d7816122b8565b92915050565b6122e681611d69565b81146122f157600080fd5b50565b600081359050612303816122dd565b92915050565b60006040828403121561231f5761231e612222565b5b6123296040612298565b90506000612339848285016122c8565b600083015250602061234d848285016122f4565b60208301525092915050565b61236281611fd6565b811461236d57600080fd5b50565b60008135905061237f81612359565b92915050565b600067ffffffffffffffff8211156123a05761239f612238565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156123d1576123d0612238565b5b6123da82612227565b9050602081019050919050565b82818337600083830152505050565b6000612409612404846123b6565b612298565b905082815260208101848484011115612425576124246123b1565b5b6124308482856123e7565b509392505050565b600082601f83011261244d5761244c611db9565b5b813561245d8482602086016123f6565b91505092915050565b6000819050919050565b61247981612466565b811461248457600080fd5b50565b60008135905061249681612470565b92915050565b6000604082840312156124b2576124b1612222565b5b6124bc6040612298565b9050600082013567ffffffffffffffff8111156124dc576124db6122b3565b5b6124e884828501612438565b60008301525060206124fc84828501612487565b60208301525092915050565b600061251b61251684612385565b612298565b9050808382526020820190506020840283018581111561253e5761253d611dc3565b5b835b8181101561258557803567ffffffffffffffff81111561256357612562611db9565b5b808601612570898261249c565b85526020850194505050602081019050612540565b5050509392505050565b600082601f8301126125a4576125a3611db9565b5b81356125b4848260208601612508565b91505092915050565b600060e082840312156125d3576125d2612222565b5b6125dd60a0612298565b905060006125ed84828501612309565b600083015250604061260184828501612309565b602083015250608061261584828501612370565b60408301525060a082013567ffffffffffffffff811115612639576126386122b3565b5b6126458482850161258f565b60608301525060c061265984828501612487565b60808301525092915050565b60006020828403121561267b5761267a611daf565b5b600082013567ffffffffffffffff81111561269957612698611db4565b5b6126a5848285016125bd565b91505092915050565b7f77657468206e6f7420737570706f72746564206f6e207468697320636861696e600082015250565b60006126e460208361217f565b91506126ef826126ae565b602082019050919050565b60006020820190508181036000830152612713816126d7565b9050919050565b60008151905061272981612359565b92915050565b60006020828403121561274557612744611daf565b5b60006127538482850161271a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061279682611fd6565b91506127a183611fd6565b9250828210156127b4576127b361275c565b5b828203905092915050565b7f616d6f756e7420726563656976656420646964206e6f74206d6174636820616d60008201527f6f756e74206f7574000000000000000000000000000000000000000000000000602082015250565b600061281b60288361217f565b9150612826826127bf565b604082019050919050565b6000602082019050818103600083015261284a8161280e565b9050919050565b7f616d6f756e742074616b656e20657863656564656420776f727374206578636860008201527f616e676520726174650000000000000000000000000000000000000000000000602082015250565b60006128ad60298361217f565b91506128b882612851565b604082019050919050565b600060208201905081810360008301526128dc816128a0565b9050919050565b6128ec81611fd6565b82525050565b600060208201905061290760008301846128e3565b92915050565b600061291882611fd6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361294a5761294961275c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506129996000830185611d7b565b6129a660208301846128e3565b9392505050565b60008115159050919050565b6129c2816129ad565b81146129cd57600080fd5b50565b6000815190506129df816129b9565b92915050565b6000602082840312156129fb576129fa611daf565b5b6000612a09848285016129d0565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612a6e602a8361217f565b9150612a7982612a12565b604082019050919050565b60006020820190508181036000830152612a9d81612a61565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612ade578082015181840152602081019050612ac3565b83811115612aed576000848401525b50505050565b6000612afe82612aa4565b612b088185612aaf565b9350612b18818560208601612ac0565b612b2181612227565b840191505092915050565b60006080830160008301518482036000860152612b498282612af3565b9150506020830151612b5e6020860182611f98565b506040830151612b716040860182611fe0565b506060830151612b846060860182611fe0565b508091505092915050565b60006020820190508181036000830152612ba98184612b2c565b905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612c0d60268361217f565b9150612c1882612bb1565b604082019050919050565b60006020820190508181036000830152612c3c81612c00565b9050919050565b600081905092915050565b6000612c5982612aa4565b612c638185612c43565b9350612c73818560208601612ac0565b80840191505092915050565b6000612c8b8284612c4e565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612ccc601d8361217f565b9150612cd782612c96565b602082019050919050565b60006020820190508181036000830152612cfb81612cbf565b9050919050565b600081519050919050565b6000612d1882612d02565b612d22818561217f565b9350612d32818560208601612ac0565b612d3b81612227565b840191505092915050565b60006020820190508181036000830152612d608184612d0d565b90509291505056fea26469706673582212201b99d29b5c1b628d27894f10c8c198071808f69d69fcb45328508d957df7196364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}